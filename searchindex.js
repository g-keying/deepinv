Search.setIndex({"alltitles": {"1. Data augmentation": [[321, "data-augmentation"]], "1. Get started with FastMRI": [[319, "get-started-with-fastmri"]], "2. Equivariant denoiser or plug-and-play": [[321, "equivariant-denoiser-or-plug-and-play"]], "2. Train an accelerated MRI problem with neural networks": [[319, "train-an-accelerated-mri-problem-with-neural-networks"]], "3. Equivariant imaging": [[321, "equivariant-imaging"]], "3. Load raw FastMRI data": [[319, "load-raw-fastmri-data"]], "3D convolutions": [[313, "d-convolutions"]], "3D diffraction PSF": [[313, null]], "3D wavelet denoising": [[325, null]], "4. Train using raw data": [[319, "train-using-raw-data"]], "5. Explore 3D MRI": [[319, "explore-3d-mri"]], "6. Explore dynamic MRI": [[319, "explore-dynamic-mri"]], "A tour of blur operators": [[306, null]], "A tour of forward sensing operators": [[316, null]], "ADMMIteration": [[149, null]], "API": [[0, null]], "Advanced": [[301, null], [324, "advanced"]], "Advanced Transformations": [[396, "id2"]], "Advanced transforms": [[9, "advanced-transforms"], [396, "advanced-transforms"]], "Adversarial Learning": [[2, "adversarial-learning"], [304, null], [324, "adversarial-learning"], [392, "adversarial-learning"]], "Adversarial Losses Overview": [[392, "id5"]], "Adversarial Networks": [[4, "adversarial-networks"], [381, null]], "Adversarial Training": [[8, "adversarial-training"]], "AdversarialOptimizer": [[258, null]], "AdversarialTrainer": [[259, null]], "Affine": [[268, null]], "AmplitudeLoss": [[111, null]], "AmplitudeLossDistance": [[112, null]], "Apply matched filtering to recover the signal and plot the results": [[311, "apply-matched-filtering-to-recover-the-signal-and-plot-the-results"]], "Apply transformation on dataset": [[310, "apply-transformation-on-dataset"]], "Artifact Removal": [[4, "artifact-removal"], [382, null]], "Artifact2ArtifactLoss": [[31, null]], "Artifact2ArtifactSplittingMaskGenerator": [[229, null]], "ArtifactRemoval": [[76, null]], "AutoEncoder": [[77, null]], "AverageMeter": [[276, null]], "BM3D": [[78, null]], "Base Class": [[5, "base-class"]], "Base Classes": [[4, "base-classes"], [6, "base-classes"]], "Base class": [[2, "base-class"], [3, "base-class"], [9, "base-class"]], "BaseDEQ": [[272, null]], "BaseLossScheduler": [[32, null]], "BaseMaskGenerator": [[230, null]], "BaseOptim": [[113, null]], "BaseUnfold": [[273, null]], "Basics": [[322, null], [324, "basics"]], "Benefits of using a decomposable forward operator.": [[315, "benefits-of-using-a-decomposable-forward-operator"]], "BernoulliSplittingMaskGenerator": [[231, null]], "Blur": [[168, null], [316, "blur"]], "Blur generators": [[306, "blur-generators"]], "BlurFFT": [[169, null]], "Bregman": [[5, "bregman"], [114, null], [386, "bregman"]], "Bregman potentials": [[386, "id6"]], "BregmanL2": [[115, null]], "Bregman_ICNN": [[116, null]], "Build Sampler class": [[341, "build-sampler-class"]], "Building your custom sampling algorithm.": [[341, null]], "BurgEntropy": [[117, null]], "CBSD68": [[13, null]], "CPABDiffeomorphism": [[260, null]], "CPIteration": [[150, null]], "CSGM / AmbientGAN training": [[303, "csgm-ambientgan-training"]], "CSGMGenerator": [[79, null]], "Check learned noise level": [[356, "check-learned-noise-level"]], "Classical Denoisers": [[4, "classical-denoisers"]], "Classical denoisers": [[383, "classical-denoisers"]], "Combining Physics": [[379, "combining-physics"]], "Community": [[368, null]], "Complex denoisers": [[383, "complex-denoisers"]], "Compressed Sensing": [[316, "compressed-sensing"]], "CompressedSensing": [[170, null]], "CompressiveSpectralImaging": [[171, null]], "Computation times": [[302, null], [305, null], [323, null], [329, null], [333, null], [340, null], [347, null], [358, null], [359, null], [367, null], [373, null]], "Computed Tomography": [[316, "computed-tomography"]], "Conditional GAN": [[381, "conditional-gan"]], "Conditional GAN training": [[303, "conditional-gan-training"]], "Confocal microscope PSF": [[313, "confocal-microscope-psf"]], "ConfocalBlurGenerator3D": [[232, null]], "ConvDecoder": [[80, null]], "Convolution Basics": [[306, "convolution-basics"]], "Create a Monte Carlo sampler": [[342, "create-a-monte-carlo-sampler"]], "Create a dataloader": [[308, "create-a-dataloader"], [310, "create-a-dataloader"]], "Create forward model": [[311, "create-forward-model"]], "Create the MCMC sampler": [[345, "create-the-mcmc-sampler"]], "Create the Monte Carlo sampler": [[342, "create-the-monte-carlo-sampler"]], "Create the denoising operator and solve the problem.": [[325, "create-the-denoising-operator-and-solve-the-problem"]], "Create the preconditioned and standard ULA samplers": [[341, "create-the-preconditioned-and-standard-ula-samplers"]], "Creating a custom forward operator.": [[315, "creating-a-custom-forward-operator"]], "Creating a decomposable forward operator.": [[315, "creating-a-decomposable-forward-operator"]], "Creating a forward operator.": [[315, null]], "Creating your own dataset": [[308, null]], "Custom Unfolded Architectures": [[389, "custom-unfolded-architectures"]], "Custom Unfolded Blocks": [[10, "custom-unfolded-blocks"]], "DCGANDiscriminator": [[81, null]], "DCGANGenerator": [[82, null]], "DDRM": [[249, null]], "DEQ_builder": [[274, null]], "DIV2K": [[14, null]], "DPIR": [[118, null]], "DPIR method for PnP image deblurring.": [[334, null]], "DPS": [[250, null]], "DPS Algorithm": [[344, "dps-algorithm"]], "DPS approximation": [[344, "dps-approximation"]], "DRSIteration": [[151, null]], "DRUNet": [[83, null]], "Data Fidelity": [[5, "data-fidelity"], [386, "data-fidelity"]], "Data Fidelity Overview": [[386, "id7"]], "Data Transforms": [[1, "data-transforms"], [391, "data-transforms"]], "Data fidelity step": [[343, "data-fidelity-step"]], "DataFidelity": [[119, null]], "Datasets": [[391, null]], "Datasets Overview": [[391, "id5"], [391, "id6"]], "Decolorize": [[172, null], [316, "decolorize"]], "DecomposablePhysics": [[173, null]], "Deep Denoisers": [[4, "deep-denoisers"]], "Deep Equilibrium": [[10, "deep-equilibrium"], [389, "deep-equilibrium"]], "Deep Equilibrium (DEQ) algorithms for image deblurring": [[360, null]], "Deep Image Prior": [[4, "deep-image-prior"], [381, "deep-image-prior"]], "Deep denoisers": [[383, "deep-denoisers"], [383, "id2"]], "DeepImagePrior": [[84, null]], "DeepInverse: a PyTorch library for imaging with deep learning": [[371, null]], "Define a custom iterator for the PDNet learned primal-dual algorithm.": [[363, "define-a-custom-iterator-for-the-pdnet-learned-primal-dual-algorithm"]], "Define a custom optimization algorithm": [[335, "define-a-custom-optimization-algorithm"]], "Define a forward operator": [[312, "define-a-forward-operator"]], "Define a model": [[312, "define-a-model"]], "Define diffusion schedule": [[344, "define-diffusion-schedule"]], "Define forward operator and generate dataset": [[320, "define-forward-operator-and-generate-dataset"], [364, "define-forward-operator-and-generate-dataset"]], "Define forward operator and noise model": [[309, "define-forward-operator-and-noise-model"], [341, "define-forward-operator-and-noise-model"], [342, "define-forward-operator-and-noise-model"], [345, "define-forward-operator-and-noise-model"]], "Define loss": [[354, "define-loss"]], "Define model": [[348, "define-model"], [354, "define-model"]], "Define models": [[303, "define-models"]], "Define physics": [[348, "define-physics"]], "Define physics operator": [[307, "define-physics-operator"]], "Define the  DEQ algorithm.": [[360, "define-the-deq-algorithm"]], "Define the MMSE denoiser": [[342, "define-the-mmse-denoiser"]], "Define the PnP algorithm.": [[336, "define-the-pnp-algorithm"]], "Define the custom fStep and gStep modules": [[335, "define-the-custom-fstep-and-gstep-modules"]], "Define the deep image prior": [[309, "define-the-deep-image-prior"]], "Define the likelihood": [[345, "define-the-likelihood"]], "Define the model.": [[363, "define-the-model"]], "Define the prior": [[341, "define-the-prior"], [345, "define-the-prior"]], "Define the sampling iteration": [[341, "define-the-sampling-iteration"]], "Define the trainable prior and data fidelity terms.": [[363, "define-the-trainable-prior-and-data-fidelity-terms"]], "Define the training parameters.": [[360, "define-the-training-parameters"], [361, "define-the-training-parameters"], [362, "define-the-training-parameters"], [363, "define-the-training-parameters"], [365, "define-the-training-parameters"]], "Define the unfolded PnP algorithm.": [[365, "define-the-unfolded-pnp-algorithm"]], "Define the unfolded Proximal Gradient algorithm.": [[361, "define-the-unfolded-proximal-gradient-algorithm"], [362, "define-the-unfolded-proximal-gradient-algorithm"]], "Define the unfolded trainable model.": [[363, "define-the-unfolded-trainable-model"]], "Defining New Operators": [[377, null]], "Definition of forward operator and noise model": [[331, "definition-of-forward-operator-and-noise-model"]], "Demosaicing": [[174, null], [316, "demosaicing"]], "Denoiser": [[85, null]], "Denoisers": [[383, null]], "Denoisers Utilities": [[383, "denoisers-utilities"]], "Denoisers Utils": [[4, "denoisers-utils"]], "Denoising": [[175, null], [316, "denoising"], [330, "denoising"]], "Denoising Losses": [[392, "id2"]], "Denoising step": [[343, "denoising-step"], [344, "denoising-step"]], "DiffPIR": [[251, null]], "DiffUNet": [[86, null]], "Diffraction PSF generation": [[313, "diffraction-psf-generation"]], "Diffraction blur generators": [[306, "diffraction-blur-generators"]], "DiffractionBlurGenerator": [[233, null]], "DiffractionBlurGenerator3D": [[234, null]], "Diffusion": [[7, "diffusion"], [387, "diffusion"]], "Diffusion and MCMC Algorithms": [[387, null]], "Diffusion methods": [[387, "id2"]], "Diffusion model loading": [[344, "diffusion-model-loading"]], "DiffusionSampler": [[252, null]], "Discriminator Networks": [[381, "id2"]], "DiscriminatorLoss": [[55, null]], "DiscriminatorMetric": [[56, null]], "Display final estimated phase retrieval": [[317, "display-final-estimated-phase-retrieval"]], "Display probe overlap": [[317, "display-probe-overlap"]], "Distance": [[5, "distance"], [120, null]], "DnCNN": [[87, null]], "Downsampling": [[176, null]], "Dynamic networks": [[383, "dynamic-networks"]], "DynamicMRI": [[177, null]], "EILoss": [[33, null]], "EPLL": [[121, null]], "EPLLDenoiser": [[88, null]], "ERGAS": [[63, null]], "ESRGANDiscriminator": [[89, null]], "EquispacedMaskGenerator": [[235, null]], "Equivariant denoisers": [[383, "equivariant-denoisers"]], "EquivariantDenoiser": [[90, null]], "Euclidean": [[269, null]], "Evaluate the model on the problem and plot the results.": [[326, "evaluate-the-model-on-the-problem-and-plot-the-results"], [327, "evaluate-the-model-on-the-problem-and-plot-the-results"], [335, "evaluate-the-model-on-the-problem-and-plot-the-results"], [336, "evaluate-the-model-on-the-problem-and-plot-the-results"], [338, "evaluate-the-model-on-the-problem-and-plot-the-results"]], "Evaluate the model on the problem.": [[334, "evaluate-the-model-on-the-problem"], [337, "evaluate-the-model-on-the-problem"]], "Evaluate the reconstruction algorithm on the problem.": [[307, "evaluate-the-reconstruction-algorithm-on-the-problem"]], "Examples": [[324, null]], "Examples using AdversarialOptimizer:": [[258, "examples-using-adversarialoptimizer"]], "Examples using AdversarialTrainer:": [[259, "examples-using-adversarialtrainer"]], "Examples using Affine:": [[268, "examples-using-affine"]], "Examples using Artifact2ArtifactLoss:": [[31, "examples-using-artifact2artifactloss"]], "Examples using ArtifactRemoval:": [[76, "examples-using-artifactremoval"]], "Examples using BaseDEQ:": [[272, "examples-using-basedeq"]], "Examples using BaseMaskGenerator:": [[230, "examples-using-basemaskgenerator"]], "Examples using BaseOptim:": [[113, "examples-using-baseoptim"]], "Examples using BaseUnfold:": [[273, "examples-using-baseunfold"]], "Examples using BernoulliSplittingMaskGenerator:": [[231, "examples-using-bernoullisplittingmaskgenerator"]], "Examples using Blur:": [[168, "examples-using-blur"]], "Examples using BlurFFT:": [[169, "examples-using-blurfft"]], "Examples using Bregman:": [[114, "examples-using-bregman"]], "Examples using BurgEntropy:": [[117, "examples-using-burgentropy"]], "Examples using CPABDiffeomorphism:": [[260, "examples-using-cpabdiffeomorphism"]], "Examples using CPIteration:": [[150, "examples-using-cpiteration"]], "Examples using CSGMGenerator:": [[79, "examples-using-csgmgenerator"]], "Examples using CompressedSensing:": [[170, "examples-using-compressedsensing"]], "Examples using CompressiveSpectralImaging:": [[171, "examples-using-compressivespectralimaging"]], "Examples using ConfocalBlurGenerator3D:": [[232, "examples-using-confocalblurgenerator3d"]], "Examples using ConvDecoder:": [[80, "examples-using-convdecoder"]], "Examples using DCGANDiscriminator:": [[81, "examples-using-dcgandiscriminator"]], "Examples using DCGANGenerator:": [[82, "examples-using-dcgangenerator"]], "Examples using DDRM:": [[249, "examples-using-ddrm"]], "Examples using DEQ_builder:": [[274, "examples-using-deq-builder"]], "Examples using DPIR:": [[118, "examples-using-dpir"]], "Examples using DPS:": [[250, "examples-using-dps"]], "Examples using DRUNet:": [[83, "examples-using-drunet"]], "Examples using DataFidelity:": [[119, "examples-using-datafidelity"]], "Examples using Decolorize:": [[172, "examples-using-decolorize"]], "Examples using DecomposablePhysics:": [[173, "examples-using-decomposablephysics"]], "Examples using DeepImagePrior:": [[84, "examples-using-deepimageprior"]], "Examples using Demosaicing:": [[174, "examples-using-demosaicing"]], "Examples using Denoiser:": [[85, "examples-using-denoiser"]], "Examples using Denoising:": [[175, "examples-using-denoising"]], "Examples using DiffPIR:": [[251, "examples-using-diffpir"]], "Examples using DiffUNet:": [[86, "examples-using-diffunet"]], "Examples using DiffractionBlurGenerator3D:": [[234, "examples-using-diffractionblurgenerator3d"]], "Examples using DiffractionBlurGenerator:": [[233, "examples-using-diffractionblurgenerator"]], "Examples using DiffusionSampler:": [[252, "examples-using-diffusionsampler"]], "Examples using DiscriminatorLoss:": [[55, "examples-using-discriminatorloss"]], "Examples using DnCNN:": [[87, "examples-using-dncnn"]], "Examples using Downsampling:": [[176, "examples-using-downsampling"]], "Examples using DynamicMRI:": [[177, "examples-using-dynamicmri"]], "Examples using EILoss:": [[33, "examples-using-eiloss"]], "Examples using EPLL:": [[121, "examples-using-epll"]], "Examples using ERGAS:": [[63, "examples-using-ergas"]], "Examples using EquispacedMaskGenerator:": [[235, "examples-using-equispacedmaskgenerator"]], "Examples using EquivariantDenoiser:": [[90, "examples-using-equivariantdenoiser"]], "Examples using Euclidean:": [[269, "examples-using-euclidean"]], "Examples using FNEJacobianSpectralNorm:": [[34, "examples-using-fnejacobianspectralnorm"]], "Examples using FastMRISliceDataset:": [[16, "examples-using-fastmrislicedataset"]], "Examples using GDIteration:": [[153, "examples-using-gditeration"]], "Examples using GSDRUNet:": [[91, "examples-using-gsdrunet"]], "Examples using GammaNoise:": [[178, "examples-using-gammanoise"]], "Examples using GaussianMaskGenerator:": [[236, "examples-using-gaussianmaskgenerator"]], "Examples using GaussianNoise:": [[179, "examples-using-gaussiannoise"]], "Examples using GaussianSplittingMaskGenerator:": [[237, "examples-using-gaussiansplittingmaskgenerator"]], "Examples using GeneratorLoss:": [[57, "examples-using-generatorloss"]], "Examples using GeneratorMixture:": [[238, "examples-using-generatormixture"]], "Examples using HDF5Dataset:": [[18, "examples-using-hdf5dataset"]], "Examples using Homography:": [[261, "examples-using-homography"]], "Examples using HyperSpectralUnmixing:": [[181, "examples-using-hyperspectralunmixing"]], "Examples using IndicatorL2:": [[123, "examples-using-indicatorl2"]], "Examples using Inpainting:": [[182, "examples-using-inpainting"]], "Examples using L1:": [[125, "examples-using-l1"]], "Examples using L2:": [[129, "examples-using-l2"]], "Examples using LinearPhysics:": [[183, "examples-using-linearphysics"]], "Examples using LogPoissonLikelihood:": [[131, "examples-using-logpoissonlikelihood"]], "Examples using LogPoissonNoise:": [[184, "examples-using-logpoissonnoise"]], "Examples using Loss:": [[38, "examples-using-loss"]], "Examples using MCLoss:": [[39, "examples-using-mcloss"]], "Examples using MOILoss:": [[41, "examples-using-moiloss"]], "Examples using MRI:": [[185, "examples-using-mri"]], "Examples using MRIMixin:": [[186, "examples-using-mrimixin"]], "Examples using MedianFilter:": [[93, "examples-using-medianfilter"]], "Examples using MonteCarlo:": [[253, "examples-using-montecarlo"]], "Examples using MotionBlurGenerator:": [[239, "examples-using-motionblurgenerator"]], "Examples using MultiCoilMRI:": [[187, "examples-using-multicoilmri"]], "Examples using NBUDataset:": [[22, "examples-using-nbudataset"]], "Examples using Neighbor2Neighbor:": [[42, "examples-using-neighbor2neighbor"]], "Examples using NoiseModel:": [[188, "examples-using-noisemodel"]], "Examples using OptimIterator:": [[134, "examples-using-optimiterator"]], "Examples using PDNet_DualBlock:": [[94, "examples-using-pdnet-dualblock"]], "Examples using PDNet_PrimalBlock:": [[95, "examples-using-pdnet-primalblock"]], "Examples using PGDIteration:": [[156, "examples-using-pgditeration"]], "Examples using PSFGenerator:": [[240, "examples-using-psfgenerator"]], "Examples using PanNet:": [[96, "examples-using-pannet"]], "Examples using PanTiltRotate:": [[270, "examples-using-pantiltrotate"]], "Examples using Pansharpen:": [[189, "examples-using-pansharpen"]], "Examples using PatchDataset:": [[23, "examples-using-patchdataset"]], "Examples using PatchGANDiscriminator:": [[97, "examples-using-patchgandiscriminator"]], "Examples using PatchNR:": [[135, "examples-using-patchnr"]], "Examples using PatchPrior:": [[136, "examples-using-patchprior"]], "Examples using Phase2PhaseLoss:": [[43, "examples-using-phase2phaseloss"]], "Examples using PhaseRetrieval:": [[190, "examples-using-phaseretrieval"]], "Examples using Physics:": [[191, "examples-using-physics"]], "Examples using PhysicsGenerator:": [[242, "examples-using-physicsgenerator"]], "Examples using PnP:": [[137, "examples-using-pnp"]], "Examples using PoissonGaussianNoise:": [[192, "examples-using-poissongaussiannoise"]], "Examples using PoissonLikelihood:": [[138, "examples-using-poissonlikelihood"]], "Examples using PoissonNoise:": [[193, "examples-using-poissonnoise"]], "Examples using Potential:": [[140, "examples-using-potential"]], "Examples using Prior:": [[141, "examples-using-prior"]], "Examples using ProductConvolutionBlurGenerator:": [[243, "examples-using-productconvolutionblurgenerator"]], "Examples using Ptychography:": [[194, "examples-using-ptychography"]], "Examples using R2RLoss:": [[44, "examples-using-r2rloss"]], "Examples using RED:": [[142, "examples-using-red"]], "Examples using RadioInterferometry:": [[196, "examples-using-radiointerferometry"]], "Examples using RandomMaskGenerator:": [[244, "examples-using-randommaskgenerator"]], "Examples using RandomPhaseRetrieval:": [[197, "examples-using-randomphaseretrieval"]], "Examples using Reconstructor:": [[98, "examples-using-reconstructor"]], "Examples using Reflect:": [[262, "examples-using-reflect"]], "Examples using Rotate:": [[263, "examples-using-rotate"]], "Examples using Scale:": [[264, "examples-using-scale"]], "Examples using ScorePrior:": [[143, "examples-using-scoreprior"]], "Examples using SequentialMRI:": [[198, "examples-using-sequentialmri"]], "Examples using Shift:": [[265, "examples-using-shift"]], "Examples using Similarity:": [[271, "examples-using-similarity"]], "Examples using SimpleFastMRISliceDataset:": [[25, "examples-using-simplefastmrislicedataset"]], "Examples using SinglePhotonLidar:": [[199, "examples-using-singlephotonlidar"]], "Examples using SinglePixelCamera:": [[200, "examples-using-singlepixelcamera"]], "Examples using SpaceVaryingBlur:": [[201, "examples-using-spacevaryingblur"]], "Examples using SpectralAngleMapper:": [[75, "examples-using-spectralanglemapper"]], "Examples using SplittingLoss:": [[47, "examples-using-splittingloss"]], "Examples using StackedLinearPhysics:": [[202, "examples-using-stackedlinearphysics"]], "Examples using StackedPhysics:": [[203, "examples-using-stackedphysics"]], "Examples using StackedPhysicsLoss:": [[48, "examples-using-stackedphysicsloss"]], "Examples using SupAdversarialDiscriminatorLoss:": [[58, "examples-using-supadversarialdiscriminatorloss"]], "Examples using SupAdversarialGeneratorLoss:": [[59, "examples-using-supadversarialgeneratorloss"]], "Examples using SupLoss:": [[50, "examples-using-suploss"]], "Examples using SureGaussianLoss:": [[51, "examples-using-suregaussianloss"]], "Examples using SurePGLoss:": [[52, "examples-using-surepgloss"]], "Examples using SurePoissonLoss:": [[53, "examples-using-surepoissonloss"]], "Examples using TVPrior:": [[145, "examples-using-tvprior"]], "Examples using TimeMixin:": [[206, "examples-using-timemixin"]], "Examples using Tomography:": [[207, "examples-using-tomography"]], "Examples using Trainer:": [[12, "examples-using-trainer"]], "Examples using Transform:": [[267, "examples-using-transform"]], "Examples using UAIRGeneratorLoss:": [[60, "examples-using-uairgeneratorloss"]], "Examples using ULA:": [[255, "examples-using-ula"]], "Examples using UNet:": [[106, "examples-using-unet"]], "Examples using UniformNoise:": [[209, "examples-using-uniformnoise"]], "Examples using UnsupAdversarialDiscriminatorLoss:": [[61, "examples-using-unsupadversarialdiscriminatorloss"]], "Examples using UnsupAdversarialGeneratorLoss:": [[62, "examples-using-unsupadversarialgeneratorloss"]], "Examples using Urban100HR:": [[26, "examples-using-urban100hr"]], "Examples using VarNet:": [[107, "examples-using-varnet"]], "Examples using WaveletDenoiser:": [[108, "examples-using-waveletdenoiser"]], "Examples using WaveletDictDenoiser:": [[109, "examples-using-waveletdictdenoiser"]], "Examples using WaveletPrior:": [[147, "examples-using-waveletprior"]], "Examples using build_probe:": [[246, "examples-using-build-probe"]], "Examples using correct_global_phase:": [[160, "examples-using-correct-global-phase"]], "Examples using demo_mri_model:": [[279, "examples-using-demo-mri-model"]], "Examples using dirac_like:": [[280, "examples-using-dirac-like"]], "Examples using fStep:": [[158, "examples-using-fstep"]], "Examples using gStep:": [[159, "examples-using-gstep"]], "Examples using gaussian_blur:": [[213, "examples-using-gaussian-blur"]], "Examples using generate_dataset:": [[27, "examples-using-generate-dataset"]], "Examples using generate_shifts:": [[247, "examples-using-generate-shifts"]], "Examples using get_data_home:": [[281, "examples-using-get-data-home"]], "Examples using get_degradation_url:": [[282, "examples-using-get-degradation-url"]], "Examples using get_freer_gpu:": [[283, "examples-using-get-freer-gpu"]], "Examples using get_image_url:": [[284, "examples-using-get-image-url"]], "Examples using load_dataset:": [[286, "examples-using-load-dataset"]], "Examples using load_degradation:": [[287, "examples-using-load-degradation"]], "Examples using load_url_image:": [[289, "examples-using-load-url-image"]], "Examples using optim_builder:": [[148, "examples-using-optim-builder"]], "Examples using plot:": [[291, "examples-using-plot"]], "Examples using plot_curves:": [[292, "examples-using-plot-curves"]], "Examples using plot_inset:": [[293, "examples-using-plot-inset"]], "Examples using plot_ortho3D:": [[294, "examples-using-plot-ortho3d"]], "Examples using plot_parameters:": [[295, "examples-using-plot-parameters"]], "Examples using plot_videos:": [[296, "examples-using-plot-videos"]], "Examples using spectral_methods:": [[161, "examples-using-spectral-methods"]], "Examples using test:": [[256, "examples-using-test"]], "Examples using train:": [[257, "examples-using-train"]], "Examples using unfolded_builder:": [[275, "examples-using-unfolded-builder"]], "Expected Patch Log Likelihood (EPLL) for Denoising and Inpainting": [[330, null]], "Exploring the total variation prior.": [[326, "exploring-the-total-variation-prior"]], "Exploring the wavelet prior.": [[327, "exploring-the-wavelet-prior"]], "Extension to multiple wavelet bases.": [[325, "extension-to-multiple-wavelet-bases"]], "FISTAIteration": [[152, null]], "FMD": [[15, null]], "FNEJacobianSpectralNorm": [[34, null]], "FastMRISliceDataset": [[16, null]], "Finding Help": [[370, null]], "FixedPoint": [[122, null]], "Flickr2kHR": [[17, null]], "Full Reference Metrics": [[3, "full-reference-metrics"], [393, "full-reference-metrics"], [393, "id3"]], "Functional": [[6, "functional"], [378, null]], "Functional Routines Overview": [[378, "id1"]], "Future events": [[368, "future-events"]], "GDIteration": [[153, null]], "GSDRUNet": [[91, null]], "GammaNoise": [[178, null]], "GaussianMaskGenerator": [[236, null]], "GaussianMixtureModel": [[162, null]], "GaussianNoise": [[179, null]], "GaussianSplittingMaskGenerator": [[237, null]], "General setup": [[314, "general-setup"], [317, "general-setup"]], "Generate a dataset of blurred images": [[307, "generate-a-dataset-of-blurred-images"]], "Generate a dataset of blurred images and load it.": [[326, "generate-a-dataset-of-blurred-images-and-load-it"], [334, "generate-a-dataset-of-blurred-images-and-load-it"]], "Generate a dataset of compressed measurements and load it.": [[361, "generate-a-dataset-of-compressed-measurements-and-load-it"], [362, "generate-a-dataset-of-compressed-measurements-and-load-it"]], "Generate a dataset of degraded images and load it.": [[308, "generate-a-dataset-of-degraded-images-and-load-it"]], "Generate a dataset of knee images and load it.": [[350, "generate-a-dataset-of-knee-images-and-load-it"]], "Generate a dataset of low resolution images and load it.": [[360, "generate-a-dataset-of-low-resolution-images-and-load-it"], [365, "generate-a-dataset-of-low-resolution-images-and-load-it"]], "Generate a dataset of noisy images": [[352, "generate-a-dataset-of-noisy-images"], [353, "generate-a-dataset-of-noisy-images"], [355, "generate-a-dataset-of-noisy-images"], [356, "generate-a-dataset-of-noisy-images"]], "Generate a dataset of subsampled images and load it.": [[351, "generate-a-dataset-of-subsampled-images-and-load-it"]], "Generate an inpainting problem": [[327, "generate-an-inpainting-problem"]], "Generate an inverse problem": [[343, "generate-an-inverse-problem"]], "Generate and visualize probe and measurements": [[317, "generate-and-visualize-probe-and-measurements"]], "Generate dataset": [[303, "generate-dataset"]], "Generate the measurement": [[309, "generate-the-measurement"], [341, "generate-the-measurement"], [342, "generate-the-measurement"], [345, "generate-the-measurement"]], "Generate toy image": [[315, "generate-toy-image"]], "Generate toy signal and measurement": [[311, "generate-toy-signal-and-measurement"]], "Generating Datasets": [[1, "generating-datasets"], [391, "generating-datasets"]], "Generator Mixture": [[306, "generator-mixture"]], "GeneratorLoss": [[57, null]], "GeneratorMixture": [[238, null]], "Generators": [[6, "generators"]], "Gradient descent for phase retrieval": [[317, "gradient-descent-for-phase-retrieval"]], "Groundtruth image": [[300, "groundtruth-image"]], "HDF5Dataset": [[18, null]], "HQSIteration": [[154, null]], "Haze": [[180, null]], "Homography": [[261, null]], "How to Contribute": [[369, null]], "HyperSpectralUnmixing": [[181, null]], "ICNN": [[92, null]], "IRadon": [[215, null]], "Image Datasets": [[1, "image-datasets"]], "Image deblurring with Total-Variation (TV) prior": [[326, null]], "Image deblurring with custom deep explicit prior.": [[307, null]], "Image inpainting with wavelet prior": [[327, null]], "Image reconstruction with a diffusion model": [[342, null]], "Image transformations for Equivariant Imaging": [[349, null]], "Image transforms for equivariance & augmentations": [[321, null]], "Imaging inverse problems with adversarial networks": [[303, null]], "Implementing DPS": [[344, null]], "Implementing DiffPIR": [[343, null]], "Implementing an Algorithm": [[385, "implementing-an-algorithm"]], "Import required packages": [[300, "import-required-packages"]], "IndicatorL2": [[123, null]], "IndicatorL2Distance": [[124, null]], "Inpainting": [[182, null], [316, "inpainting"], [330, "inpainting"]], "Installing dependencies": [[344, "installing-dependencies"]], "InterleavedEpochLossScheduler": [[35, null]], "InterleavedLossScheduler": [[36, null]], "Introduction": [[379, null], [384, null], [392, "introduction"], [393, "introduction"]], "Iterating the Dykstra-like algorithm.": [[325, "iterating-the-dykstra-like-algorithm"]], "Iterative Reconstruction (PnP, RED, etc.)": [[385, null]], "Iterators": [[5, "iterators"], [386, "iterators"]], "JacobianSpectralNorm": [[37, null]], "Kohler": [[19, null]], "L1": [[125, null]], "L12Prior": [[126, null]], "L1Distance": [[127, null]], "L1L2": [[64, null]], "L1Prior": [[128, null]], "L2": [[129, null]], "L2Distance": [[130, null]], "LPIPS": [[65, null]], "Learned Iterative Soft-Thresholding Algorithm (LISTA) for compressed sensing": [[361, null]], "Learned Primal-Dual algorithm for CT scan.": [[363, null]], "Learned iterative custom prior": [[362, null]], "LidcIdriSliceDataset": [[20, null]], "Linear operators": [[379, "linear-operators"]], "LinearPhysics": [[183, null]], "List of mathematical symbols": [[375, "id1"]], "Load base image datasets": [[308, "load-base-image-datasets"], [352, "load-base-image-datasets"], [353, "load-base-image-datasets"], [355, "load-base-image-datasets"], [356, "load-base-image-datasets"]], "Load base image datasets and degradation operators.": [[307, "load-base-image-datasets-and-degradation-operators"], [320, "load-base-image-datasets-and-degradation-operators"], [326, "load-base-image-datasets-and-degradation-operators"], [327, "load-base-image-datasets-and-degradation-operators"], [334, "load-base-image-datasets-and-degradation-operators"], [335, "load-base-image-datasets-and-degradation-operators"], [337, "load-base-image-datasets-and-degradation-operators"], [350, "load-base-image-datasets-and-degradation-operators"], [351, "load-base-image-datasets-and-degradation-operators"], [360, "load-base-image-datasets-and-degradation-operators"], [361, "load-base-image-datasets-and-degradation-operators"], [362, "load-base-image-datasets-and-degradation-operators"], [364, "load-base-image-datasets-and-degradation-operators"], [365, "load-base-image-datasets-and-degradation-operators"]], "Load base volume image and denoising operators.": [[325, "load-base-volume-image-and-denoising-operators"]], "Load data": [[348, "load-data"]], "Load degradation operator.": [[363, "load-degradation-operator"]], "Load example image from the internet": [[342, "load-example-image-from-the-internet"]], "Load image and parameters": [[338, "load-image-and-parameters"]], "Load image from the internet": [[309, "load-image-from-the-internet"], [314, "load-image-from-the-internet"], [316, "load-image-from-the-internet"], [317, "load-image-from-the-internet"], [341, "load-image-from-the-internet"], [345, "load-image-from-the-internet"]], "Load libraries": [[310, "load-libraries"]], "Load raw pan-sharpening measurements": [[318, "load-raw-pan-sharpening-measurements"]], "Load test image and model": [[330, "load-test-image-and-model"]], "Load training and test images": [[331, "load-training-and-test-images"]], "Loading the model": [[312, "loading-the-model"], [364, "loading-the-model"]], "LogPoissonLikelihood": [[131, null]], "LogPoissonLikelihoodDistance": [[132, null]], "LogPoissonNoise": [[184, null]], "Logging": [[11, "logging"], [376, "logging"]], "Logging functionality": [[376, "id6"]], "Loss": [[38, null]], "Loss schedulers": [[2, "loss-schedulers"], [392, "loss-schedulers"]], "LpNorm": [[66, null]], "LsdirHR": [[21, null]], "MAE": [[67, null]], "MCLoss": [[39, null]], "MCMC methods": [[387, "id3"]], "MDIteration": [[155, null]], "MOEILoss": [[40, null]], "MOILoss": [[41, null]], "MRI": [[185, null], [316, "mri"]], "MRIMixin": [[186, null]], "MSE": [[68, null]], "Markov Chain Monte Carlo": [[387, "markov-chain-monte-carlo"]], "Markov Chain Monte Carlo Langevin": [[7, "markov-chain-monte-carlo-langevin"]], "Math Notation": [[375, null]], "Measurements generation": [[314, "measurements-generation"]], "MedianFilter": [[93, null]], "Metric": [[69, null]], "Metrics": [[393, null]], "MonteCarlo": [[253, null]], "Motion blur generators": [[306, "motion-blur-generators"]], "MotionBlurGenerator": [[239, null]], "MultiCoilMRI": [[187, null]], "NBUDataset": [[22, null]], "NIQE": [[70, null]], "NMSE": [[71, null]], "Natural weighting and Briggs weighting": [[300, "natural-weighting-and-briggs-weighting"]], "NegEntropy": [[133, null]], "Neighbor2Neighbor": [[42, null]], "Network Regularization": [[2, "network-regularization"], [392, "network-regularization"]], "Network Regularization Losses Overview": [[392, "id4"]], "No Reference Metrics": [[3, "no-reference-metrics"], [393, "no-reference-metrics"], [393, "id4"]], "Noise Distributions and Their Probability Distributions": [[380, "id2"]], "Noise distributions": [[6, "noise-distributions"], [380, "noise-distributions"]], "NoiseModel": [[188, null]], "Non-Learned Denoisers Overview": [[383, "id3"]], "Operators": [[6, "operators"], [374, "operators"], [380, "operators"]], "Operators & Noise": [[380, null]], "Operators, Definitions, and Generators": [[380, "id1"]], "OptimIterator": [[134, null]], "Optimization": [[324, "optimization"], [328, null], [386, null]], "Other": [[11, "other"], [376, "other"]], "Other Datasets": [[1, "other-datasets"]], "Other self-supervised losses": [[392, "id3"]], "Overall comparison": [[314, "overall-comparison"]], "PDNet_DualBlock": [[94, null]], "PDNet_PrimalBlock": [[95, null]], "PGDIteration": [[156, null]], "PSFGenerator": [[240, null]], "PSNR": [[72, null]], "Pan-sharpening": [[316, "pan-sharpening"]], "PanNet": [[96, null]], "PanTiltRotate": [[270, null]], "Pansharpen": [[189, null]], "Parameter-dependent operators": [[379, "parameter-dependent-operators"]], "Parameters": [[386, "parameters"]], "Past events": [[368, "past-events"]], "Patch Priors": [[324, "patch-priors"], [332, null]], "Patch priors for limited-angle computed tomography": [[331, null]], "PatchDataset": [[23, null]], "PatchGANDiscriminator": [[97, null]], "PatchNR": [[135, null]], "PatchPrior": [[136, null]], "Phase correction and signal reconstruction": [[314, "phase-correction-and-signal-reconstruction"], [314, "id1"], [314, "id2"], [314, "id3"]], "Phase2PhaseLoss": [[43, null]], "Phase2PhaseSplittingMaskGenerator": [[241, null]], "PhaseRetrieval": [[190, null]], "Physics": [[191, null]], "Physics Generators": [[379, "physics-generators"]], "PhysicsGenerator": [[242, null]], "PlaceholderDataset": [[28, null]], "Plotting": [[11, "plotting"], [376, "plotting"]], "Plotting the learned parameters.": [[361, "plotting-the-learned-parameters"]], "Plotting the weights of the network.": [[362, "plotting-the-weights-of-the-network"], [365, "plotting-the-weights-of-the-network"]], "Plug-and-Play": [[324, "plug-and-play"], [339, null]], "Plug-and-Play algorithm with Mirror Descent for Poisson noise inverse problems.": [[336, null]], "PnP": [[137, null]], "PnP with custom optimization algorithm (Condat-Vu Primal-Dual)": [[335, null]], "PoissonGaussianNoise": [[192, null]], "PoissonLikelihood": [[138, null]], "PoissonLikelihoodDistance": [[139, null]], "PoissonNoise": [[193, null]], "Potential": [[140, null]], "Potentials": [[5, "potentials"], [386, "potentials"]], "Predefined Algorithms": [[386, "predefined-algorithms"]], "Predefined Datasets": [[391, "predefined-datasets"]], "Predefined Iterative Algorithms": [[385, "predefined-iterative-algorithms"]], "Predefined methods": [[385, "id1"]], "Predefined models": [[5, "predefined-models"]], "Prep loss": [[348, "prep-loss"]], "Prepare data": [[354, "prepare-data"]], "Prepare phase input": [[317, "prepare-phase-input"]], "Pretrained Weights": [[390, null]], "Prior": [[141, null]], "Priors": [[5, "priors"], [386, "priors"]], "Priors Overview": [[386, "id8"]], "ProductConvolutionBlurGenerator": [[243, null]], "ProgressMeter": [[277, null]], "Ptychography": [[194, null]], "Ptychography phase retrieval": [[317, null]], "PtychographyLinearOperator": [[195, null]], "Putting it all together: the DiffPIR algorithm": [[343, "putting-it-all-together-the-diffpir-algorithm"]], "QNR": [[73, null]], "Quickstart": [[372, null]], "R2RLoss": [[44, null]], "RED": [[142, null]], "Radio interferometric imaging with deepinverse": [[300, null]], "RadioInterferometry": [[196, null]], "Radon": [[216, null]], "Random phase retrieval and reconstruction methods.": [[314, null]], "RandomLossScheduler": [[45, null]], "RandomMaskGenerator": [[244, null]], "RandomPhaseRetrieval": [[197, null]], "Reconstructing an image using the deep image prior.": [[309, null]], "Reconstruction": [[374, "reconstruction"]], "Reconstruction loop": [[331, "reconstruction-loop"]], "Reconstruction methods": [[384, "id1"]], "Reconstruction with gradient descent and PnP denoisers": [[314, "reconstruction-with-gradient-descent-and-pnp-denoisers"]], "Reconstruction with gradient descent and random initialization": [[314, "reconstruction-with-gradient-descent-and-random-initialization"]], "Reconstruction with gradient descent and spectral methods initialization": [[314, "reconstruction-with-gradient-descent-and-spectral-methods-initialization"]], "Reconstruction with spectral methods": [[314, "reconstruction-with-spectral-methods"]], "Reconstructor": [[98, null]], "Reflect": [[262, null]], "Regularization by Denoising (RED) for Super-Resolution.": [[337, null]], "Remote sensing with satellite images": [[318, null]], "Rescale": [[29, null]], "Restormer": [[99, null]], "Rotate": [[263, null]], "Run DIP algorithm and plot results": [[309, "run-dip-algorithm-and-plot-results"]], "Run and plot": [[331, "run-and-plot"]], "Run sampling algorithm and plot results": [[342, "run-sampling-algorithm-and-plot-results"], [345, "run-sampling-algorithm-and-plot-results"]], "Run sampling algorithms and plot results": [[341, "run-sampling-algorithms-and-plot-results"]], "Run the diffusion algorithm and plot results": [[342, "run-the-diffusion-algorithm-and-plot-results"]], "SCUNet": [[100, null]], "SKRock": [[254, null]], "SMIteration": [[157, null]], "SSIM": [[74, null]], "Sampling": [[324, "sampling"], [346, null]], "Sampling pattern": [[300, "sampling-pattern"]], "Sampling step": [[343, "sampling-step"]], "Saving and loading models": [[312, null]], "Saving the model": [[312, "saving-the-model"], [364, "saving-the-model"]], "Scale": [[264, null]], "Schedulers Overview": [[392, "id6"]], "ScoreLoss": [[46, null]], "ScorePrior": [[143, null]], "Self-Supervised Learning": [[2, "self-supervised-learning"], [324, "self-supervised-learning"], [357, null], [392, "self-supervised-learning"]], "Self-supervised MRI reconstruction with Artifact2Artifact": [[348, null]], "Self-supervised denoising with the Generalized R2R loss.": [[353, null]], "Self-supervised denoising with the Neighbor2Neighbor loss.": [[352, null]], "Self-supervised denoising with the SURE loss.": [[355, null]], "Self-supervised denoising with the UNSURE loss.": [[356, null]], "Self-supervised learning from incomplete measurements of multiple operators.": [[351, null]], "Self-supervised learning with Equivariant Imaging for MRI.": [[350, null]], "Self-supervised learning with measurement splitting": [[354, null]], "SequentialMRI": [[198, null]], "Set parameters for EPLL and PatchNR": [[331, "set-parameters-for-epll-and-patchnr"]], "Set the forward operator": [[335, "set-the-forward-operator"], [338, "set-the-forward-operator"]], "Set up ptychography physics model": [[317, "set-up-ptychography-physics-model"]], "Set up the DPIR algorithm to solve the inverse problem.": [[334, "set-up-the-dpir-algorithm-to-solve-the-inverse-problem"]], "Set up the PnP algorithm to solve the inverse problem.": [[335, "set-up-the-pnp-algorithm-to-solve-the-inverse-problem"], [338, "set-up-the-pnp-algorithm-to-solve-the-inverse-problem"]], "Set up the denoiser network": [[352, "set-up-the-denoiser-network"], [353, "set-up-the-denoiser-network"], [355, "set-up-the-denoiser-network"], [356, "set-up-the-denoiser-network"]], "Set up the optimization algorithm to solve the inverse problem.": [[307, "set-up-the-optimization-algorithm-to-solve-the-inverse-problem"], [326, "set-up-the-optimization-algorithm-to-solve-the-inverse-problem"], [327, "set-up-the-optimization-algorithm-to-solve-the-inverse-problem"]], "Set up the reconstruction network": [[320, "set-up-the-reconstruction-network"], [350, "set-up-the-reconstruction-network"], [351, "set-up-the-reconstruction-network"], [364, "set-up-the-reconstruction-network"]], "Set up the training parameters": [[350, "set-up-the-training-parameters"], [351, "set-up-the-training-parameters"], [352, "set-up-the-training-parameters"], [353, "set-up-the-training-parameters"], [355, "set-up-the-training-parameters"], [356, "set-up-the-training-parameters"]], "Set14HR": [[24, null]], "Setting the noise and regularization schedules": [[343, "setting-the-noise-and-regularization-schedules"]], "Setup paths for data loading and results": [[312, "setup-paths-for-data-loading-and-results"]], "Setup paths for data loading and results.": [[307, "setup-paths-for-data-loading-and-results"], [308, "setup-paths-for-data-loading-and-results"], [320, "setup-paths-for-data-loading-and-results"], [325, "setup-paths-for-data-loading-and-results"], [326, "setup-paths-for-data-loading-and-results"], [327, "setup-paths-for-data-loading-and-results"], [334, "setup-paths-for-data-loading-and-results"], [335, "setup-paths-for-data-loading-and-results"], [336, "setup-paths-for-data-loading-and-results"], [337, "setup-paths-for-data-loading-and-results"], [338, "setup-paths-for-data-loading-and-results"], [350, "setup-paths-for-data-loading-and-results"], [351, "setup-paths-for-data-loading-and-results"], [352, "setup-paths-for-data-loading-and-results"], [353, "setup-paths-for-data-loading-and-results"], [355, "setup-paths-for-data-loading-and-results"], [356, "setup-paths-for-data-loading-and-results"], [360, "setup-paths-for-data-loading-and-results"], [361, "setup-paths-for-data-loading-and-results"], [362, "setup-paths-for-data-loading-and-results"], [363, "setup-paths-for-data-loading-and-results"], [364, "setup-paths-for-data-loading-and-results"], [365, "setup-paths-for-data-loading-and-results"]], "Setup the PnP algorithm. This involves in particular the definition of a custom prior class.": [[337, "setup-the-pnp-algorithm-this-involves-in-particular-the-definition-of-a-custom-prior-class"]], "Shift": [[265, null]], "ShiftTime": [[266, null]], "Shuffle data with buffer shuffling": [[310, "shuffle-data-with-buffer-shuffling"]], "SigmaGenerator": [[245, null]], "Signal construction": [[314, "signal-construction"]], "Similarity": [[271, null]], "Simple Transformations": [[396, "id1"]], "Simple transforms": [[9, "simple-transforms"], [396, "simple-transforms"]], "SimpleFastMRISliceDataset": [[25, null]], "Simulate remote-sensing measurements": [[318, "simulate-remote-sensing-measurements"]], "Simulating the measurements": [[300, "simulating-the-measurements"]], "Single photon lidar operator for depth ranging.": [[311, null]], "Single-Pixel Camera": [[316, "single-pixel-camera"]], "SinglePhotonLidar": [[199, null]], "SinglePixelCamera": [[200, null]], "Solving pan-sharpening with neural networks": [[318, "solving-pan-sharpening-with-neural-networks"]], "Solving the problem with a wavelet prior": [[300, "solving-the-problem-with-a-wavelet-prior"]], "Space varying blurs": [[306, "space-varying-blurs"]], "SpaceVaryingBlur": [[201, null]], "Specific Networks": [[388, null]], "Specific architectures": [[388, "id1"]], "SpectralAngleMapper": [[75, null]], "SplittingLoss": [[47, null]], "StackedLinearPhysics": [[202, null]], "StackedPhysics": [[203, null]], "StackedPhysicsDataFidelity": [[144, null]], "StackedPhysicsLoss": [[48, null]], "StepLossScheduler": [[49, null]], "Stream data from Internet": [[310, "stream-data-from-internet"]], "StructuredRandom": [[204, null]], "StructuredRandomPhaseRetrieval": [[205, null]], "Summary of pretrained weights": [[390, "id3"]], "SupAdversarialDiscriminatorLoss": [[58, null]], "SupAdversarialGeneratorLoss": [[59, null]], "SupLoss": [[50, null]], "Super-Resolution": [[316, "super-resolution"]], "Supervised Learning": [[2, "supervised-learning"], [392, "supervised-learning"]], "SureGaussianLoss": [[51, null]], "SurePGLoss": [[52, null]], "SurePoissonLoss": [[53, null]], "SwinIR": [[101, null]], "TGVDenoiser": [[102, null]], "TVDenoiser": [[103, null]], "TVLoss": [[54, null]], "TVPrior": [[145, null]], "TensorList": [[11, "tensorlist"], [376, "tensorlist"]], "Test the model": [[348, "test-the-model"]], "Test the network": [[320, "test-the-network"], [350, "test-the-network"], [351, "test-the-network"], [352, "test-the-network"], [353, "test-the-network"], [355, "test-the-network"], [356, "test-the-network"], [360, "test-the-network"], [363, "test-the-network"], [364, "test-the-network"], [365, "test-the-network"]], "Test the network.": [[361, "test-the-network"], [362, "test-the-network"]], "The DPS algorithm": [[344, "the-dps-algorithm"]], "The DiffPIR algorithm": [[343, "the-diffpir-algorithm"]], "The RI measurement operator": [[300, "the-ri-measurement-operator"]], "Tikhonov": [[146, null]], "Time Transforms": [[396, "id3"]], "TimeAgnosticNet": [[104, null]], "TimeAveragingNet": [[105, null]], "TimeMixin": [[206, null]], "ToComplex": [[30, null]], "Tomography": [[207, null]], "Tour of MRI functionality in DeepInverse": [[319, null]], "Train and test network": [[354, "train-and-test-network"]], "Train model": [[348, "train-model"]], "Train the model": [[320, "train-the-model"], [364, "train-the-model"]], "Train the network": [[350, "train-the-network"], [351, "train-the-network"], [352, "train-the-network"], [353, "train-the-network"], [355, "train-the-network"], [356, "train-the-network"], [360, "train-the-network"], [363, "train-the-network"], [365, "train-the-network"]], "Train the network.": [[361, "train-the-network"], [362, "train-the-network"]], "Trainer": [[12, null], [395, null]], "Training / EM algorithm": [[331, "training-em-algorithm"]], "Training Losses": [[392, null]], "Training a reconstruction network.": [[320, null]], "Training dataset of random phantoms.": [[363, "training-dataset-of-random-phantoms"]], "Training, Testing and Utilities": [[374, "training-testing-and-utilities"]], "Transform": [[267, null]], "Transforms": [[396, null]], "UAIR training": [[303, "uair-training"]], "UAIRGeneratorLoss": [[60, null]], "ULA": [[255, null]], "UNet": [[106, null]], "Uncertainty quantification with PnP-ULA.": [[345, null]], "Unconditional GAN": [[381, "unconditional-gan"]], "Unconditional GANs": [[381, "id3"]], "Unfolded": [[10, "unfolded"], [324, "unfolded"], [366, null], [389, "id1"]], "Unfolded Algorithms": [[389, null]], "Unfolded Chambolle-Pock for constrained image inpainting": [[364, null]], "UniformGaussianNoise": [[208, null]], "UniformNoise": [[209, null]], "UnsupAdversarialDiscriminatorLoss": [[61, null]], "UnsupAdversarialGeneratorLoss": [[62, null]], "Urban100HR": [[26, null]], "User Guide": [[374, null]], "Using DPS in your inverse problem": [[344, "using-dps-in-your-inverse-problem"]], "Using Multiple GPUs": [[394, null]], "Using huggingface dataset": [[310, null]], "Using the DiffPIR algorithm in your inverse problem": [[343, "using-the-diffpir-algorithm-in-your-inverse-problem"]], "Using the Dykstra-like algorithm for wavelet denoising.": [[325, "using-the-dykstra-like-algorithm-for-wavelet-denoising"]], "Utility Functions and Descriptions": [[376, "id5"]], "Utility and demo Functions": [[376, "id7"]], "Utils": [[5, "utils"], [376, null], [386, "utils"]], "Vanilla PnP for computed tomography (CT).": [[338, null]], "Vanilla Unfolded algorithm for super-resolution": [[365, null]], "VarNet": [[107, null]], "Verifying our linear operator": [[315, "verifying-our-linear-operator"]], "Video transforms": [[9, "video-transforms"], [396, "video-transforms"]], "Visualization": [[314, "visualization"]], "WaveletDenoiser": [[108, null]], "WaveletDictDenoiser": [[109, null]], "WaveletPrior": [[147, null]], "Widefield microscope PSF": [[313, "widefield-microscope-psf"]], "adjoint_function": [[210, null]], "bicgstab": [[163, null]], "bicubic_filter": [[211, null]], "bilinear_filter": [[212, null]], "build_probe": [[246, null]], "conjugate_gradient": [[164, null]], "conv2d": [[217, null]], "conv2d_fft": [[218, null]], "conv3d_fft": [[219, null]], "conv_transpose2d": [[220, null]], "conv_transpose2d_fft": [[221, null]], "conv_transpose3d_fft": [[222, null]], "correct_global_phase": [[160, null]], "deepinv.datasets": [[1, null]], "deepinv.loss": [[2, null]], "deepinv.metric": [[3, null]], "deepinv.models": [[4, null]], "deepinv.optim": [[5, null]], "deepinv.physics": [[6, null]], "deepinv.sampling": [[7, null]], "deepinv.training": [[8, null]], "deepinv.transform": [[9, null]], "deepinv.unfolded": [[10, null]], "deepinv.utils": [[11, null]], "deepinv.utils.TensorList": [[278, null]], "demo_mri_model": [[279, null]], "dirac_like": [[280, null]], "dst1": [[223, null]], "fStep": [[158, null]], "gStep": [[159, null]], "gaussian_blur": [[213, null]], "generate_dataset": [[27, null]], "generate_shifts": [[247, null]], "get_data_home": [[281, null]], "get_degradation_url": [[282, null]], "get_freer_gpu": [[283, null]], "get_image_url": [[284, null]], "get_timestamp": [[285, null]], "gradient_descent": [[165, null]], "histogram": [[224, null]], "histogramdd": [[225, null]], "least_squares": [[166, null]], "load_dataset": [[286, null]], "load_degradation": [[287, null]], "load_image": [[288, null]], "load_url_image": [[289, null]], "lsqr": [[167, null]], "multiplier": [[226, null]], "multiplier_adjoint": [[227, null]], "ones_like": [[290, null]], "optim_builder": [[148, null]], "plot": [[291, null]], "plot_curves": [[292, null]], "plot_inset": [[293, null]], "plot_ortho3D": [[294, null]], "plot_parameters": [[295, null]], "plot_videos": [[296, null]], "product_convolution2d": [[228, null]], "rand_like": [[297, null]], "randn_like": [[298, null]], "sinc_filter": [[214, null]], "spectral_methods": [[161, null]], "stack": [[248, null]], "test": [[256, null]], "to_complex_denoiser": [[110, null]], "train": [[257, null]], "unfolded_builder": [[275, null]], "zeros_like": [[299, null]]}, "docnames": ["API", "api/deepinv.datasets", "api/deepinv.loss", "api/deepinv.metric", "api/deepinv.models", "api/deepinv.optim", "api/deepinv.physics", "api/deepinv.sampling", "api/deepinv.training", "api/deepinv.transform", "api/deepinv.unfolded", "api/deepinv.utils", "api/stubs/deepinv.Trainer", "api/stubs/deepinv.datasets.CBSD68", "api/stubs/deepinv.datasets.DIV2K", "api/stubs/deepinv.datasets.FMD", "api/stubs/deepinv.datasets.FastMRISliceDataset", "api/stubs/deepinv.datasets.Flickr2kHR", "api/stubs/deepinv.datasets.HDF5Dataset", "api/stubs/deepinv.datasets.Kohler", "api/stubs/deepinv.datasets.LidcIdriSliceDataset", "api/stubs/deepinv.datasets.LsdirHR", "api/stubs/deepinv.datasets.NBUDataset", "api/stubs/deepinv.datasets.PatchDataset", "api/stubs/deepinv.datasets.Set14HR", "api/stubs/deepinv.datasets.SimpleFastMRISliceDataset", "api/stubs/deepinv.datasets.Urban100HR", "api/stubs/deepinv.datasets.generate_dataset", "api/stubs/deepinv.datasets.utils.PlaceholderDataset", "api/stubs/deepinv.datasets.utils.Rescale", "api/stubs/deepinv.datasets.utils.ToComplex", "api/stubs/deepinv.loss.Artifact2ArtifactLoss", "api/stubs/deepinv.loss.BaseLossScheduler", "api/stubs/deepinv.loss.EILoss", "api/stubs/deepinv.loss.FNEJacobianSpectralNorm", "api/stubs/deepinv.loss.InterleavedEpochLossScheduler", "api/stubs/deepinv.loss.InterleavedLossScheduler", "api/stubs/deepinv.loss.JacobianSpectralNorm", "api/stubs/deepinv.loss.Loss", "api/stubs/deepinv.loss.MCLoss", "api/stubs/deepinv.loss.MOEILoss", "api/stubs/deepinv.loss.MOILoss", "api/stubs/deepinv.loss.Neighbor2Neighbor", "api/stubs/deepinv.loss.Phase2PhaseLoss", "api/stubs/deepinv.loss.R2RLoss", "api/stubs/deepinv.loss.RandomLossScheduler", "api/stubs/deepinv.loss.ScoreLoss", "api/stubs/deepinv.loss.SplittingLoss", "api/stubs/deepinv.loss.StackedPhysicsLoss", "api/stubs/deepinv.loss.StepLossScheduler", "api/stubs/deepinv.loss.SupLoss", "api/stubs/deepinv.loss.SureGaussianLoss", "api/stubs/deepinv.loss.SurePGLoss", "api/stubs/deepinv.loss.SurePoissonLoss", "api/stubs/deepinv.loss.TVLoss", "api/stubs/deepinv.loss.adversarial.DiscriminatorLoss", "api/stubs/deepinv.loss.adversarial.DiscriminatorMetric", "api/stubs/deepinv.loss.adversarial.GeneratorLoss", "api/stubs/deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss", "api/stubs/deepinv.loss.adversarial.SupAdversarialGeneratorLoss", "api/stubs/deepinv.loss.adversarial.UAIRGeneratorLoss", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss", "api/stubs/deepinv.loss.metric.ERGAS", "api/stubs/deepinv.loss.metric.L1L2", "api/stubs/deepinv.loss.metric.LPIPS", "api/stubs/deepinv.loss.metric.LpNorm", "api/stubs/deepinv.loss.metric.MAE", "api/stubs/deepinv.loss.metric.MSE", "api/stubs/deepinv.loss.metric.Metric", "api/stubs/deepinv.loss.metric.NIQE", "api/stubs/deepinv.loss.metric.NMSE", "api/stubs/deepinv.loss.metric.PSNR", "api/stubs/deepinv.loss.metric.QNR", "api/stubs/deepinv.loss.metric.SSIM", "api/stubs/deepinv.loss.metric.SpectralAngleMapper", "api/stubs/deepinv.models.ArtifactRemoval", "api/stubs/deepinv.models.AutoEncoder", "api/stubs/deepinv.models.BM3D", "api/stubs/deepinv.models.CSGMGenerator", "api/stubs/deepinv.models.ConvDecoder", "api/stubs/deepinv.models.DCGANDiscriminator", "api/stubs/deepinv.models.DCGANGenerator", "api/stubs/deepinv.models.DRUNet", "api/stubs/deepinv.models.DeepImagePrior", "api/stubs/deepinv.models.Denoiser", "api/stubs/deepinv.models.DiffUNet", "api/stubs/deepinv.models.DnCNN", "api/stubs/deepinv.models.EPLLDenoiser", "api/stubs/deepinv.models.ESRGANDiscriminator", "api/stubs/deepinv.models.EquivariantDenoiser", "api/stubs/deepinv.models.GSDRUNet", "api/stubs/deepinv.models.ICNN", "api/stubs/deepinv.models.MedianFilter", "api/stubs/deepinv.models.PDNet_DualBlock", "api/stubs/deepinv.models.PDNet_PrimalBlock", "api/stubs/deepinv.models.PanNet", "api/stubs/deepinv.models.PatchGANDiscriminator", "api/stubs/deepinv.models.Reconstructor", "api/stubs/deepinv.models.Restormer", "api/stubs/deepinv.models.SCUNet", "api/stubs/deepinv.models.SwinIR", "api/stubs/deepinv.models.TGVDenoiser", "api/stubs/deepinv.models.TVDenoiser", "api/stubs/deepinv.models.TimeAgnosticNet", "api/stubs/deepinv.models.TimeAveragingNet", "api/stubs/deepinv.models.UNet", "api/stubs/deepinv.models.VarNet", "api/stubs/deepinv.models.WaveletDenoiser", "api/stubs/deepinv.models.WaveletDictDenoiser", "api/stubs/deepinv.models.complex.to_complex_denoiser", "api/stubs/deepinv.optim.AmplitudeLoss", "api/stubs/deepinv.optim.AmplitudeLossDistance", "api/stubs/deepinv.optim.BaseOptim", "api/stubs/deepinv.optim.Bregman", "api/stubs/deepinv.optim.BregmanL2", "api/stubs/deepinv.optim.Bregman_ICNN", "api/stubs/deepinv.optim.BurgEntropy", "api/stubs/deepinv.optim.DPIR", "api/stubs/deepinv.optim.DataFidelity", "api/stubs/deepinv.optim.Distance", "api/stubs/deepinv.optim.EPLL", "api/stubs/deepinv.optim.FixedPoint", "api/stubs/deepinv.optim.IndicatorL2", "api/stubs/deepinv.optim.IndicatorL2Distance", "api/stubs/deepinv.optim.L1", "api/stubs/deepinv.optim.L12Prior", "api/stubs/deepinv.optim.L1Distance", "api/stubs/deepinv.optim.L1Prior", "api/stubs/deepinv.optim.L2", "api/stubs/deepinv.optim.L2Distance", "api/stubs/deepinv.optim.LogPoissonLikelihood", "api/stubs/deepinv.optim.LogPoissonLikelihoodDistance", "api/stubs/deepinv.optim.NegEntropy", "api/stubs/deepinv.optim.OptimIterator", "api/stubs/deepinv.optim.PatchNR", "api/stubs/deepinv.optim.PatchPrior", "api/stubs/deepinv.optim.PnP", "api/stubs/deepinv.optim.PoissonLikelihood", "api/stubs/deepinv.optim.PoissonLikelihoodDistance", "api/stubs/deepinv.optim.Potential", "api/stubs/deepinv.optim.Prior", "api/stubs/deepinv.optim.RED", "api/stubs/deepinv.optim.ScorePrior", "api/stubs/deepinv.optim.StackedPhysicsDataFidelity", "api/stubs/deepinv.optim.TVPrior", "api/stubs/deepinv.optim.Tikhonov", "api/stubs/deepinv.optim.WaveletPrior", "api/stubs/deepinv.optim.optim_builder", "api/stubs/deepinv.optim.optim_iterators.ADMMIteration", "api/stubs/deepinv.optim.optim_iterators.CPIteration", "api/stubs/deepinv.optim.optim_iterators.DRSIteration", "api/stubs/deepinv.optim.optim_iterators.FISTAIteration", "api/stubs/deepinv.optim.optim_iterators.GDIteration", "api/stubs/deepinv.optim.optim_iterators.HQSIteration", "api/stubs/deepinv.optim.optim_iterators.MDIteration", "api/stubs/deepinv.optim.optim_iterators.PGDIteration", "api/stubs/deepinv.optim.optim_iterators.SMIteration", "api/stubs/deepinv.optim.optim_iterators.fStep", "api/stubs/deepinv.optim.optim_iterators.gStep", "api/stubs/deepinv.optim.phase_retrieval.correct_global_phase", "api/stubs/deepinv.optim.phase_retrieval.spectral_methods", "api/stubs/deepinv.optim.utils.GaussianMixtureModel", "api/stubs/deepinv.optim.utils.bicgstab", "api/stubs/deepinv.optim.utils.conjugate_gradient", "api/stubs/deepinv.optim.utils.gradient_descent", "api/stubs/deepinv.optim.utils.least_squares", "api/stubs/deepinv.optim.utils.lsqr", "api/stubs/deepinv.physics.Blur", "api/stubs/deepinv.physics.BlurFFT", "api/stubs/deepinv.physics.CompressedSensing", "api/stubs/deepinv.physics.CompressiveSpectralImaging", "api/stubs/deepinv.physics.Decolorize", "api/stubs/deepinv.physics.DecomposablePhysics", "api/stubs/deepinv.physics.Demosaicing", "api/stubs/deepinv.physics.Denoising", "api/stubs/deepinv.physics.Downsampling", "api/stubs/deepinv.physics.DynamicMRI", "api/stubs/deepinv.physics.GammaNoise", "api/stubs/deepinv.physics.GaussianNoise", "api/stubs/deepinv.physics.Haze", "api/stubs/deepinv.physics.HyperSpectralUnmixing", "api/stubs/deepinv.physics.Inpainting", "api/stubs/deepinv.physics.LinearPhysics", "api/stubs/deepinv.physics.LogPoissonNoise", "api/stubs/deepinv.physics.MRI", "api/stubs/deepinv.physics.MRIMixin", "api/stubs/deepinv.physics.MultiCoilMRI", "api/stubs/deepinv.physics.NoiseModel", "api/stubs/deepinv.physics.Pansharpen", "api/stubs/deepinv.physics.PhaseRetrieval", "api/stubs/deepinv.physics.Physics", "api/stubs/deepinv.physics.PoissonGaussianNoise", "api/stubs/deepinv.physics.PoissonNoise", "api/stubs/deepinv.physics.Ptychography", "api/stubs/deepinv.physics.PtychographyLinearOperator", "api/stubs/deepinv.physics.RadioInterferometry", "api/stubs/deepinv.physics.RandomPhaseRetrieval", "api/stubs/deepinv.physics.SequentialMRI", "api/stubs/deepinv.physics.SinglePhotonLidar", "api/stubs/deepinv.physics.SinglePixelCamera", "api/stubs/deepinv.physics.SpaceVaryingBlur", "api/stubs/deepinv.physics.StackedLinearPhysics", "api/stubs/deepinv.physics.StackedPhysics", "api/stubs/deepinv.physics.StructuredRandom", "api/stubs/deepinv.physics.StructuredRandomPhaseRetrieval", "api/stubs/deepinv.physics.TimeMixin", "api/stubs/deepinv.physics.Tomography", "api/stubs/deepinv.physics.UniformGaussianNoise", "api/stubs/deepinv.physics.UniformNoise", "api/stubs/deepinv.physics.adjoint_function", "api/stubs/deepinv.physics.blur.bicubic_filter", "api/stubs/deepinv.physics.blur.bilinear_filter", "api/stubs/deepinv.physics.blur.gaussian_blur", "api/stubs/deepinv.physics.blur.sinc_filter", "api/stubs/deepinv.physics.functional.IRadon", "api/stubs/deepinv.physics.functional.Radon", "api/stubs/deepinv.physics.functional.conv2d", "api/stubs/deepinv.physics.functional.conv2d_fft", "api/stubs/deepinv.physics.functional.conv3d_fft", "api/stubs/deepinv.physics.functional.conv_transpose2d", "api/stubs/deepinv.physics.functional.conv_transpose2d_fft", "api/stubs/deepinv.physics.functional.conv_transpose3d_fft", "api/stubs/deepinv.physics.functional.dst1", "api/stubs/deepinv.physics.functional.histogram", "api/stubs/deepinv.physics.functional.histogramdd", "api/stubs/deepinv.physics.functional.multiplier", "api/stubs/deepinv.physics.functional.multiplier_adjoint", "api/stubs/deepinv.physics.functional.product_convolution2d", "api/stubs/deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.BaseMaskGenerator", "api/stubs/deepinv.physics.generator.BernoulliSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.ConfocalBlurGenerator3D", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator3D", "api/stubs/deepinv.physics.generator.EquispacedMaskGenerator", "api/stubs/deepinv.physics.generator.GaussianMaskGenerator", "api/stubs/deepinv.physics.generator.GaussianSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.GeneratorMixture", "api/stubs/deepinv.physics.generator.MotionBlurGenerator", "api/stubs/deepinv.physics.generator.PSFGenerator", "api/stubs/deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.PhysicsGenerator", "api/stubs/deepinv.physics.generator.ProductConvolutionBlurGenerator", "api/stubs/deepinv.physics.generator.RandomMaskGenerator", "api/stubs/deepinv.physics.generator.SigmaGenerator", "api/stubs/deepinv.physics.phase_retrieval.build_probe", "api/stubs/deepinv.physics.phase_retrieval.generate_shifts", "api/stubs/deepinv.physics.stack", "api/stubs/deepinv.sampling.DDRM", "api/stubs/deepinv.sampling.DPS", "api/stubs/deepinv.sampling.DiffPIR", "api/stubs/deepinv.sampling.DiffusionSampler", "api/stubs/deepinv.sampling.MonteCarlo", "api/stubs/deepinv.sampling.SKRock", "api/stubs/deepinv.sampling.ULA", "api/stubs/deepinv.test", "api/stubs/deepinv.train", "api/stubs/deepinv.training.AdversarialOptimizer", "api/stubs/deepinv.training.AdversarialTrainer", "api/stubs/deepinv.transform.CPABDiffeomorphism", "api/stubs/deepinv.transform.Homography", "api/stubs/deepinv.transform.Reflect", "api/stubs/deepinv.transform.Rotate", "api/stubs/deepinv.transform.Scale", "api/stubs/deepinv.transform.Shift", "api/stubs/deepinv.transform.ShiftTime", "api/stubs/deepinv.transform.Transform", "api/stubs/deepinv.transform.projective.Affine", "api/stubs/deepinv.transform.projective.Euclidean", "api/stubs/deepinv.transform.projective.PanTiltRotate", "api/stubs/deepinv.transform.projective.Similarity", "api/stubs/deepinv.unfolded.BaseDEQ", "api/stubs/deepinv.unfolded.BaseUnfold", "api/stubs/deepinv.unfolded.DEQ_builder", "api/stubs/deepinv.unfolded.unfolded_builder", "api/stubs/deepinv.utils.AverageMeter", "api/stubs/deepinv.utils.ProgressMeter", "api/stubs/deepinv.utils.TensorList", "api/stubs/deepinv.utils.demo.demo_mri_model", "api/stubs/deepinv.utils.dirac_like", "api/stubs/deepinv.utils.get_data_home", "api/stubs/deepinv.utils.get_degradation_url", "api/stubs/deepinv.utils.get_freer_gpu", "api/stubs/deepinv.utils.get_image_url", "api/stubs/deepinv.utils.get_timestamp", "api/stubs/deepinv.utils.load_dataset", "api/stubs/deepinv.utils.load_degradation", "api/stubs/deepinv.utils.load_image", "api/stubs/deepinv.utils.load_url_image", "api/stubs/deepinv.utils.ones_like", "api/stubs/deepinv.utils.plot", "api/stubs/deepinv.utils.plot_curves", "api/stubs/deepinv.utils.plot_inset", "api/stubs/deepinv.utils.plot_ortho3D", "api/stubs/deepinv.utils.plot_parameters", "api/stubs/deepinv.utils.plot_videos", "api/stubs/deepinv.utils.rand_like", "api/stubs/deepinv.utils.randn_like", "api/stubs/deepinv.utils.zeros_like", "auto_examples/advanced/demo_ri_basic", "auto_examples/advanced/index", "auto_examples/advanced/sg_execution_times", "auto_examples/adversarial-learning/demo_gan_imaging", "auto_examples/adversarial-learning/index", "auto_examples/adversarial-learning/sg_execution_times", "auto_examples/basics/demo_blur_tour", "auto_examples/basics/demo_custom_prior", "auto_examples/basics/demo_dataset", "auto_examples/basics/demo_dip", "auto_examples/basics/demo_hf_dataset", "auto_examples/basics/demo_lidar", "auto_examples/basics/demo_loading", "auto_examples/basics/demo_microscopy_3d", "auto_examples/basics/demo_phase_retrieval", "auto_examples/basics/demo_physics", "auto_examples/basics/demo_physics_tour", "auto_examples/basics/demo_ptychography", "auto_examples/basics/demo_remote_sensing", "auto_examples/basics/demo_tour_mri", "auto_examples/basics/demo_train_inpainting", "auto_examples/basics/demo_transforms", "auto_examples/basics/index", "auto_examples/basics/sg_execution_times", "auto_examples/index", "auto_examples/optimization/demo_3D_wavelets", "auto_examples/optimization/demo_TV_minimisation", "auto_examples/optimization/demo_wavelet_prior", "auto_examples/optimization/index", "auto_examples/optimization/sg_execution_times", "auto_examples/patch-priors/demo_epll", "auto_examples/patch-priors/demo_patch_priors_CT", "auto_examples/patch-priors/index", "auto_examples/patch-priors/sg_execution_times", "auto_examples/plug-and-play/demo_PnP_DPIR_deblur", "auto_examples/plug-and-play/demo_PnP_custom_optim", "auto_examples/plug-and-play/demo_PnP_mirror_descent", "auto_examples/plug-and-play/demo_RED_GSPnP_SR", "auto_examples/plug-and-play/demo_vanilla_PnP", "auto_examples/plug-and-play/index", "auto_examples/plug-and-play/sg_execution_times", "auto_examples/sampling/demo_custom_kernel", "auto_examples/sampling/demo_ddrm", "auto_examples/sampling/demo_diffpir", "auto_examples/sampling/demo_dps", "auto_examples/sampling/demo_sampling", "auto_examples/sampling/index", "auto_examples/sampling/sg_execution_times", "auto_examples/self-supervised-learning/demo_artifact2artifact", "auto_examples/self-supervised-learning/demo_ei_transforms", "auto_examples/self-supervised-learning/demo_equivariant_imaging", "auto_examples/self-supervised-learning/demo_multioperator_imaging", "auto_examples/self-supervised-learning/demo_n2n_denoising", "auto_examples/self-supervised-learning/demo_r2r_denoising", "auto_examples/self-supervised-learning/demo_splitting_loss", "auto_examples/self-supervised-learning/demo_sure_denoising", "auto_examples/self-supervised-learning/demo_unsure", "auto_examples/self-supervised-learning/index", "auto_examples/self-supervised-learning/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/unfolded/demo_DEQ", "auto_examples/unfolded/demo_LISTA", "auto_examples/unfolded/demo_custom_prior_unfolded", "auto_examples/unfolded/demo_learned_primal_dual", "auto_examples/unfolded/demo_unfolded_constrained_LISTA", "auto_examples/unfolded/demo_vanilla_unfolded", "auto_examples/unfolded/index", "auto_examples/unfolded/sg_execution_times", "community", "contributing", "finding_help", "index", "quickstart", "sg_execution_times", "user_guide", "user_guide/other/notation", "user_guide/other/utils", "user_guide/physics/defining", "user_guide/physics/functional", "user_guide/physics/intro", "user_guide/physics/physics", "user_guide/reconstruction/adversarial", "user_guide/reconstruction/artifact", "user_guide/reconstruction/denoisers", "user_guide/reconstruction/introduction", "user_guide/reconstruction/iterative", "user_guide/reconstruction/optimization", "user_guide/reconstruction/sampling", "user_guide/reconstruction/specific", "user_guide/reconstruction/unfolded", "user_guide/reconstruction/weights", "user_guide/training/datasets", "user_guide/training/loss", "user_guide/training/metric", "user_guide/training/multigpu", "user_guide/training/trainer", "user_guide/training/transforms"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["API.rst", "api/deepinv.datasets.rst", "api/deepinv.loss.rst", "api/deepinv.metric.rst", "api/deepinv.models.rst", "api/deepinv.optim.rst", "api/deepinv.physics.rst", "api/deepinv.sampling.rst", "api/deepinv.training.rst", "api/deepinv.transform.rst", "api/deepinv.unfolded.rst", "api/deepinv.utils.rst", "api/stubs/deepinv.Trainer.rst", "api/stubs/deepinv.datasets.CBSD68.rst", "api/stubs/deepinv.datasets.DIV2K.rst", "api/stubs/deepinv.datasets.FMD.rst", "api/stubs/deepinv.datasets.FastMRISliceDataset.rst", "api/stubs/deepinv.datasets.Flickr2kHR.rst", "api/stubs/deepinv.datasets.HDF5Dataset.rst", "api/stubs/deepinv.datasets.Kohler.rst", "api/stubs/deepinv.datasets.LidcIdriSliceDataset.rst", "api/stubs/deepinv.datasets.LsdirHR.rst", "api/stubs/deepinv.datasets.NBUDataset.rst", "api/stubs/deepinv.datasets.PatchDataset.rst", "api/stubs/deepinv.datasets.Set14HR.rst", "api/stubs/deepinv.datasets.SimpleFastMRISliceDataset.rst", "api/stubs/deepinv.datasets.Urban100HR.rst", "api/stubs/deepinv.datasets.generate_dataset.rst", "api/stubs/deepinv.datasets.utils.PlaceholderDataset.rst", "api/stubs/deepinv.datasets.utils.Rescale.rst", "api/stubs/deepinv.datasets.utils.ToComplex.rst", "api/stubs/deepinv.loss.Artifact2ArtifactLoss.rst", "api/stubs/deepinv.loss.BaseLossScheduler.rst", "api/stubs/deepinv.loss.EILoss.rst", "api/stubs/deepinv.loss.FNEJacobianSpectralNorm.rst", "api/stubs/deepinv.loss.InterleavedEpochLossScheduler.rst", "api/stubs/deepinv.loss.InterleavedLossScheduler.rst", "api/stubs/deepinv.loss.JacobianSpectralNorm.rst", "api/stubs/deepinv.loss.Loss.rst", "api/stubs/deepinv.loss.MCLoss.rst", "api/stubs/deepinv.loss.MOEILoss.rst", "api/stubs/deepinv.loss.MOILoss.rst", "api/stubs/deepinv.loss.Neighbor2Neighbor.rst", "api/stubs/deepinv.loss.Phase2PhaseLoss.rst", "api/stubs/deepinv.loss.R2RLoss.rst", "api/stubs/deepinv.loss.RandomLossScheduler.rst", "api/stubs/deepinv.loss.ScoreLoss.rst", "api/stubs/deepinv.loss.SplittingLoss.rst", "api/stubs/deepinv.loss.StackedPhysicsLoss.rst", "api/stubs/deepinv.loss.StepLossScheduler.rst", "api/stubs/deepinv.loss.SupLoss.rst", "api/stubs/deepinv.loss.SureGaussianLoss.rst", "api/stubs/deepinv.loss.SurePGLoss.rst", "api/stubs/deepinv.loss.SurePoissonLoss.rst", "api/stubs/deepinv.loss.TVLoss.rst", "api/stubs/deepinv.loss.adversarial.DiscriminatorLoss.rst", "api/stubs/deepinv.loss.adversarial.DiscriminatorMetric.rst", "api/stubs/deepinv.loss.adversarial.GeneratorLoss.rst", "api/stubs/deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss.rst", "api/stubs/deepinv.loss.adversarial.SupAdversarialGeneratorLoss.rst", "api/stubs/deepinv.loss.adversarial.UAIRGeneratorLoss.rst", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss.rst", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss.rst", "api/stubs/deepinv.loss.metric.ERGAS.rst", "api/stubs/deepinv.loss.metric.L1L2.rst", "api/stubs/deepinv.loss.metric.LPIPS.rst", "api/stubs/deepinv.loss.metric.LpNorm.rst", "api/stubs/deepinv.loss.metric.MAE.rst", "api/stubs/deepinv.loss.metric.MSE.rst", "api/stubs/deepinv.loss.metric.Metric.rst", "api/stubs/deepinv.loss.metric.NIQE.rst", "api/stubs/deepinv.loss.metric.NMSE.rst", "api/stubs/deepinv.loss.metric.PSNR.rst", "api/stubs/deepinv.loss.metric.QNR.rst", "api/stubs/deepinv.loss.metric.SSIM.rst", "api/stubs/deepinv.loss.metric.SpectralAngleMapper.rst", "api/stubs/deepinv.models.ArtifactRemoval.rst", "api/stubs/deepinv.models.AutoEncoder.rst", "api/stubs/deepinv.models.BM3D.rst", "api/stubs/deepinv.models.CSGMGenerator.rst", "api/stubs/deepinv.models.ConvDecoder.rst", "api/stubs/deepinv.models.DCGANDiscriminator.rst", "api/stubs/deepinv.models.DCGANGenerator.rst", "api/stubs/deepinv.models.DRUNet.rst", "api/stubs/deepinv.models.DeepImagePrior.rst", "api/stubs/deepinv.models.Denoiser.rst", "api/stubs/deepinv.models.DiffUNet.rst", "api/stubs/deepinv.models.DnCNN.rst", "api/stubs/deepinv.models.EPLLDenoiser.rst", "api/stubs/deepinv.models.ESRGANDiscriminator.rst", "api/stubs/deepinv.models.EquivariantDenoiser.rst", "api/stubs/deepinv.models.GSDRUNet.rst", "api/stubs/deepinv.models.ICNN.rst", "api/stubs/deepinv.models.MedianFilter.rst", "api/stubs/deepinv.models.PDNet_DualBlock.rst", "api/stubs/deepinv.models.PDNet_PrimalBlock.rst", "api/stubs/deepinv.models.PanNet.rst", "api/stubs/deepinv.models.PatchGANDiscriminator.rst", "api/stubs/deepinv.models.Reconstructor.rst", "api/stubs/deepinv.models.Restormer.rst", "api/stubs/deepinv.models.SCUNet.rst", "api/stubs/deepinv.models.SwinIR.rst", "api/stubs/deepinv.models.TGVDenoiser.rst", "api/stubs/deepinv.models.TVDenoiser.rst", "api/stubs/deepinv.models.TimeAgnosticNet.rst", "api/stubs/deepinv.models.TimeAveragingNet.rst", "api/stubs/deepinv.models.UNet.rst", "api/stubs/deepinv.models.VarNet.rst", "api/stubs/deepinv.models.WaveletDenoiser.rst", "api/stubs/deepinv.models.WaveletDictDenoiser.rst", "api/stubs/deepinv.models.complex.to_complex_denoiser.rst", "api/stubs/deepinv.optim.AmplitudeLoss.rst", "api/stubs/deepinv.optim.AmplitudeLossDistance.rst", "api/stubs/deepinv.optim.BaseOptim.rst", "api/stubs/deepinv.optim.Bregman.rst", "api/stubs/deepinv.optim.BregmanL2.rst", "api/stubs/deepinv.optim.Bregman_ICNN.rst", "api/stubs/deepinv.optim.BurgEntropy.rst", "api/stubs/deepinv.optim.DPIR.rst", "api/stubs/deepinv.optim.DataFidelity.rst", "api/stubs/deepinv.optim.Distance.rst", "api/stubs/deepinv.optim.EPLL.rst", "api/stubs/deepinv.optim.FixedPoint.rst", "api/stubs/deepinv.optim.IndicatorL2.rst", "api/stubs/deepinv.optim.IndicatorL2Distance.rst", "api/stubs/deepinv.optim.L1.rst", "api/stubs/deepinv.optim.L12Prior.rst", "api/stubs/deepinv.optim.L1Distance.rst", "api/stubs/deepinv.optim.L1Prior.rst", "api/stubs/deepinv.optim.L2.rst", "api/stubs/deepinv.optim.L2Distance.rst", "api/stubs/deepinv.optim.LogPoissonLikelihood.rst", "api/stubs/deepinv.optim.LogPoissonLikelihoodDistance.rst", "api/stubs/deepinv.optim.NegEntropy.rst", "api/stubs/deepinv.optim.OptimIterator.rst", "api/stubs/deepinv.optim.PatchNR.rst", "api/stubs/deepinv.optim.PatchPrior.rst", "api/stubs/deepinv.optim.PnP.rst", "api/stubs/deepinv.optim.PoissonLikelihood.rst", "api/stubs/deepinv.optim.PoissonLikelihoodDistance.rst", "api/stubs/deepinv.optim.Potential.rst", "api/stubs/deepinv.optim.Prior.rst", "api/stubs/deepinv.optim.RED.rst", "api/stubs/deepinv.optim.ScorePrior.rst", "api/stubs/deepinv.optim.StackedPhysicsDataFidelity.rst", "api/stubs/deepinv.optim.TVPrior.rst", "api/stubs/deepinv.optim.Tikhonov.rst", "api/stubs/deepinv.optim.WaveletPrior.rst", "api/stubs/deepinv.optim.optim_builder.rst", "api/stubs/deepinv.optim.optim_iterators.ADMMIteration.rst", "api/stubs/deepinv.optim.optim_iterators.CPIteration.rst", "api/stubs/deepinv.optim.optim_iterators.DRSIteration.rst", "api/stubs/deepinv.optim.optim_iterators.FISTAIteration.rst", "api/stubs/deepinv.optim.optim_iterators.GDIteration.rst", "api/stubs/deepinv.optim.optim_iterators.HQSIteration.rst", "api/stubs/deepinv.optim.optim_iterators.MDIteration.rst", "api/stubs/deepinv.optim.optim_iterators.PGDIteration.rst", "api/stubs/deepinv.optim.optim_iterators.SMIteration.rst", "api/stubs/deepinv.optim.optim_iterators.fStep.rst", "api/stubs/deepinv.optim.optim_iterators.gStep.rst", "api/stubs/deepinv.optim.phase_retrieval.correct_global_phase.rst", "api/stubs/deepinv.optim.phase_retrieval.spectral_methods.rst", "api/stubs/deepinv.optim.utils.GaussianMixtureModel.rst", "api/stubs/deepinv.optim.utils.bicgstab.rst", "api/stubs/deepinv.optim.utils.conjugate_gradient.rst", "api/stubs/deepinv.optim.utils.gradient_descent.rst", "api/stubs/deepinv.optim.utils.least_squares.rst", "api/stubs/deepinv.optim.utils.lsqr.rst", "api/stubs/deepinv.physics.Blur.rst", "api/stubs/deepinv.physics.BlurFFT.rst", "api/stubs/deepinv.physics.CompressedSensing.rst", "api/stubs/deepinv.physics.CompressiveSpectralImaging.rst", "api/stubs/deepinv.physics.Decolorize.rst", "api/stubs/deepinv.physics.DecomposablePhysics.rst", "api/stubs/deepinv.physics.Demosaicing.rst", "api/stubs/deepinv.physics.Denoising.rst", "api/stubs/deepinv.physics.Downsampling.rst", "api/stubs/deepinv.physics.DynamicMRI.rst", "api/stubs/deepinv.physics.GammaNoise.rst", "api/stubs/deepinv.physics.GaussianNoise.rst", "api/stubs/deepinv.physics.Haze.rst", "api/stubs/deepinv.physics.HyperSpectralUnmixing.rst", "api/stubs/deepinv.physics.Inpainting.rst", "api/stubs/deepinv.physics.LinearPhysics.rst", "api/stubs/deepinv.physics.LogPoissonNoise.rst", "api/stubs/deepinv.physics.MRI.rst", "api/stubs/deepinv.physics.MRIMixin.rst", "api/stubs/deepinv.physics.MultiCoilMRI.rst", "api/stubs/deepinv.physics.NoiseModel.rst", "api/stubs/deepinv.physics.Pansharpen.rst", "api/stubs/deepinv.physics.PhaseRetrieval.rst", "api/stubs/deepinv.physics.Physics.rst", "api/stubs/deepinv.physics.PoissonGaussianNoise.rst", "api/stubs/deepinv.physics.PoissonNoise.rst", "api/stubs/deepinv.physics.Ptychography.rst", "api/stubs/deepinv.physics.PtychographyLinearOperator.rst", "api/stubs/deepinv.physics.RadioInterferometry.rst", "api/stubs/deepinv.physics.RandomPhaseRetrieval.rst", "api/stubs/deepinv.physics.SequentialMRI.rst", "api/stubs/deepinv.physics.SinglePhotonLidar.rst", "api/stubs/deepinv.physics.SinglePixelCamera.rst", "api/stubs/deepinv.physics.SpaceVaryingBlur.rst", "api/stubs/deepinv.physics.StackedLinearPhysics.rst", "api/stubs/deepinv.physics.StackedPhysics.rst", "api/stubs/deepinv.physics.StructuredRandom.rst", "api/stubs/deepinv.physics.StructuredRandomPhaseRetrieval.rst", "api/stubs/deepinv.physics.TimeMixin.rst", "api/stubs/deepinv.physics.Tomography.rst", "api/stubs/deepinv.physics.UniformGaussianNoise.rst", "api/stubs/deepinv.physics.UniformNoise.rst", "api/stubs/deepinv.physics.adjoint_function.rst", "api/stubs/deepinv.physics.blur.bicubic_filter.rst", "api/stubs/deepinv.physics.blur.bilinear_filter.rst", "api/stubs/deepinv.physics.blur.gaussian_blur.rst", "api/stubs/deepinv.physics.blur.sinc_filter.rst", "api/stubs/deepinv.physics.functional.IRadon.rst", "api/stubs/deepinv.physics.functional.Radon.rst", "api/stubs/deepinv.physics.functional.conv2d.rst", "api/stubs/deepinv.physics.functional.conv2d_fft.rst", "api/stubs/deepinv.physics.functional.conv3d_fft.rst", "api/stubs/deepinv.physics.functional.conv_transpose2d.rst", "api/stubs/deepinv.physics.functional.conv_transpose2d_fft.rst", "api/stubs/deepinv.physics.functional.conv_transpose3d_fft.rst", "api/stubs/deepinv.physics.functional.dst1.rst", "api/stubs/deepinv.physics.functional.histogram.rst", "api/stubs/deepinv.physics.functional.histogramdd.rst", "api/stubs/deepinv.physics.functional.multiplier.rst", "api/stubs/deepinv.physics.functional.multiplier_adjoint.rst", "api/stubs/deepinv.physics.functional.product_convolution2d.rst", "api/stubs/deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.BaseMaskGenerator.rst", "api/stubs/deepinv.physics.generator.BernoulliSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.ConfocalBlurGenerator3D.rst", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator.rst", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator3D.rst", "api/stubs/deepinv.physics.generator.EquispacedMaskGenerator.rst", "api/stubs/deepinv.physics.generator.GaussianMaskGenerator.rst", "api/stubs/deepinv.physics.generator.GaussianSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.GeneratorMixture.rst", "api/stubs/deepinv.physics.generator.MotionBlurGenerator.rst", "api/stubs/deepinv.physics.generator.PSFGenerator.rst", "api/stubs/deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.PhysicsGenerator.rst", "api/stubs/deepinv.physics.generator.ProductConvolutionBlurGenerator.rst", "api/stubs/deepinv.physics.generator.RandomMaskGenerator.rst", "api/stubs/deepinv.physics.generator.SigmaGenerator.rst", "api/stubs/deepinv.physics.phase_retrieval.build_probe.rst", "api/stubs/deepinv.physics.phase_retrieval.generate_shifts.rst", "api/stubs/deepinv.physics.stack.rst", "api/stubs/deepinv.sampling.DDRM.rst", "api/stubs/deepinv.sampling.DPS.rst", "api/stubs/deepinv.sampling.DiffPIR.rst", "api/stubs/deepinv.sampling.DiffusionSampler.rst", "api/stubs/deepinv.sampling.MonteCarlo.rst", "api/stubs/deepinv.sampling.SKRock.rst", "api/stubs/deepinv.sampling.ULA.rst", "api/stubs/deepinv.test.rst", "api/stubs/deepinv.train.rst", "api/stubs/deepinv.training.AdversarialOptimizer.rst", "api/stubs/deepinv.training.AdversarialTrainer.rst", "api/stubs/deepinv.transform.CPABDiffeomorphism.rst", "api/stubs/deepinv.transform.Homography.rst", "api/stubs/deepinv.transform.Reflect.rst", "api/stubs/deepinv.transform.Rotate.rst", "api/stubs/deepinv.transform.Scale.rst", "api/stubs/deepinv.transform.Shift.rst", "api/stubs/deepinv.transform.ShiftTime.rst", "api/stubs/deepinv.transform.Transform.rst", "api/stubs/deepinv.transform.projective.Affine.rst", "api/stubs/deepinv.transform.projective.Euclidean.rst", "api/stubs/deepinv.transform.projective.PanTiltRotate.rst", "api/stubs/deepinv.transform.projective.Similarity.rst", "api/stubs/deepinv.unfolded.BaseDEQ.rst", "api/stubs/deepinv.unfolded.BaseUnfold.rst", "api/stubs/deepinv.unfolded.DEQ_builder.rst", "api/stubs/deepinv.unfolded.unfolded_builder.rst", "api/stubs/deepinv.utils.AverageMeter.rst", "api/stubs/deepinv.utils.ProgressMeter.rst", "api/stubs/deepinv.utils.TensorList.rst", "api/stubs/deepinv.utils.demo.demo_mri_model.rst", "api/stubs/deepinv.utils.dirac_like.rst", "api/stubs/deepinv.utils.get_data_home.rst", "api/stubs/deepinv.utils.get_degradation_url.rst", "api/stubs/deepinv.utils.get_freer_gpu.rst", "api/stubs/deepinv.utils.get_image_url.rst", "api/stubs/deepinv.utils.get_timestamp.rst", "api/stubs/deepinv.utils.load_dataset.rst", "api/stubs/deepinv.utils.load_degradation.rst", "api/stubs/deepinv.utils.load_image.rst", "api/stubs/deepinv.utils.load_url_image.rst", "api/stubs/deepinv.utils.ones_like.rst", "api/stubs/deepinv.utils.plot.rst", "api/stubs/deepinv.utils.plot_curves.rst", "api/stubs/deepinv.utils.plot_inset.rst", "api/stubs/deepinv.utils.plot_ortho3D.rst", "api/stubs/deepinv.utils.plot_parameters.rst", "api/stubs/deepinv.utils.plot_videos.rst", "api/stubs/deepinv.utils.rand_like.rst", "api/stubs/deepinv.utils.randn_like.rst", "api/stubs/deepinv.utils.zeros_like.rst", "auto_examples/advanced/demo_ri_basic.rst", "auto_examples/advanced/index.rst", "auto_examples/advanced/sg_execution_times.rst", "auto_examples/adversarial-learning/demo_gan_imaging.rst", "auto_examples/adversarial-learning/index.rst", "auto_examples/adversarial-learning/sg_execution_times.rst", "auto_examples/basics/demo_blur_tour.rst", "auto_examples/basics/demo_custom_prior.rst", "auto_examples/basics/demo_dataset.rst", "auto_examples/basics/demo_dip.rst", "auto_examples/basics/demo_hf_dataset.rst", "auto_examples/basics/demo_lidar.rst", "auto_examples/basics/demo_loading.rst", "auto_examples/basics/demo_microscopy_3d.rst", "auto_examples/basics/demo_phase_retrieval.rst", "auto_examples/basics/demo_physics.rst", "auto_examples/basics/demo_physics_tour.rst", "auto_examples/basics/demo_ptychography.rst", "auto_examples/basics/demo_remote_sensing.rst", "auto_examples/basics/demo_tour_mri.rst", "auto_examples/basics/demo_train_inpainting.rst", "auto_examples/basics/demo_transforms.rst", "auto_examples/basics/index.rst", "auto_examples/basics/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/optimization/demo_3D_wavelets.rst", "auto_examples/optimization/demo_TV_minimisation.rst", "auto_examples/optimization/demo_wavelet_prior.rst", "auto_examples/optimization/index.rst", "auto_examples/optimization/sg_execution_times.rst", "auto_examples/patch-priors/demo_epll.rst", "auto_examples/patch-priors/demo_patch_priors_CT.rst", "auto_examples/patch-priors/index.rst", "auto_examples/patch-priors/sg_execution_times.rst", "auto_examples/plug-and-play/demo_PnP_DPIR_deblur.rst", "auto_examples/plug-and-play/demo_PnP_custom_optim.rst", "auto_examples/plug-and-play/demo_PnP_mirror_descent.rst", "auto_examples/plug-and-play/demo_RED_GSPnP_SR.rst", "auto_examples/plug-and-play/demo_vanilla_PnP.rst", "auto_examples/plug-and-play/index.rst", "auto_examples/plug-and-play/sg_execution_times.rst", "auto_examples/sampling/demo_custom_kernel.rst", "auto_examples/sampling/demo_ddrm.rst", "auto_examples/sampling/demo_diffpir.rst", "auto_examples/sampling/demo_dps.rst", "auto_examples/sampling/demo_sampling.rst", "auto_examples/sampling/index.rst", "auto_examples/sampling/sg_execution_times.rst", "auto_examples/self-supervised-learning/demo_artifact2artifact.rst", "auto_examples/self-supervised-learning/demo_ei_transforms.rst", "auto_examples/self-supervised-learning/demo_equivariant_imaging.rst", "auto_examples/self-supervised-learning/demo_multioperator_imaging.rst", "auto_examples/self-supervised-learning/demo_n2n_denoising.rst", "auto_examples/self-supervised-learning/demo_r2r_denoising.rst", "auto_examples/self-supervised-learning/demo_splitting_loss.rst", "auto_examples/self-supervised-learning/demo_sure_denoising.rst", "auto_examples/self-supervised-learning/demo_unsure.rst", "auto_examples/self-supervised-learning/index.rst", "auto_examples/self-supervised-learning/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/unfolded/demo_DEQ.rst", "auto_examples/unfolded/demo_LISTA.rst", "auto_examples/unfolded/demo_custom_prior_unfolded.rst", "auto_examples/unfolded/demo_learned_primal_dual.rst", "auto_examples/unfolded/demo_unfolded_constrained_LISTA.rst", "auto_examples/unfolded/demo_vanilla_unfolded.rst", "auto_examples/unfolded/index.rst", "auto_examples/unfolded/sg_execution_times.rst", "community.rst", "contributing.rst", "finding_help.rst", "index.rst", "quickstart.rst", "sg_execution_times.rst", "user_guide.rst", "user_guide/other/notation.rst", "user_guide/other/utils.rst", "user_guide/physics/defining.rst", "user_guide/physics/functional.rst", "user_guide/physics/intro.rst", "user_guide/physics/physics.rst", "user_guide/reconstruction/adversarial.rst", "user_guide/reconstruction/artifact.rst", "user_guide/reconstruction/denoisers.rst", "user_guide/reconstruction/introduction.rst", "user_guide/reconstruction/iterative.rst", "user_guide/reconstruction/optimization.rst", "user_guide/reconstruction/sampling.rst", "user_guide/reconstruction/specific.rst", "user_guide/reconstruction/unfolded.rst", "user_guide/reconstruction/weights.rst", "user_guide/training/datasets.rst", "user_guide/training/loss.rst", "user_guide/training/metric.rst", "user_guide/training/multigpu.rst", "user_guide/training/trainer.rst", "user_guide/training/transforms.rst"], "indexentries": {"__add__() (deepinv.physics.generator.physicsgenerator method)": [[242, "deepinv.physics.generator.PhysicsGenerator.__add__", false]], "__add__() (deepinv.transform.transform method)": [[267, "deepinv.transform.Transform.__add__", false]], "__mul__() (deepinv.physics.inpainting method)": [[182, "deepinv.physics.Inpainting.__mul__", false]], "__mul__() (deepinv.physics.linearphysics method)": [[183, "deepinv.physics.LinearPhysics.__mul__", false]], "__mul__() (deepinv.physics.noisemodel method)": [[188, "deepinv.physics.NoiseModel.__mul__", false]], "__mul__() (deepinv.physics.physics method)": [[191, "deepinv.physics.Physics.__mul__", false]], "__mul__() (deepinv.transform.transform method)": [[267, "deepinv.transform.Transform.__mul__", false]], "a() (deepinv.physics.blur method)": [[168, "deepinv.physics.Blur.A", false]], "a() (deepinv.physics.blurfft method)": [[169, "deepinv.physics.BlurFFT.A", false]], "a() (deepinv.physics.compressedsensing method)": [[170, "deepinv.physics.CompressedSensing.A", false]], "a() (deepinv.physics.compressivespectralimaging method)": [[171, "deepinv.physics.CompressiveSpectralImaging.A", false]], "a() (deepinv.physics.decomposablephysics method)": [[173, "deepinv.physics.DecomposablePhysics.A", false]], "a() (deepinv.physics.downsampling method)": [[176, "deepinv.physics.Downsampling.A", false]], "a() (deepinv.physics.dynamicmri method)": [[177, "deepinv.physics.DynamicMRI.A", false]], "a() (deepinv.physics.haze method)": [[180, "deepinv.physics.Haze.A", false]], "a() (deepinv.physics.hyperspectralunmixing method)": [[181, "deepinv.physics.HyperSpectralUnmixing.A", false]], "a() (deepinv.physics.multicoilmri method)": [[187, "deepinv.physics.MultiCoilMRI.A", false]], "a() (deepinv.physics.phaseretrieval method)": [[190, "deepinv.physics.PhaseRetrieval.A", false]], "a() (deepinv.physics.physics method)": [[191, "deepinv.physics.Physics.A", false]], "a() (deepinv.physics.ptychographylinearoperator method)": [[195, "deepinv.physics.PtychographyLinearOperator.A", false]], "a() (deepinv.physics.radiointerferometry method)": [[196, "deepinv.physics.RadioInterferometry.A", false]], "a() (deepinv.physics.sequentialmri method)": [[198, "deepinv.physics.SequentialMRI.A", false]], "a() (deepinv.physics.singlephotonlidar method)": [[199, "deepinv.physics.SinglePhotonLidar.A", false]], "a() (deepinv.physics.spacevaryingblur method)": [[201, "deepinv.physics.SpaceVaryingBlur.A", false]], "a() (deepinv.physics.stackedphysics method)": [[203, "deepinv.physics.StackedPhysics.A", false]], "a() (deepinv.physics.tomography method)": [[207, "deepinv.physics.Tomography.A", false]], "a_a_adjoint() (deepinv.physics.decomposablephysics method)": [[173, "deepinv.physics.DecomposablePhysics.A_A_adjoint", false]], "a_a_adjoint() (deepinv.physics.linearphysics method)": [[183, "deepinv.physics.LinearPhysics.A_A_adjoint", false]], "a_adjoint() (deepinv.physics.blur method)": [[168, "deepinv.physics.Blur.A_adjoint", false]], "a_adjoint() (deepinv.physics.blurfft method)": [[169, "deepinv.physics.BlurFFT.A_adjoint", false]], "a_adjoint() (deepinv.physics.compressedsensing method)": [[170, "deepinv.physics.CompressedSensing.A_adjoint", false]], "a_adjoint() (deepinv.physics.compressivespectralimaging method)": [[171, "deepinv.physics.CompressiveSpectralImaging.A_adjoint", false]], "a_adjoint() (deepinv.physics.decomposablephysics method)": [[173, "deepinv.physics.DecomposablePhysics.A_adjoint", false]], "a_adjoint() (deepinv.physics.downsampling method)": [[176, "deepinv.physics.Downsampling.A_adjoint", false]], "a_adjoint() (deepinv.physics.dynamicmri method)": [[177, "deepinv.physics.DynamicMRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.hyperspectralunmixing method)": [[181, "deepinv.physics.HyperSpectralUnmixing.A_adjoint", false]], "a_adjoint() (deepinv.physics.linearphysics method)": [[183, "deepinv.physics.LinearPhysics.A_adjoint", false]], "a_adjoint() (deepinv.physics.mri method)": [[185, "deepinv.physics.MRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.multicoilmri method)": [[187, "deepinv.physics.MultiCoilMRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.ptychographylinearoperator method)": [[195, "deepinv.physics.PtychographyLinearOperator.A_adjoint", false]], "a_adjoint() (deepinv.physics.radiointerferometry method)": [[196, "deepinv.physics.RadioInterferometry.A_adjoint", false]], "a_adjoint() (deepinv.physics.sequentialmri method)": [[198, "deepinv.physics.SequentialMRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.spacevaryingblur method)": [[201, "deepinv.physics.SpaceVaryingBlur.A_adjoint", false]], "a_adjoint() (deepinv.physics.stackedlinearphysics method)": [[202, "deepinv.physics.StackedLinearPhysics.A_adjoint", false]], "a_adjoint() (deepinv.physics.tomography method)": [[207, "deepinv.physics.Tomography.A_adjoint", false]], "a_adjoint_a() (deepinv.physics.decomposablephysics method)": [[173, "deepinv.physics.DecomposablePhysics.A_adjoint_A", false]], "a_adjoint_a() (deepinv.physics.linearphysics method)": [[183, "deepinv.physics.LinearPhysics.A_adjoint_A", false]], "a_dagger() (deepinv.physics.compressedsensing method)": [[170, "deepinv.physics.CompressedSensing.A_dagger", false]], "a_dagger() (deepinv.physics.decomposablephysics method)": [[173, "deepinv.physics.DecomposablePhysics.A_dagger", false]], "a_dagger() (deepinv.physics.dynamicmri method)": [[177, "deepinv.physics.DynamicMRI.A_dagger", false]], "a_dagger() (deepinv.physics.haze method)": [[180, "deepinv.physics.Haze.A_dagger", false]], "a_dagger() (deepinv.physics.hyperspectralunmixing method)": [[181, "deepinv.physics.HyperSpectralUnmixing.A_dagger", false]], "a_dagger() (deepinv.physics.linearphysics method)": [[183, "deepinv.physics.LinearPhysics.A_dagger", false]], "a_dagger() (deepinv.physics.pansharpen method)": [[189, "deepinv.physics.Pansharpen.A_dagger", false]], "a_dagger() (deepinv.physics.phaseretrieval method)": [[190, "deepinv.physics.PhaseRetrieval.A_dagger", false]], "a_dagger() (deepinv.physics.physics method)": [[191, "deepinv.physics.Physics.A_dagger", false]], "a_dagger() (deepinv.physics.singlephotonlidar method)": [[199, "deepinv.physics.SinglePhotonLidar.A_dagger", false]], "a_dagger() (deepinv.physics.tomography method)": [[207, "deepinv.physics.Tomography.A_dagger", false]], "a_vjp() (deepinv.physics.linearphysics method)": [[183, "deepinv.physics.LinearPhysics.A_vjp", false]], "a_vjp() (deepinv.physics.phaseretrieval method)": [[190, "deepinv.physics.PhaseRetrieval.A_vjp", false]], "a_vjp() (deepinv.physics.physics method)": [[191, "deepinv.physics.Physics.A_vjp", false]], "adapt_model() (deepinv.loss.baselossscheduler method)": [[32, "deepinv.loss.BaseLossScheduler.adapt_model", false]], "adapt_model() (deepinv.loss.loss method)": [[38, "deepinv.loss.Loss.adapt_model", false]], "adapt_model() (deepinv.loss.phase2phaseloss method)": [[43, "deepinv.loss.Phase2PhaseLoss.adapt_model", false]], "adapt_model() (deepinv.loss.r2rloss method)": [[44, "deepinv.loss.R2RLoss.adapt_model", false]], "adapt_model() (deepinv.loss.scoreloss method)": [[46, "deepinv.loss.ScoreLoss.adapt_model", false]], "adapt_model() (deepinv.loss.splittingloss method)": [[47, "deepinv.loss.SplittingLoss.adapt_model", false]], "adjoint_function() (in module deepinv.physics)": [[210, "deepinv.physics.adjoint_function", false]], "adjointness_test() (deepinv.physics.linearphysics method)": [[183, "deepinv.physics.LinearPhysics.adjointness_test", false]], "admmiteration (class in deepinv.optim.optim_iterators)": [[149, "deepinv.optim.optim_iterators.ADMMIteration", false]], "adversarial_loss() (deepinv.loss.adversarial.discriminatorloss method)": [[55, "deepinv.loss.adversarial.DiscriminatorLoss.adversarial_loss", false]], "adversarial_loss() (deepinv.loss.adversarial.generatorloss method)": [[57, "deepinv.loss.adversarial.GeneratorLoss.adversarial_loss", false]], "adversarialoptimizer (class in deepinv.training)": [[258, "deepinv.training.AdversarialOptimizer", false]], "adversarialtrainer (class in deepinv.training)": [[259, "deepinv.training.AdversarialTrainer", false]], "affine (class in deepinv.transform.projective)": [[268, "deepinv.transform.projective.Affine", false]], "amplitudeloss (class in deepinv.optim)": [[111, "deepinv.optim.AmplitudeLoss", false]], "amplitudelossdistance (class in deepinv.optim)": [[112, "deepinv.optim.AmplitudeLossDistance", false]], "anderson_acceleration_step() (deepinv.optim.fixedpoint method)": [[122, "deepinv.optim.FixedPoint.anderson_acceleration_step", false]], "artifact2artifactloss (class in deepinv.loss)": [[31, "deepinv.loss.Artifact2ArtifactLoss", false]], "artifact2artifactsplittingmaskgenerator (class in deepinv.physics.generator)": [[229, "deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator", false]], "artifactremoval (class in deepinv.models)": [[76, "deepinv.models.ArtifactRemoval", false]], "autoencoder (class in deepinv.models)": [[77, "deepinv.models.AutoEncoder", false]], "average() (deepinv.physics.timemixin static method)": [[206, "deepinv.physics.TimeMixin.average", false]], "averagemeter (class in deepinv.utils)": [[276, "deepinv.utils.AverageMeter", false]], "b_dagger() (deepinv.physics.phaseretrieval method)": [[190, "deepinv.physics.PhaseRetrieval.B_dagger", false]], "b_dagger() (deepinv.physics.structuredrandomphaseretrieval method)": [[205, "deepinv.physics.StructuredRandomPhaseRetrieval.B_dagger", false]], "backbone_inference() (deepinv.models.artifactremoval method)": [[76, "deepinv.models.ArtifactRemoval.backbone_inference", false]], "backbone_inference() (deepinv.models.varnet method)": [[107, "deepinv.models.VarNet.backbone_inference", false]], "basedeq (class in deepinv.unfolded)": [[272, "deepinv.unfolded.BaseDEQ", false]], "baselossscheduler (class in deepinv.loss)": [[32, "deepinv.loss.BaseLossScheduler", false]], "basemaskgenerator (class in deepinv.physics.generator)": [[230, "deepinv.physics.generator.BaseMaskGenerator", false]], "baseoptim (class in deepinv.optim)": [[113, "deepinv.optim.BaseOptim", false]], "baseunfold (class in deepinv.unfolded)": [[273, "deepinv.unfolded.BaseUnfold", false]], "batch_step() (deepinv.physics.generator.artifact2artifactsplittingmaskgenerator method)": [[229, "deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator.batch_step", false]], "batch_step() (deepinv.physics.generator.bernoullisplittingmaskgenerator method)": [[231, "deepinv.physics.generator.BernoulliSplittingMaskGenerator.batch_step", false]], "batch_step() (deepinv.physics.generator.gaussiansplittingmaskgenerator method)": [[237, "deepinv.physics.generator.GaussianSplittingMaskGenerator.batch_step", false]], "batch_step() (deepinv.physics.generator.phase2phasesplittingmaskgenerator method)": [[241, "deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator.batch_step", false]], "bernoullisplittingmaskgenerator (class in deepinv.physics.generator)": [[231, "deepinv.physics.generator.BernoulliSplittingMaskGenerator", false]], "bicgstab() (in module deepinv.optim.utils)": [[163, "deepinv.optim.utils.bicgstab", false]], "bicubic_filter() (in module deepinv.physics.blur)": [[211, "deepinv.physics.blur.bicubic_filter", false]], "bilinear_filter() (in module deepinv.physics.blur)": [[212, "deepinv.physics.blur.bilinear_filter", false]], "blur (class in deepinv.physics)": [[168, "deepinv.physics.Blur", false]], "blurfft (class in deepinv.physics)": [[169, "deepinv.physics.BlurFFT", false]], "bm3d (class in deepinv.models)": [[78, "deepinv.models.BM3D", false]], "bregman (class in deepinv.optim)": [[114, "deepinv.optim.Bregman", false]], "bregman_icnn (class in deepinv.optim)": [[116, "deepinv.optim.Bregman_ICNN", false]], "bregman_prox() (deepinv.optim.potential method)": [[140, "deepinv.optim.Potential.bregman_prox", false]], "bregmanl2 (class in deepinv.optim)": [[115, "deepinv.optim.BregmanL2", false]], "build_probe() (in module deepinv.physics.phase_retrieval)": [[246, "deepinv.physics.phase_retrieval.build_probe", false]], "burgentropy (class in deepinv.optim)": [[117, "deepinv.optim.BurgEntropy", false]], "cbsd68 (class in deepinv.datasets)": [[13, "deepinv.datasets.CBSD68", false]], "check_clip_grad() (deepinv.trainer method)": [[12, "deepinv.Trainer.check_clip_grad", false]], "check_clip_grad_d() (deepinv.training.adversarialtrainer method)": [[259, "deepinv.training.AdversarialTrainer.check_clip_grad_D", false]], "check_conv_fn() (deepinv.optim.baseoptim method)": [[113, "deepinv.optim.BaseOptim.check_conv_fn", false]], "check_dataset_exists() (deepinv.datasets.cbsd68 method)": [[13, "deepinv.datasets.CBSD68.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.flickr2khr method)": [[17, "deepinv.datasets.Flickr2kHR.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.nbudataset method)": [[22, "deepinv.datasets.NBUDataset.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.set14hr method)": [[24, "deepinv.datasets.Set14HR.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.urban100hr method)": [[26, "deepinv.datasets.Urban100HR.check_dataset_exists", false]], "check_iteration_fn() (deepinv.optim.baseoptim method)": [[113, "deepinv.optim.BaseOptim.check_iteration_fn", false]], "check_mask() (deepinv.physics.dynamicmri method)": [[177, "deepinv.physics.DynamicMRI.check_mask", false]], "check_mask() (deepinv.physics.mrimixin method)": [[186, "deepinv.physics.MRIMixin.check_mask", false]], "check_pixelwise() (deepinv.physics.generator.bernoullisplittingmaskgenerator method)": [[231, "deepinv.physics.generator.BernoulliSplittingMaskGenerator.check_pixelwise", false]], "classify() (deepinv.optim.utils.gaussianmixturemodel method)": [[162, "deepinv.optim.utils.GaussianMixtureModel.classify", false]], "component_log_likelihoods() (deepinv.optim.utils.gaussianmixturemodel method)": [[162, "deepinv.optim.utils.GaussianMixtureModel.component_log_likelihoods", false]], "compressedsensing (class in deepinv.physics)": [[170, "deepinv.physics.CompressedSensing", false]], "compressivespectralimaging (class in deepinv.physics)": [[171, "deepinv.physics.CompressiveSpectralImaging", false]], "compute_alpha() (deepinv.sampling.diffpir method)": [[251, "deepinv.sampling.DiffPIR.compute_alpha", false]], "compute_alpha_betas() (deepinv.sampling.dps method)": [[250, "deepinv.sampling.DPS.compute_alpha_betas", false]], "compute_loss() (deepinv.trainer method)": [[12, "deepinv.Trainer.compute_loss", false]], "compute_loss() (deepinv.training.adversarialtrainer method)": [[259, "deepinv.training.AdversarialTrainer.compute_loss", false]], "compute_metrics() (deepinv.trainer method)": [[12, "deepinv.Trainer.compute_metrics", false]], "compute_norm() (deepinv.physics.linearphysics method)": [[183, "deepinv.physics.LinearPhysics.compute_norm", false]], "condition_number() (deepinv.physics.linearphysics method)": [[183, "deepinv.physics.LinearPhysics.condition_number", false]], "confocalblurgenerator3d (class in deepinv.physics.generator)": [[232, "deepinv.physics.generator.ConfocalBlurGenerator3D", false]], "conjugate() (deepinv.optim.bregman_icnn method)": [[116, "deepinv.optim.Bregman_ICNN.conjugate", false]], "conjugate() (deepinv.optim.bregmanl2 method)": [[115, "deepinv.optim.BregmanL2.conjugate", false]], "conjugate() (deepinv.optim.burgentropy method)": [[117, "deepinv.optim.BurgEntropy.conjugate", false]], "conjugate() (deepinv.optim.negentropy method)": [[133, "deepinv.optim.NegEntropy.conjugate", false]], "conjugate() (deepinv.optim.potential method)": [[140, "deepinv.optim.Potential.conjugate", false]], "conjugate_gradient() (in module deepinv.optim.utils)": [[164, "deepinv.optim.utils.conjugate_gradient", false]], "conv2d() (in module deepinv.physics.functional)": [[217, "deepinv.physics.functional.conv2d", false]], "conv2d_fft() (in module deepinv.physics.functional)": [[218, "deepinv.physics.functional.conv2d_fft", false]], "conv3d_fft() (in module deepinv.physics.functional)": [[219, "deepinv.physics.functional.conv3d_fft", false]], "conv_transpose2d() (in module deepinv.physics.functional)": [[220, "deepinv.physics.functional.conv_transpose2d", false]], "conv_transpose2d_fft() (in module deepinv.physics.functional)": [[221, "deepinv.physics.functional.conv_transpose2d_fft", false]], "conv_transpose3d_fft() (in module deepinv.physics.functional)": [[222, "deepinv.physics.functional.conv_transpose3d_fft", false]], "convdecoder (class in deepinv.models)": [[80, "deepinv.models.ConvDecoder", false]], "convert_to_fp16() (deepinv.models.diffunet method)": [[86, "deepinv.models.DiffUNet.convert_to_fp16", false]], "convert_to_fp32() (deepinv.models.diffunet method)": [[86, "deepinv.models.DiffUNet.convert_to_fp32", false]], "correct_global_phase() (in module deepinv.optim.phase_retrieval)": [[160, "deepinv.optim.phase_retrieval.correct_global_phase", false]], "cpabdiffeomorphism (class in deepinv.transform)": [[260, "deepinv.transform.CPABDiffeomorphism", false]], "cpiteration (class in deepinv.optim.optim_iterators)": [[150, "deepinv.optim.optim_iterators.CPIteration", false]], "create_sampler() (deepinv.models.pannet method)": [[96, "deepinv.models.PanNet.create_sampler", false]], "crop() (deepinv.physics.compressivespectralimaging method)": [[171, "deepinv.physics.CompressiveSpectralImaging.crop", false]], "crop() (deepinv.physics.mrimixin method)": [[186, "deepinv.physics.MRIMixin.crop", false]], "crop_output() (deepinv.models.waveletdenoiser method)": [[108, "deepinv.models.WaveletDenoiser.crop_output", false]], "csgmgenerator (class in deepinv.models)": [[79, "deepinv.models.CSGMGenerator", false]], "d_lambda() (deepinv.loss.metric.qnr method)": [[73, "deepinv.loss.metric.QNR.D_lambda", false]], "d_s() (deepinv.loss.metric.qnr method)": [[73, "deepinv.loss.metric.QNR.D_s", false]], "datafidelity (class in deepinv.optim)": [[119, "deepinv.optim.DataFidelity", false]], "dcgandiscriminator (class in deepinv.models)": [[81, "deepinv.models.DCGANDiscriminator", false]], "dcgangenerator (class in deepinv.models)": [[82, "deepinv.models.DCGANGenerator", false]], "ddrm (class in deepinv.sampling)": [[249, "deepinv.sampling.DDRM", false]], "decolorize (class in deepinv.physics)": [[172, "deepinv.physics.Decolorize", false]], "decomposablephysics (class in deepinv.physics)": [[173, "deepinv.physics.DecomposablePhysics", false]], "deepimageprior (class in deepinv.models)": [[84, "deepinv.models.DeepImagePrior", false]], "demo_mri_model() (in module deepinv.utils.demo)": [[279, "deepinv.utils.demo.demo_mri_model", false]], "demosaicing (class in deepinv.physics)": [[174, "deepinv.physics.Demosaicing", false]], "denoiser (class in deepinv.models)": [[85, "deepinv.models.Denoiser", false]], "denoising (class in deepinv.physics)": [[175, "deepinv.physics.Denoising", false]], "deq_builder() (in module deepinv.unfolded)": [[274, "deepinv.unfolded.DEQ_builder", false]], "diffpir (class in deepinv.sampling)": [[251, "deepinv.sampling.DiffPIR", false]], "diffractionblurgenerator (class in deepinv.physics.generator)": [[233, "deepinv.physics.generator.DiffractionBlurGenerator", false]], "diffractionblurgenerator3d (class in deepinv.physics.generator)": [[234, "deepinv.physics.generator.DiffractionBlurGenerator3D", false]], "diffunet (class in deepinv.models)": [[86, "deepinv.models.DiffUNet", false]], "diffusionsampler (class in deepinv.sampling)": [[252, "deepinv.sampling.DiffusionSampler", false]], "dirac_like() (in module deepinv.utils)": [[280, "deepinv.utils.dirac_like", false]], "discriminatorloss (class in deepinv.loss.adversarial)": [[55, "deepinv.loss.adversarial.DiscriminatorLoss", false]], "discriminatormetric (class in deepinv.loss.adversarial)": [[56, "deepinv.loss.adversarial.DiscriminatorMetric", false]], "distance (class in deepinv.optim)": [[120, "deepinv.optim.Distance", false]], "div() (deepinv.optim.bregman method)": [[114, "deepinv.optim.Bregman.div", false]], "div() (deepinv.optim.bregmanl2 method)": [[115, "deepinv.optim.BregmanL2.div", false]], "div2k (class in deepinv.datasets)": [[14, "deepinv.datasets.DIV2K", false]], "dncnn (class in deepinv.models)": [[87, "deepinv.models.DnCNN", false]], "download() (deepinv.datasets.kohler class method)": [[19, "deepinv.datasets.Kohler.download", false]], "downsampling (class in deepinv.physics)": [[176, "deepinv.physics.Downsampling", false]], "dpir (class in deepinv.optim)": [[118, "deepinv.optim.DPIR", false]], "dps (class in deepinv.sampling)": [[250, "deepinv.sampling.DPS", false]], "drsiteration (class in deepinv.optim.optim_iterators)": [[151, "deepinv.optim.optim_iterators.DRSIteration", false]], "drunet (class in deepinv.models)": [[83, "deepinv.models.DRUNet", false]], "dst1() (in module deepinv.physics.functional)": [[223, "deepinv.physics.functional.dst1", false]], "dwt() (deepinv.models.waveletdenoiser method)": [[108, "deepinv.models.WaveletDenoiser.dwt", false]], "dynamicmri (class in deepinv.physics)": [[177, "deepinv.physics.DynamicMRI", false]], "eiloss (class in deepinv.loss)": [[33, "deepinv.loss.EILoss", false]], "epll (class in deepinv.optim)": [[121, "deepinv.optim.EPLL", false]], "eplldenoiser (class in deepinv.models)": [[88, "deepinv.models.EPLLDenoiser", false]], "epsilon() (deepinv.models.tgvdenoiser static method)": [[102, "deepinv.models.TGVDenoiser.epsilon", false]], "epsilon_adjoint() (deepinv.models.tgvdenoiser static method)": [[102, "deepinv.models.TGVDenoiser.epsilon_adjoint", false]], "equispacedmaskgenerator (class in deepinv.physics.generator)": [[235, "deepinv.physics.generator.EquispacedMaskGenerator", false]], "equivariantdenoiser (class in deepinv.models)": [[90, "deepinv.models.EquivariantDenoiser", false]], "ergas (class in deepinv.loss.metric)": [[63, "deepinv.loss.metric.ERGAS", false]], "esrgandiscriminator (class in deepinv.models)": [[89, "deepinv.models.ESRGANDiscriminator", false]], "euclidean (class in deepinv.transform.projective)": [[269, "deepinv.transform.projective.Euclidean", false]], "f_matern() (deepinv.physics.generator.motionblurgenerator method)": [[239, "deepinv.physics.generator.MotionBlurGenerator.f_matern", false]], "fastmrislicedataset (class in deepinv.datasets)": [[16, "deepinv.datasets.FastMRISliceDataset", false]], "fastmrislicedataset.slicesamplefileidentifier (class in deepinv.datasets)": [[16, "deepinv.datasets.FastMRISliceDataset.SliceSampleFileIdentifier", false]], "fft() (deepinv.physics.mrimixin static method)": [[186, "deepinv.physics.MRIMixin.fft", false]], "find_nearest() (deepinv.models.diffunet method)": [[86, "deepinv.models.DiffUNet.find_nearest", false]], "find_nearest() (deepinv.sampling.diffpir method)": [[251, "deepinv.sampling.DiffPIR.find_nearest", false]], "fistaiteration (class in deepinv.optim.optim_iterators)": [[152, "deepinv.optim.optim_iterators.FISTAIteration", false]], "fit() (deepinv.optim.utils.gaussianmixturemodel method)": [[162, "deepinv.optim.utils.GaussianMixtureModel.fit", false]], "fixedpoint (class in deepinv.optim)": [[122, "deepinv.optim.FixedPoint", false]], "flatten() (deepinv.physics.compressivespectralimaging method)": [[171, "deepinv.physics.CompressiveSpectralImaging.flatten", false]], "flatten() (deepinv.physics.timemixin static method)": [[206, "deepinv.physics.TimeMixin.flatten", false]], "flatten_c() (deepinv.physics.timemixin static method)": [[206, "deepinv.physics.TimeMixin.flatten_C", false]], "flatten_coeffs() (deepinv.models.waveletdenoiser method)": [[108, "deepinv.models.WaveletDenoiser.flatten_coeffs", false]], "flickr2khr (class in deepinv.datasets)": [[17, "deepinv.datasets.Flickr2kHR", false]], "fmd (class in deepinv.datasets)": [[15, "deepinv.datasets.FMD", false]], "fmd.noisysampleidentifier (class in deepinv.datasets)": [[15, "deepinv.datasets.FMD.NoisySampleIdentifier", false]], "fn() (deepinv.optim.amplitudelossdistance method)": [[112, "deepinv.optim.AmplitudeLossDistance.fn", false]], "fn() (deepinv.optim.bregman_icnn method)": [[116, "deepinv.optim.Bregman_ICNN.fn", false]], "fn() (deepinv.optim.bregmanl2 method)": [[115, "deepinv.optim.BregmanL2.fn", false]], "fn() (deepinv.optim.burgentropy method)": [[117, "deepinv.optim.BurgEntropy.fn", false]], "fn() (deepinv.optim.datafidelity method)": [[119, "deepinv.optim.DataFidelity.fn", false]], "fn() (deepinv.optim.distance method)": [[120, "deepinv.optim.Distance.fn", false]], "fn() (deepinv.optim.indicatorl2distance method)": [[124, "deepinv.optim.IndicatorL2Distance.fn", false]], "fn() (deepinv.optim.l12prior method)": [[126, "deepinv.optim.L12Prior.fn", false]], "fn() (deepinv.optim.l1distance method)": [[127, "deepinv.optim.L1Distance.fn", false]], "fn() (deepinv.optim.l1prior method)": [[128, "deepinv.optim.L1Prior.fn", false]], "fn() (deepinv.optim.l2distance method)": [[130, "deepinv.optim.L2Distance.fn", false]], "fn() (deepinv.optim.logpoissonlikelihooddistance method)": [[132, "deepinv.optim.LogPoissonLikelihoodDistance.fn", false]], "fn() (deepinv.optim.negentropy method)": [[133, "deepinv.optim.NegEntropy.fn", false]], "fn() (deepinv.optim.patchnr method)": [[135, "deepinv.optim.PatchNR.fn", false]], "fn() (deepinv.optim.patchprior method)": [[136, "deepinv.optim.PatchPrior.fn", false]], "fn() (deepinv.optim.poissonlikelihooddistance method)": [[139, "deepinv.optim.PoissonLikelihoodDistance.fn", false]], "fn() (deepinv.optim.potential method)": [[140, "deepinv.optim.Potential.fn", false]], "fn() (deepinv.optim.stackedphysicsdatafidelity method)": [[144, "deepinv.optim.StackedPhysicsDataFidelity.fn", false]], "fn() (deepinv.optim.tikhonov method)": [[146, "deepinv.optim.Tikhonov.fn", false]], "fn() (deepinv.optim.tvprior method)": [[145, "deepinv.optim.TVPrior.fn", false]], "fn() (deepinv.optim.waveletprior method)": [[147, "deepinv.optim.WaveletPrior.fn", false]], "fname (deepinv.datasets.fastmrislicedataset.slicesamplefileidentifier attribute)": [[16, "deepinv.datasets.FastMRISliceDataset.SliceSampleFileIdentifier.fname", false]], "fname (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[15, "deepinv.datasets.FMD.NoisySampleIdentifier.fname", false]], "fnejacobianspectralnorm (class in deepinv.loss)": [[34, "deepinv.loss.FNEJacobianSpectralNorm", false]], "forward() (deepinv.datasets.utils.rescale method)": [[29, "deepinv.datasets.utils.Rescale.forward", false]], "forward() (deepinv.datasets.utils.tocomplex method)": [[30, "deepinv.datasets.utils.ToComplex.forward", false]], "forward() (deepinv.loss.adversarial.discriminatorloss method)": [[55, "deepinv.loss.adversarial.DiscriminatorLoss.forward", false]], "forward() (deepinv.loss.adversarial.generatorloss method)": [[57, "deepinv.loss.adversarial.GeneratorLoss.forward", false]], "forward() (deepinv.loss.adversarial.supadversarialdiscriminatorloss method)": [[58, "deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss.forward", false]], "forward() (deepinv.loss.adversarial.supadversarialgeneratorloss method)": [[59, "deepinv.loss.adversarial.SupAdversarialGeneratorLoss.forward", false]], "forward() (deepinv.loss.adversarial.uairgeneratorloss method)": [[60, "deepinv.loss.adversarial.UAIRGeneratorLoss.forward", false]], "forward() (deepinv.loss.adversarial.unsupadversarialdiscriminatorloss method)": [[61, "deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss.forward", false]], "forward() (deepinv.loss.adversarial.unsupadversarialgeneratorloss method)": [[62, "deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss.forward", false]], "forward() (deepinv.loss.artifact2artifactloss method)": [[31, "deepinv.loss.Artifact2ArtifactLoss.forward", false]], "forward() (deepinv.loss.baselossscheduler method)": [[32, "deepinv.loss.BaseLossScheduler.forward", false]], "forward() (deepinv.loss.eiloss method)": [[33, "deepinv.loss.EILoss.forward", false]], "forward() (deepinv.loss.fnejacobianspectralnorm method)": [[34, "deepinv.loss.FNEJacobianSpectralNorm.forward", false]], "forward() (deepinv.loss.jacobianspectralnorm method)": [[37, "deepinv.loss.JacobianSpectralNorm.forward", false]], "forward() (deepinv.loss.loss method)": [[38, "deepinv.loss.Loss.forward", false]], "forward() (deepinv.loss.mcloss method)": [[39, "deepinv.loss.MCLoss.forward", false]], "forward() (deepinv.loss.metric.metric method)": [[69, "deepinv.loss.metric.Metric.forward", false]], "forward() (deepinv.loss.moeiloss method)": [[40, "deepinv.loss.MOEILoss.forward", false]], "forward() (deepinv.loss.moiloss method)": [[41, "deepinv.loss.MOILoss.forward", false]], "forward() (deepinv.loss.neighbor2neighbor method)": [[42, "deepinv.loss.Neighbor2Neighbor.forward", false]], "forward() (deepinv.loss.r2rloss method)": [[44, "deepinv.loss.R2RLoss.forward", false]], "forward() (deepinv.loss.scoreloss method)": [[46, "deepinv.loss.ScoreLoss.forward", false]], "forward() (deepinv.loss.scoreloss.scoremodel method)": [[46, "deepinv.loss.ScoreLoss.ScoreModel.forward", false]], "forward() (deepinv.loss.splittingloss method)": [[47, "deepinv.loss.SplittingLoss.forward", false]], "forward() (deepinv.loss.splittingloss.splittingmodel method)": [[47, "deepinv.loss.SplittingLoss.SplittingModel.forward", false]], "forward() (deepinv.loss.stackedphysicsloss method)": [[48, "deepinv.loss.StackedPhysicsLoss.forward", false]], "forward() (deepinv.loss.suploss method)": [[50, "deepinv.loss.SupLoss.forward", false]], "forward() (deepinv.loss.suregaussianloss method)": [[51, "deepinv.loss.SureGaussianLoss.forward", false]], "forward() (deepinv.loss.surepgloss method)": [[52, "deepinv.loss.SurePGLoss.forward", false]], "forward() (deepinv.loss.surepoissonloss method)": [[53, "deepinv.loss.SurePoissonLoss.forward", false]], "forward() (deepinv.loss.tvloss method)": [[54, "deepinv.loss.TVLoss.forward", false]], "forward() (deepinv.models.artifactremoval method)": [[76, "deepinv.models.ArtifactRemoval.forward", false]], "forward() (deepinv.models.autoencoder method)": [[77, "deepinv.models.AutoEncoder.forward", false]], "forward() (deepinv.models.bm3d method)": [[78, "deepinv.models.BM3D.forward", false]], "forward() (deepinv.models.convdecoder method)": [[80, "deepinv.models.ConvDecoder.forward", false]], "forward() (deepinv.models.csgmgenerator method)": [[79, "deepinv.models.CSGMGenerator.forward", false]], "forward() (deepinv.models.dcgandiscriminator method)": [[81, "deepinv.models.DCGANDiscriminator.forward", false]], "forward() (deepinv.models.dcgangenerator method)": [[82, "deepinv.models.DCGANGenerator.forward", false]], "forward() (deepinv.models.deepimageprior method)": [[84, "deepinv.models.DeepImagePrior.forward", false]], "forward() (deepinv.models.denoiser method)": [[85, "deepinv.models.Denoiser.forward", false]], "forward() (deepinv.models.diffunet method)": [[86, "deepinv.models.DiffUNet.forward", false]], "forward() (deepinv.models.dncnn method)": [[87, "deepinv.models.DnCNN.forward", false]], "forward() (deepinv.models.drunet method)": [[83, "deepinv.models.DRUNet.forward", false]], "forward() (deepinv.models.eplldenoiser method)": [[88, "deepinv.models.EPLLDenoiser.forward", false]], "forward() (deepinv.models.equivariantdenoiser method)": [[90, "deepinv.models.EquivariantDenoiser.forward", false]], "forward() (deepinv.models.esrgandiscriminator method)": [[89, "deepinv.models.ESRGANDiscriminator.forward", false]], "forward() (deepinv.models.icnn method)": [[92, "deepinv.models.ICNN.forward", false]], "forward() (deepinv.models.medianfilter method)": [[93, "deepinv.models.MedianFilter.forward", false]], "forward() (deepinv.models.pannet method)": [[96, "deepinv.models.PanNet.forward", false]], "forward() (deepinv.models.patchgandiscriminator method)": [[97, "deepinv.models.PatchGANDiscriminator.forward", false]], "forward() (deepinv.models.pdnet_dualblock method)": [[94, "deepinv.models.PDNet_DualBlock.forward", false]], "forward() (deepinv.models.pdnet_primalblock method)": [[95, "deepinv.models.PDNet_PrimalBlock.forward", false]], "forward() (deepinv.models.reconstructor method)": [[98, "deepinv.models.Reconstructor.forward", false]], "forward() (deepinv.models.restormer method)": [[99, "deepinv.models.Restormer.forward", false]], "forward() (deepinv.models.scunet method)": [[100, "deepinv.models.SCUNet.forward", false]], "forward() (deepinv.models.swinir method)": [[101, "deepinv.models.SwinIR.forward", false]], "forward() (deepinv.models.tgvdenoiser method)": [[102, "deepinv.models.TGVDenoiser.forward", false]], "forward() (deepinv.models.timeagnosticnet method)": [[104, "deepinv.models.TimeAgnosticNet.forward", false]], "forward() (deepinv.models.timeaveragingnet method)": [[105, "deepinv.models.TimeAveragingNet.forward", false]], "forward() (deepinv.models.tvdenoiser method)": [[103, "deepinv.models.TVDenoiser.forward", false]], "forward() (deepinv.models.unet method)": [[106, "deepinv.models.UNet.forward", false]], "forward() (deepinv.models.waveletdenoiser method)": [[108, "deepinv.models.WaveletDenoiser.forward", false]], "forward() (deepinv.models.waveletdictdenoiser method)": [[109, "deepinv.models.WaveletDictDenoiser.forward", false]], "forward() (deepinv.optim.baseoptim method)": [[113, "deepinv.optim.BaseOptim.forward", false]], "forward() (deepinv.optim.distance method)": [[120, "deepinv.optim.Distance.forward", false]], "forward() (deepinv.optim.epll method)": [[121, "deepinv.optim.EPLL.forward", false]], "forward() (deepinv.optim.fixedpoint method)": [[122, "deepinv.optim.FixedPoint.forward", false]], "forward() (deepinv.optim.optim_iterators.admmiteration method)": [[149, "deepinv.optim.optim_iterators.ADMMIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.cpiteration method)": [[150, "deepinv.optim.optim_iterators.CPIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.drsiteration method)": [[151, "deepinv.optim.optim_iterators.DRSIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.fistaiteration method)": [[152, "deepinv.optim.optim_iterators.FISTAIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.gditeration method)": [[153, "deepinv.optim.optim_iterators.GDIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.mditeration method)": [[155, "deepinv.optim.optim_iterators.MDIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.smiteration method)": [[157, "deepinv.optim.optim_iterators.SMIteration.forward", false]], "forward() (deepinv.optim.optimiterator method)": [[134, "deepinv.optim.OptimIterator.forward", false]], "forward() (deepinv.optim.potential method)": [[140, "deepinv.optim.Potential.forward", false]], "forward() (deepinv.optim.utils.gaussianmixturemodel method)": [[162, "deepinv.optim.utils.GaussianMixtureModel.forward", false]], "forward() (deepinv.physics.functional.iradon method)": [[215, "deepinv.physics.functional.IRadon.forward", false]], "forward() (deepinv.physics.functional.radon method)": [[216, "deepinv.physics.functional.Radon.forward", false]], "forward() (deepinv.physics.gammanoise method)": [[178, "deepinv.physics.GammaNoise.forward", false]], "forward() (deepinv.physics.gaussiannoise method)": [[179, "deepinv.physics.GaussianNoise.forward", false]], "forward() (deepinv.physics.logpoissonnoise method)": [[184, "deepinv.physics.LogPoissonNoise.forward", false]], "forward() (deepinv.physics.noisemodel method)": [[188, "deepinv.physics.NoiseModel.forward", false]], "forward() (deepinv.physics.phaseretrieval method)": [[190, "deepinv.physics.PhaseRetrieval.forward", false]], "forward() (deepinv.physics.physics method)": [[191, "deepinv.physics.Physics.forward", false]], "forward() (deepinv.physics.poissongaussiannoise method)": [[192, "deepinv.physics.PoissonGaussianNoise.forward", false]], "forward() (deepinv.physics.poissonnoise method)": [[193, "deepinv.physics.PoissonNoise.forward", false]], "forward() (deepinv.physics.uniformgaussiannoise method)": [[208, "deepinv.physics.UniformGaussianNoise.forward", false]], "forward() (deepinv.physics.uniformnoise method)": [[209, "deepinv.physics.UniformNoise.forward", false]], "forward() (deepinv.sampling.ddrm method)": [[249, "deepinv.sampling.DDRM.forward", false]], "forward() (deepinv.sampling.diffpir method)": [[251, "deepinv.sampling.DiffPIR.forward", false]], "forward() (deepinv.sampling.dps method)": [[250, "deepinv.sampling.DPS.forward", false]], "forward() (deepinv.sampling.montecarlo method)": [[253, "deepinv.sampling.MonteCarlo.forward", false]], "forward() (deepinv.transform.transform method)": [[267, "deepinv.transform.Transform.forward", false]], "forward() (deepinv.unfolded.basedeq method)": [[272, "deepinv.unfolded.BaseDEQ.forward", false]], "forward() (deepinv.unfolded.baseunfold method)": [[273, "deepinv.unfolded.BaseUnfold.forward", false]], "forward_denoise() (deepinv.models.diffunet method)": [[86, "deepinv.models.DiffUNet.forward_denoise", false]], "forward_diffusion() (deepinv.models.diffunet method)": [[86, "deepinv.models.DiffUNet.forward_diffusion", false]], "forward_restormer() (deepinv.models.restormer method)": [[99, "deepinv.models.Restormer.forward_restormer", false]], "fov (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[15, "deepinv.datasets.FMD.NoisySampleIdentifier.fov", false]], "from_torch_complex() (deepinv.physics.mrimixin static method)": [[186, "deepinv.physics.MRIMixin.from_torch_complex", false]], "fstep (class in deepinv.optim.optim_iterators)": [[158, "deepinv.optim.optim_iterators.fStep", false]], "gammanoise (class in deepinv.physics)": [[178, "deepinv.physics.GammaNoise", false]], "gaussian_blur() (in module deepinv.physics.blur)": [[213, "deepinv.physics.blur.gaussian_blur", false]], "gaussianmaskgenerator (class in deepinv.physics.generator)": [[236, "deepinv.physics.generator.GaussianMaskGenerator", false]], "gaussianmixturemodel (class in deepinv.optim.utils)": [[162, "deepinv.optim.utils.GaussianMixtureModel", false]], "gaussiannoise (class in deepinv.physics)": [[179, "deepinv.physics.GaussianNoise", false]], "gaussiansplittingmaskgenerator (class in deepinv.physics.generator)": [[237, "deepinv.physics.generator.GaussianSplittingMaskGenerator", false]], "gditeration (class in deepinv.optim.optim_iterators)": [[153, "deepinv.optim.optim_iterators.GDIteration", false]], "generate_coeff() (deepinv.physics.generator.diffractionblurgenerator method)": [[233, "deepinv.physics.generator.DiffractionBlurGenerator.generate_coeff", false]], "generate_dataset() (in module deepinv.datasets)": [[27, "deepinv.datasets.generate_dataset", false]], "generate_shifts() (in module deepinv.physics.phase_retrieval)": [[247, "deepinv.physics.phase_retrieval.generate_shifts", false]], "generatorloss (class in deepinv.loss.adversarial)": [[57, "deepinv.loss.adversarial.GeneratorLoss", false]], "generatormixture (class in deepinv.physics.generator)": [[238, "deepinv.physics.generator.GeneratorMixture", false]], "get_alpha_beta() (deepinv.sampling.diffpir method)": [[251, "deepinv.sampling.DiffPIR.get_alpha_beta", false]], "get_alpha_prod() (deepinv.models.diffunet method)": [[86, "deepinv.models.DiffUNet.get_alpha_prod", false]], "get_alpha_prod() (deepinv.sampling.diffpir method)": [[251, "deepinv.sampling.DiffPIR.get_alpha_prod", false]], "get_chain() (deepinv.sampling.montecarlo method)": [[253, "deepinv.sampling.MonteCarlo.get_chain", false]], "get_cov() (deepinv.optim.utils.gaussianmixturemodel method)": [[162, "deepinv.optim.utils.GaussianMixtureModel.get_cov", false]], "get_cov_inv_reg() (deepinv.optim.utils.gaussianmixturemodel method)": [[162, "deepinv.optim.utils.GaussianMixtureModel.get_cov_inv_reg", false]], "get_data_home() (in module deepinv.utils)": [[281, "deepinv.utils.get_data_home", false]], "get_degradation_url() (in module deepinv.utils)": [[282, "deepinv.utils.get_degradation_url", false]], "get_freer_gpu() (in module deepinv.utils)": [[283, "deepinv.utils.get_freer_gpu", false]], "get_image_url() (in module deepinv.utils)": [[284, "deepinv.utils.get_image_url", false]], "get_item() (deepinv.datasets.kohler method)": [[19, "deepinv.datasets.Kohler.get_item", false]], "get_noise_schedule() (deepinv.sampling.diffpir method)": [[251, "deepinv.sampling.DiffPIR.get_noise_schedule", false]], "get_overlap_img() (deepinv.physics.ptychographylinearoperator method)": [[195, "deepinv.physics.PtychographyLinearOperator.get_overlap_img", false]], "get_params() (deepinv.transform.transform method)": [[267, "deepinv.transform.Transform.get_params", false]], "get_pdf() (deepinv.physics.generator.gaussianmaskgenerator method)": [[236, "deepinv.physics.generator.GaussianMaskGenerator.get_pdf", false]], "get_pdf() (deepinv.physics.generator.randommaskgenerator method)": [[244, "deepinv.physics.generator.RandomMaskGenerator.get_pdf", false]], "get_samples() (deepinv.trainer method)": [[12, "deepinv.Trainer.get_samples", false]], "get_samples_offline() (deepinv.trainer method)": [[12, "deepinv.Trainer.get_samples_offline", false]], "get_samples_online() (deepinv.trainer method)": [[12, "deepinv.Trainer.get_samples_online", false]], "get_structure() (deepinv.physics.structuredrandomphaseretrieval static method)": [[205, "deepinv.physics.StructuredRandomPhaseRetrieval.get_structure", false]], "get_timestamp (class in deepinv.utils)": [[285, "deepinv.utils.get_timestamp", false]], "get_weights() (deepinv.optim.utils.gaussianmixturemodel method)": [[162, "deepinv.optim.utils.GaussianMixtureModel.get_weights", false]], "grad() (deepinv.models.icnn method)": [[92, "deepinv.models.ICNN.grad", false]], "grad() (deepinv.optim.amplitudelossdistance method)": [[112, "deepinv.optim.AmplitudeLossDistance.grad", false]], "grad() (deepinv.optim.bregmanl2 method)": [[115, "deepinv.optim.BregmanL2.grad", false]], "grad() (deepinv.optim.burgentropy method)": [[117, "deepinv.optim.BurgEntropy.grad", false]], "grad() (deepinv.optim.datafidelity method)": [[119, "deepinv.optim.DataFidelity.grad", false]], "grad() (deepinv.optim.l1distance method)": [[127, "deepinv.optim.L1Distance.grad", false]], "grad() (deepinv.optim.l2distance method)": [[130, "deepinv.optim.L2Distance.grad", false]], "grad() (deepinv.optim.negentropy method)": [[133, "deepinv.optim.NegEntropy.grad", false]], "grad() (deepinv.optim.poissonlikelihooddistance method)": [[139, "deepinv.optim.PoissonLikelihoodDistance.grad", false]], "grad() (deepinv.optim.potential method)": [[140, "deepinv.optim.Potential.grad", false]], "grad() (deepinv.optim.red method)": [[142, "deepinv.optim.RED.grad", false]], "grad() (deepinv.optim.scoreprior method)": [[143, "deepinv.optim.ScorePrior.grad", false]], "grad() (deepinv.optim.stackedphysicsdatafidelity method)": [[144, "deepinv.optim.StackedPhysicsDataFidelity.grad", false]], "grad() (deepinv.optim.tikhonov method)": [[146, "deepinv.optim.Tikhonov.grad", false]], "grad_conj() (deepinv.optim.bregmanl2 method)": [[115, "deepinv.optim.BregmanL2.grad_conj", false]], "grad_conj() (deepinv.optim.burgentropy method)": [[117, "deepinv.optim.BurgEntropy.grad_conj", false]], "grad_conj() (deepinv.optim.negentropy method)": [[133, "deepinv.optim.NegEntropy.grad_conj", false]], "grad_conj() (deepinv.optim.potential method)": [[140, "deepinv.optim.Potential.grad_conj", false]], "grad_d() (deepinv.optim.datafidelity method)": [[119, "deepinv.optim.DataFidelity.grad_d", false]], "grad_d() (deepinv.optim.stackedphysicsdatafidelity method)": [[144, "deepinv.optim.StackedPhysicsDataFidelity.grad_d", false]], "gradient_descent() (in module deepinv.optim.utils)": [[165, "deepinv.optim.utils.gradient_descent", false]], "gsdrunet (class in deepinv.models)": [[91, "deepinv.models.GSDRUNet", false]], "gstep (class in deepinv.optim.optim_iterators)": [[159, "deepinv.optim.optim_iterators.gStep", false]], "hard_threshold_topk() (deepinv.models.waveletdenoiser method)": [[108, "deepinv.models.WaveletDenoiser.hard_threshold_topk", false]], "haze (class in deepinv.physics)": [[180, "deepinv.physics.Haze", false]], "hdf5dataset (class in deepinv.datasets)": [[18, "deepinv.datasets.HDF5Dataset", false]], "histogram() (in module deepinv.physics.functional)": [[224, "deepinv.physics.functional.histogram", false]], "histogramdd() (in module deepinv.physics.functional)": [[225, "deepinv.physics.functional.histogramdd", false]], "homography (class in deepinv.transform)": [[261, "deepinv.transform.Homography", false]], "hqsiteration (class in deepinv.optim.optim_iterators)": [[154, "deepinv.optim.optim_iterators.HQSIteration", false]], "hyperspectralunmixing (class in deepinv.physics)": [[181, "deepinv.physics.HyperSpectralUnmixing", false]], "icnn (class in deepinv.models)": [[92, "deepinv.models.ICNN", false]], "identity() (deepinv.transform.transform method)": [[267, "deepinv.transform.Transform.identity", false]], "ifft() (deepinv.physics.mrimixin static method)": [[186, "deepinv.physics.MRIMixin.ifft", false]], "im_to_kspace() (deepinv.physics.mrimixin method)": [[186, "deepinv.physics.MRIMixin.im_to_kspace", false]], "img_type (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[15, "deepinv.datasets.FMD.NoisySampleIdentifier.img_type", false]], "indicatorl2 (class in deepinv.optim)": [[123, "deepinv.optim.IndicatorL2", false]], "indicatorl2distance (class in deepinv.optim)": [[124, "deepinv.optim.IndicatorL2Distance", false]], "init_anderson_acceleration() (deepinv.optim.fixedpoint method)": [[122, "deepinv.optim.FixedPoint.init_anderson_acceleration", false]], "init_iterate_fn() (deepinv.optim.baseoptim method)": [[113, "deepinv.optim.BaseOptim.init_iterate_fn", false]], "init_metrics_fn() (deepinv.optim.baseoptim method)": [[113, "deepinv.optim.BaseOptim.init_metrics_fn", false]], "inpainting (class in deepinv.physics)": [[182, "deepinv.physics.Inpainting", false]], "interleavedepochlossscheduler (class in deepinv.loss)": [[35, "deepinv.loss.InterleavedEpochLossScheduler", false]], "interleavedlossscheduler (class in deepinv.loss)": [[36, "deepinv.loss.InterleavedLossScheduler", false]], "inverse() (deepinv.transform.transform method)": [[267, "deepinv.transform.Transform.inverse", false]], "invert_metric() (deepinv.loss.metric.metric method)": [[69, "deepinv.loss.metric.Metric.invert_metric", false]], "invert_metric() (deepinv.loss.metric.qnr method)": [[73, "deepinv.loss.metric.QNR.invert_metric", false]], "invert_metric() (deepinv.loss.metric.ssim method)": [[74, "deepinv.loss.metric.SSIM.invert_metric", false]], "invert_params() (deepinv.transform.transform method)": [[267, "deepinv.transform.Transform.invert_params", false]], "iradon (class in deepinv.physics.functional)": [[215, "deepinv.physics.functional.IRadon", false]], "is_standard_deblurring_network() (deepinv.models.restormer method)": [[99, "deepinv.models.Restormer.is_standard_deblurring_network", false]], "is_standard_denoising_network() (deepinv.models.restormer method)": [[99, "deepinv.models.Restormer.is_standard_denoising_network", false]], "is_standard_deraining_network() (deepinv.models.restormer method)": [[99, "deepinv.models.Restormer.is_standard_deraining_network", false]], "iwt() (deepinv.models.waveletdenoiser method)": [[108, "deepinv.models.WaveletDenoiser.iwt", false]], "jacobianspectralnorm (class in deepinv.loss)": [[37, "deepinv.loss.JacobianSpectralNorm", false]], "kohler (class in deepinv.datasets)": [[19, "deepinv.datasets.Kohler", false]], "kspace_to_im() (deepinv.physics.mrimixin method)": [[186, "deepinv.physics.MRIMixin.kspace_to_im", false]], "l1 (class in deepinv.optim)": [[125, "deepinv.optim.L1", false]], "l12prior (class in deepinv.optim)": [[126, "deepinv.optim.L12Prior", false]], "l1distance (class in deepinv.optim)": [[127, "deepinv.optim.L1Distance", false]], "l1l2 (class in deepinv.loss.metric)": [[64, "deepinv.loss.metric.L1L2", false]], "l1prior (class in deepinv.optim)": [[128, "deepinv.optim.L1Prior", false]], "l2 (class in deepinv.optim)": [[129, "deepinv.optim.L2", false]], "l2distance (class in deepinv.optim)": [[130, "deepinv.optim.L2Distance", false]], "least_squares() (in module deepinv.optim.utils)": [[166, "deepinv.optim.utils.least_squares", false]], "lidcidrislicedataset (class in deepinv.datasets)": [[20, "deepinv.datasets.LidcIdriSliceDataset", false]], "lidcidrislicedataset.slicesampleidentifier (class in deepinv.datasets)": [[20, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier", false]], "linearphysics (class in deepinv.physics)": [[183, "deepinv.physics.LinearPhysics", false]], "load_dataset() (in module deepinv.utils)": [[286, "deepinv.utils.load_dataset", false]], "load_degradation() (in module deepinv.utils)": [[287, "deepinv.utils.load_degradation", false]], "load_image() (in module deepinv.utils)": [[288, "deepinv.utils.load_image", false]], "load_model() (deepinv.trainer method)": [[12, "deepinv.Trainer.load_model", false]], "load_state_dict() (deepinv.optim.utils.gaussianmixturemodel method)": [[162, "deepinv.optim.utils.GaussianMixtureModel.load_state_dict", false]], "load_state_dict() (deepinv.training.adversarialoptimizer method)": [[258, "deepinv.training.AdversarialOptimizer.load_state_dict", false]], "load_url_image() (in module deepinv.utils)": [[289, "deepinv.utils.load_url_image", false]], "log_metrics_wandb() (deepinv.trainer method)": [[12, "deepinv.Trainer.log_metrics_wandb", false]], "logpoissonlikelihood (class in deepinv.optim)": [[131, "deepinv.optim.LogPoissonLikelihood", false]], "logpoissonlikelihooddistance (class in deepinv.optim)": [[132, "deepinv.optim.LogPoissonLikelihoodDistance", false]], "logpoissonnoise (class in deepinv.physics)": [[184, "deepinv.physics.LogPoissonNoise", false]], "loss (class in deepinv.loss)": [[38, "deepinv.loss.Loss", false]], "lpips (class in deepinv.loss.metric)": [[65, "deepinv.loss.metric.LPIPS", false]], "lpnorm (class in deepinv.loss.metric)": [[66, "deepinv.loss.metric.LpNorm", false]], "lsdirhr (class in deepinv.datasets)": [[21, "deepinv.datasets.LsdirHR", false]], "lsqr() (in module deepinv.optim.utils)": [[167, "deepinv.optim.utils.lsqr", false]], "mae (class in deepinv.loss.metric)": [[67, "deepinv.loss.metric.MAE", false]], "matern_kernel() (deepinv.physics.generator.motionblurgenerator method)": [[239, "deepinv.physics.generator.MotionBlurGenerator.matern_kernel", false]], "mcloss (class in deepinv.loss)": [[39, "deepinv.loss.MCLoss", false]], "md_step() (deepinv.optim.bregman method)": [[114, "deepinv.optim.Bregman.MD_step", false]], "mditeration (class in deepinv.optim.optim_iterators)": [[155, "deepinv.optim.optim_iterators.MDIteration", false]], "mean_has_converged() (deepinv.sampling.montecarlo method)": [[253, "deepinv.sampling.MonteCarlo.mean_has_converged", false]], "medianfilter (class in deepinv.models)": [[93, "deepinv.models.MedianFilter", false]], "metric (class in deepinv.loss.metric)": [[69, "deepinv.loss.metric.Metric", false]], "metric() (deepinv.loss.metric.l1l2 method)": [[64, "deepinv.loss.metric.L1L2.metric", false]], "metric() (deepinv.loss.metric.lpips method)": [[65, "deepinv.loss.metric.LPIPS.metric", false]], "metric() (deepinv.loss.metric.lpnorm method)": [[66, "deepinv.loss.metric.LpNorm.metric", false]], "metric() (deepinv.loss.metric.mae method)": [[67, "deepinv.loss.metric.MAE.metric", false]], "metric() (deepinv.loss.metric.metric method)": [[69, "deepinv.loss.metric.Metric.metric", false]], "metric() (deepinv.loss.metric.mse method)": [[68, "deepinv.loss.metric.MSE.metric", false]], "metric() (deepinv.loss.metric.niqe method)": [[70, "deepinv.loss.metric.NIQE.metric", false]], "metric() (deepinv.loss.metric.nmse method)": [[71, "deepinv.loss.metric.NMSE.metric", false]], "metric() (deepinv.loss.metric.psnr method)": [[72, "deepinv.loss.metric.PSNR.metric", false]], "metric() (deepinv.loss.metric.qnr method)": [[73, "deepinv.loss.metric.QNR.metric", false]], "metric() (deepinv.loss.metric.spectralanglemapper method)": [[75, "deepinv.loss.metric.SpectralAngleMapper.metric", false]], "metric() (deepinv.loss.metric.ssim method)": [[74, "deepinv.loss.metric.SSIM.metric", false]], "model_inference() (deepinv.trainer method)": [[12, "deepinv.Trainer.model_inference", false]], "moeiloss (class in deepinv.loss)": [[40, "deepinv.loss.MOEILoss", false]], "moiloss (class in deepinv.loss)": [[41, "deepinv.loss.MOILoss", false]], "montecarlo (class in deepinv.sampling)": [[253, "deepinv.sampling.MonteCarlo", false]], "motionblurgenerator (class in deepinv.physics.generator)": [[239, "deepinv.physics.generator.MotionBlurGenerator", false]], "mri (class in deepinv.physics)": [[185, "deepinv.physics.MRI", false]], "mrimixin (class in deepinv.physics)": [[186, "deepinv.physics.MRIMixin", false]], "mse (class in deepinv.loss.metric)": [[68, "deepinv.loss.metric.MSE", false]], "multicoilmri (class in deepinv.physics)": [[187, "deepinv.physics.MultiCoilMRI", false]], "multiplier() (in module deepinv.physics.functional)": [[226, "deepinv.physics.functional.multiplier", false]], "multiplier_adjoint() (in module deepinv.physics.functional)": [[227, "deepinv.physics.functional.multiplier_adjoint", false]], "nabla() (deepinv.models.tgvdenoiser static method)": [[102, "deepinv.models.TGVDenoiser.nabla", false]], "nabla() (deepinv.models.tvdenoiser static method)": [[103, "deepinv.models.TVDenoiser.nabla", false]], "nabla() (deepinv.optim.tvprior method)": [[145, "deepinv.optim.TVPrior.nabla", false]], "nabla_adjoint() (deepinv.models.tgvdenoiser static method)": [[102, "deepinv.models.TGVDenoiser.nabla_adjoint", false]], "nabla_adjoint() (deepinv.models.tvdenoiser static method)": [[103, "deepinv.models.TVDenoiser.nabla_adjoint", false]], "nabla_adjoint() (deepinv.optim.tvprior method)": [[145, "deepinv.optim.TVPrior.nabla_adjoint", false]], "nbudataset (class in deepinv.datasets)": [[22, "deepinv.datasets.NBUDataset", false]], "negative_log_likelihood() (deepinv.optim.epll method)": [[121, "deepinv.optim.EPLL.negative_log_likelihood", false]], "negentropy (class in deepinv.optim)": [[133, "deepinv.optim.NegEntropy", false]], "neighbor2neighbor (class in deepinv.loss)": [[42, "deepinv.loss.Neighbor2Neighbor", false]], "next_physics() (deepinv.loss.moiloss method)": [[41, "deepinv.loss.MOILoss.next_physics", false]], "niqe (class in deepinv.loss.metric)": [[70, "deepinv.loss.metric.NIQE", false]], "nmse (class in deepinv.loss.metric)": [[71, "deepinv.loss.metric.NMSE", false]], "no_learning_inference() (deepinv.trainer method)": [[12, "deepinv.Trainer.no_learning_inference", false]], "noise() (deepinv.physics.dynamicmri method)": [[177, "deepinv.physics.DynamicMRI.noise", false]], "noise() (deepinv.physics.inpainting method)": [[182, "deepinv.physics.Inpainting.noise", false]], "noise() (deepinv.physics.physics method)": [[191, "deepinv.physics.Physics.noise", false]], "noise() (deepinv.physics.stackedphysics method)": [[203, "deepinv.physics.StackedPhysics.noise", false]], "noise_dirname (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[15, "deepinv.datasets.FMD.NoisySampleIdentifier.noise_dirname", false]], "noisemodel (class in deepinv.physics)": [[188, "deepinv.physics.NoiseModel", false]], "ones_like() (in module deepinv.utils)": [[290, "deepinv.utils.ones_like", false]], "optim_builder() (in module deepinv.optim)": [[148, "deepinv.optim.optim_builder", false]], "optimiterator (class in deepinv.optim)": [[134, "deepinv.optim.OptimIterator", false]], "optimize_z() (deepinv.models.csgmgenerator method)": [[79, "deepinv.models.CSGMGenerator.optimize_z", false]], "pad() (deepinv.physics.compressivespectralimaging method)": [[171, "deepinv.physics.CompressiveSpectralImaging.pad", false]], "pad_input() (deepinv.models.waveletdenoiser method)": [[108, "deepinv.models.WaveletDenoiser.pad_input", false]], "pannet (class in deepinv.models)": [[96, "deepinv.models.PanNet", false]], "pansharpen (class in deepinv.physics)": [[189, "deepinv.physics.Pansharpen", false]], "pantiltrotate (class in deepinv.transform.projective)": [[270, "deepinv.transform.projective.PanTiltRotate", false]], "patchdataset (class in deepinv.datasets)": [[23, "deepinv.datasets.PatchDataset", false]], "patchgandiscriminator (class in deepinv.models)": [[97, "deepinv.models.PatchGANDiscriminator", false]], "patchnr (class in deepinv.optim)": [[135, "deepinv.optim.PatchNR", false]], "patchprior (class in deepinv.optim)": [[136, "deepinv.optim.PatchPrior", false]], "patient_id (deepinv.datasets.lidcidrislicedataset.slicesampleidentifier attribute)": [[20, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier.patient_id", false]], "pdnet_dualblock (class in deepinv.models)": [[94, "deepinv.models.PDNet_DualBlock", false]], "pdnet_primalblock (class in deepinv.models)": [[95, "deepinv.models.PDNet_PrimalBlock", false]], "pgditeration (class in deepinv.optim.optim_iterators)": [[156, "deepinv.optim.optim_iterators.PGDIteration", false]], "phase2phaseloss (class in deepinv.loss)": [[43, "deepinv.loss.Phase2PhaseLoss", false]], "phase2phasesplittingmaskgenerator (class in deepinv.physics.generator)": [[241, "deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator", false]], "phaseretrieval (class in deepinv.physics)": [[190, "deepinv.physics.PhaseRetrieval", false]], "physics (class in deepinv.physics)": [[191, "deepinv.physics.Physics", false]], "physicsgenerator (class in deepinv.physics.generator)": [[242, "deepinv.physics.generator.PhysicsGenerator", false]], "placeholderdataset (class in deepinv.datasets.utils)": [[28, "deepinv.datasets.utils.PlaceholderDataset", false]], "plot() (deepinv.trainer method)": [[12, "deepinv.Trainer.plot", false]], "plot() (in module deepinv.utils)": [[291, "deepinv.utils.plot", false]], "plot_curves() (in module deepinv.utils)": [[292, "deepinv.utils.plot_curves", false]], "plot_inset() (in module deepinv.utils)": [[293, "deepinv.utils.plot_inset", false]], "plot_ortho3d() (in module deepinv.utils)": [[294, "deepinv.utils.plot_ortho3D", false]], "plot_parameters() (in module deepinv.utils)": [[295, "deepinv.utils.plot_parameters", false]], "plot_videos() (in module deepinv.utils)": [[296, "deepinv.utils.plot_videos", false]], "pnp (class in deepinv.optim)": [[137, "deepinv.optim.PnP", false]], "poissongaussiannoise (class in deepinv.physics)": [[192, "deepinv.physics.PoissonGaussianNoise", false]], "poissonlikelihood (class in deepinv.optim)": [[138, "deepinv.optim.PoissonLikelihood", false]], "poissonlikelihooddistance (class in deepinv.optim)": [[139, "deepinv.optim.PoissonLikelihoodDistance", false]], "poissonnoise (class in deepinv.physics)": [[193, "deepinv.physics.PoissonNoise", false]], "potential (class in deepinv.optim)": [[140, "deepinv.optim.Potential", false]], "prior (class in deepinv.optim)": [[141, "deepinv.optim.Prior", false]], "product_convolution2d() (in module deepinv.physics.functional)": [[228, "deepinv.physics.functional.product_convolution2d", false]], "productconvolutionblurgenerator (class in deepinv.physics.generator)": [[243, "deepinv.physics.generator.ProductConvolutionBlurGenerator", false]], "progressmeter (class in deepinv.utils)": [[277, "deepinv.utils.ProgressMeter", false]], "prox() (deepinv.optim.indicatorl2 method)": [[123, "deepinv.optim.IndicatorL2.prox", false]], "prox() (deepinv.optim.indicatorl2distance method)": [[124, "deepinv.optim.IndicatorL2Distance.prox", false]], "prox() (deepinv.optim.l1 method)": [[125, "deepinv.optim.L1.prox", false]], "prox() (deepinv.optim.l12prior method)": [[126, "deepinv.optim.L12Prior.prox", false]], "prox() (deepinv.optim.l1distance method)": [[127, "deepinv.optim.L1Distance.prox", false]], "prox() (deepinv.optim.l1prior method)": [[128, "deepinv.optim.L1Prior.prox", false]], "prox() (deepinv.optim.l2 method)": [[129, "deepinv.optim.L2.prox", false]], "prox() (deepinv.optim.l2distance method)": [[130, "deepinv.optim.L2Distance.prox", false]], "prox() (deepinv.optim.pnp method)": [[137, "deepinv.optim.PnP.prox", false]], "prox() (deepinv.optim.poissonlikelihooddistance method)": [[139, "deepinv.optim.PoissonLikelihoodDistance.prox", false]], "prox() (deepinv.optim.potential method)": [[140, "deepinv.optim.Potential.prox", false]], "prox() (deepinv.optim.tikhonov method)": [[146, "deepinv.optim.Tikhonov.prox", false]], "prox() (deepinv.optim.tvprior method)": [[145, "deepinv.optim.TVPrior.prox", false]], "prox() (deepinv.optim.waveletprior method)": [[147, "deepinv.optim.WaveletPrior.prox", false]], "prox_conjugate() (deepinv.optim.potential method)": [[140, "deepinv.optim.Potential.prox_conjugate", false]], "prox_d() (deepinv.optim.datafidelity method)": [[119, "deepinv.optim.DataFidelity.prox_d", false]], "prox_d() (deepinv.optim.stackedphysicsdatafidelity method)": [[144, "deepinv.optim.StackedPhysicsDataFidelity.prox_d", false]], "prox_d_conjugate() (deepinv.optim.datafidelity method)": [[119, "deepinv.optim.DataFidelity.prox_d_conjugate", false]], "prox_d_conjugate() (deepinv.optim.stackedphysicsdatafidelity method)": [[144, "deepinv.optim.StackedPhysicsDataFidelity.prox_d_conjugate", false]], "prox_l0() (deepinv.models.waveletdenoiser method)": [[108, "deepinv.models.WaveletDenoiser.prox_l0", false]], "prox_l1() (deepinv.models.waveletdenoiser method)": [[108, "deepinv.models.WaveletDenoiser.prox_l1", false]], "prox_l2() (deepinv.physics.decomposablephysics method)": [[173, "deepinv.physics.DecomposablePhysics.prox_l2", false]], "prox_l2() (deepinv.physics.downsampling method)": [[176, "deepinv.physics.Downsampling.prox_l2", false]], "prox_l2() (deepinv.physics.linearphysics method)": [[183, "deepinv.physics.LinearPhysics.prox_l2", false]], "prox_tau_fx() (deepinv.models.tvdenoiser method)": [[103, "deepinv.models.TVDenoiser.prox_tau_fx", false]], "psfgenerator (class in deepinv.physics.generator)": [[240, "deepinv.physics.generator.PSFGenerator", false]], "psi() (deepinv.models.waveletdenoiser static method)": [[108, "deepinv.models.WaveletDenoiser.psi", false]], "psi() (deepinv.models.waveletdictdenoiser method)": [[109, "deepinv.models.WaveletDictDenoiser.psi", false]], "psi() (deepinv.optim.waveletprior method)": [[147, "deepinv.optim.WaveletPrior.psi", false]], "psnr (class in deepinv.loss.metric)": [[72, "deepinv.loss.metric.PSNR", false]], "ptychography (class in deepinv.physics)": [[194, "deepinv.physics.Ptychography", false]], "ptychographylinearoperator (class in deepinv.physics)": [[195, "deepinv.physics.PtychographyLinearOperator", false]], "qnr (class in deepinv.loss.metric)": [[73, "deepinv.loss.metric.QNR", false]], "r2rloss (class in deepinv.loss)": [[44, "deepinv.loss.R2RLoss", false]], "radiointerferometry (class in deepinv.physics)": [[196, "deepinv.physics.RadioInterferometry", false]], "radon (class in deepinv.physics.functional)": [[216, "deepinv.physics.functional.Radon", false]], "rand_like() (deepinv.physics.noisemodel method)": [[188, "deepinv.physics.NoiseModel.rand_like", false]], "rand_like() (in module deepinv.utils)": [[297, "deepinv.utils.rand_like", false]], "randn_like() (deepinv.physics.noisemodel method)": [[188, "deepinv.physics.NoiseModel.randn_like", false]], "randn_like() (in module deepinv.utils)": [[298, "deepinv.utils.randn_like", false]], "random_latent() (deepinv.models.csgmgenerator method)": [[79, "deepinv.models.CSGMGenerator.random_latent", false]], "randomlossscheduler (class in deepinv.loss)": [[45, "deepinv.loss.RandomLossScheduler", false]], "randommaskgenerator (class in deepinv.physics.generator)": [[244, "deepinv.physics.generator.RandomMaskGenerator", false]], "randomphaseretrieval (class in deepinv.physics)": [[197, "deepinv.physics.RandomPhaseRetrieval", false]], "reconstructor (class in deepinv.models)": [[98, "deepinv.models.Reconstructor", false]], "red (class in deepinv.optim)": [[142, "deepinv.optim.RED", false]], "reflect (class in deepinv.transform)": [[262, "deepinv.transform.Reflect", false]], "relaxation_step() (deepinv.optim.optimiterator method)": [[134, "deepinv.optim.OptimIterator.relaxation_step", false]], "repeat() (deepinv.physics.timemixin static method)": [[206, "deepinv.physics.TimeMixin.repeat", false]], "rescale (class in deepinv.datasets.utils)": [[29, "deepinv.datasets.utils.Rescale", false]], "reset() (deepinv.sampling.montecarlo method)": [[253, "deepinv.sampling.MonteCarlo.reset", false]], "reset() (deepinv.utils.averagemeter method)": [[276, "deepinv.utils.AverageMeter.reset", false]], "reset_metrics() (deepinv.trainer method)": [[12, "deepinv.Trainer.reset_metrics", false]], "reset_rng() (deepinv.physics.generator.physicsgenerator method)": [[242, "deepinv.physics.generator.PhysicsGenerator.reset_rng", false]], "reset_rng() (deepinv.physics.noisemodel method)": [[188, "deepinv.physics.NoiseModel.reset_rng", false]], "reshape_ths() (deepinv.models.waveletdenoiser method)": [[108, "deepinv.models.WaveletDenoiser.reshape_ths", false]], "restormer (class in deepinv.models)": [[99, "deepinv.models.Restormer", false]], "rng_manual_seed() (deepinv.physics.generator.physicsgenerator method)": [[242, "deepinv.physics.generator.PhysicsGenerator.rng_manual_seed", false]], "rng_manual_seed() (deepinv.physics.noisemodel method)": [[188, "deepinv.physics.NoiseModel.rng_manual_seed", false]], "roll_reflect_1d() (deepinv.transform.shifttime method)": [[266, "deepinv.transform.ShiftTime.roll_reflect_1d", false]], "rotate (class in deepinv.transform)": [[263, "deepinv.transform.Rotate", false]], "rss() (deepinv.physics.mrimixin static method)": [[186, "deepinv.physics.MRIMixin.rss", false]], "sample_mask() (deepinv.physics.generator.basemaskgenerator method)": [[230, "deepinv.physics.generator.BaseMaskGenerator.sample_mask", false]], "sample_mask() (deepinv.physics.generator.equispacedmaskgenerator method)": [[235, "deepinv.physics.generator.EquispacedMaskGenerator.sample_mask", false]], "sample_mask() (deepinv.physics.generator.randommaskgenerator method)": [[244, "deepinv.physics.generator.RandomMaskGenerator.sample_mask", false]], "save_model() (deepinv.trainer method)": [[12, "deepinv.Trainer.save_model", false]], "save_model() (deepinv.training.adversarialtrainer method)": [[259, "deepinv.training.AdversarialTrainer.save_model", false]], "save_simple_dataset() (deepinv.datasets.fastmrislicedataset method)": [[16, "deepinv.datasets.FastMRISliceDataset.save_simple_dataset", false]], "scale (class in deepinv.transform)": [[264, "deepinv.transform.Scale", false]], "scan_folder (deepinv.datasets.lidcidrislicedataset.slicesampleidentifier attribute)": [[20, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier.scan_folder", false]], "schedule() (deepinv.loss.baselossscheduler method)": [[32, "deepinv.loss.BaseLossScheduler.schedule", false]], "schedule() (deepinv.loss.interleavedepochlossscheduler method)": [[35, "deepinv.loss.InterleavedEpochLossScheduler.schedule", false]], "schedule() (deepinv.loss.interleavedlossscheduler method)": [[36, "deepinv.loss.InterleavedLossScheduler.schedule", false]], "schedule() (deepinv.loss.randomlossscheduler method)": [[45, "deepinv.loss.RandomLossScheduler.schedule", false]], "schedule() (deepinv.loss.steplossscheduler method)": [[49, "deepinv.loss.StepLossScheduler.schedule", false]], "scoreloss (class in deepinv.loss)": [[46, "deepinv.loss.ScoreLoss", false]], "scoreloss.scoremodel (class in deepinv.loss)": [[46, "deepinv.loss.ScoreLoss.ScoreModel", false]], "scoreprior (class in deepinv.optim)": [[143, "deepinv.optim.ScorePrior", false]], "scunet (class in deepinv.models)": [[100, "deepinv.models.SCUNet", false]], "sensor() (deepinv.physics.physics method)": [[191, "deepinv.physics.Physics.sensor", false]], "sensor() (deepinv.physics.stackedphysics method)": [[203, "deepinv.physics.StackedPhysics.sensor", false]], "sequentialmri (class in deepinv.physics)": [[198, "deepinv.physics.SequentialMRI", false]], "set14hr (class in deepinv.datasets)": [[24, "deepinv.datasets.Set14HR", false]], "set_cov() (deepinv.optim.utils.gaussianmixturemodel method)": [[162, "deepinv.optim.utils.GaussianMixtureModel.set_cov", false]], "set_cov_reg() (deepinv.optim.utils.gaussianmixturemodel method)": [[162, "deepinv.optim.utils.GaussianMixtureModel.set_cov_reg", false]], "set_ls_solver() (deepinv.physics.physics method)": [[191, "deepinv.physics.Physics.set_ls_solver", false]], "set_noise_model() (deepinv.physics.physics method)": [[191, "deepinv.physics.Physics.set_noise_model", false]], "set_noise_model() (deepinv.physics.stackedphysics method)": [[203, "deepinv.physics.StackedPhysics.set_noise_model", false]], "set_weights() (deepinv.optim.utils.gaussianmixturemodel method)": [[162, "deepinv.optim.utils.GaussianMixtureModel.set_weights", false]], "setup_train() (deepinv.trainer method)": [[12, "deepinv.Trainer.setup_train", false]], "setup_train() (deepinv.training.adversarialtrainer method)": [[259, "deepinv.training.AdversarialTrainer.setup_train", false]], "shear() (deepinv.physics.compressivespectralimaging method)": [[171, "deepinv.physics.CompressiveSpectralImaging.shear", false]], "shift (class in deepinv.transform)": [[265, "deepinv.transform.Shift", false]], "shift() (deepinv.physics.ptychographylinearoperator method)": [[195, "deepinv.physics.PtychographyLinearOperator.shift", false]], "shifttime (class in deepinv.transform)": [[266, "deepinv.transform.ShiftTime", false]], "sigmagenerator (class in deepinv.physics.generator)": [[245, "deepinv.physics.generator.SigmaGenerator", false]], "similarity (class in deepinv.transform.projective)": [[271, "deepinv.transform.projective.Similarity", false]], "simplefastmrislicedataset (class in deepinv.datasets)": [[25, "deepinv.datasets.SimpleFastMRISliceDataset", false]], "simulate_birdcage_csm() (deepinv.physics.multicoilmri method)": [[187, "deepinv.physics.MultiCoilMRI.simulate_birdcage_csm", false]], "sinc_filter() (in module deepinv.physics.blur)": [[214, "deepinv.physics.blur.sinc_filter", false]], "singlephotonlidar (class in deepinv.physics)": [[199, "deepinv.physics.SinglePhotonLidar", false]], "singlepixelcamera (class in deepinv.physics)": [[200, "deepinv.physics.SinglePixelCamera", false]], "skrock (class in deepinv.sampling)": [[254, "deepinv.sampling.SKRock", false]], "slice_fname (deepinv.datasets.lidcidrislicedataset.slicesampleidentifier attribute)": [[20, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier.slice_fname", false]], "slice_ind (deepinv.datasets.fastmrislicedataset.slicesamplefileidentifier attribute)": [[16, "deepinv.datasets.FastMRISliceDataset.SliceSampleFileIdentifier.slice_ind", false]], "smiteration (class in deepinv.optim.optim_iterators)": [[157, "deepinv.optim.optim_iterators.SMIteration", false]], "spacevaryingblur (class in deepinv.physics)": [[201, "deepinv.physics.SpaceVaryingBlur", false]], "spectral_methods() (in module deepinv.optim.phase_retrieval)": [[161, "deepinv.optim.phase_retrieval.spectral_methods", false]], "spectralanglemapper (class in deepinv.loss.metric)": [[75, "deepinv.loss.metric.SpectralAngleMapper", false]], "split() (deepinv.loss.phase2phaseloss static method)": [[43, "deepinv.loss.Phase2PhaseLoss.split", false]], "split() (deepinv.loss.splittingloss static method)": [[47, "deepinv.loss.SplittingLoss.split", false]], "splittingloss (class in deepinv.loss)": [[47, "deepinv.loss.SplittingLoss", false]], "splittingloss.splittingmodel (class in deepinv.loss)": [[47, "deepinv.loss.SplittingLoss.SplittingModel", false]], "ssim (class in deepinv.loss.metric)": [[74, "deepinv.loss.metric.SSIM", false]], "stack() (deepinv.physics.linearphysics method)": [[183, "deepinv.physics.LinearPhysics.stack", false]], "stack() (deepinv.physics.physics method)": [[191, "deepinv.physics.Physics.stack", false]], "stack() (in module deepinv.physics)": [[248, "deepinv.physics.stack", false]], "stackedlinearphysics (class in deepinv.physics)": [[202, "deepinv.physics.StackedLinearPhysics", false]], "stackedphysics (class in deepinv.physics)": [[203, "deepinv.physics.StackedPhysics", false]], "stackedphysicsdatafidelity (class in deepinv.optim)": [[144, "deepinv.optim.StackedPhysicsDataFidelity", false]], "stackedphysicsloss (class in deepinv.loss)": [[48, "deepinv.loss.StackedPhysicsLoss", false]], "state_dict() (deepinv.training.adversarialoptimizer method)": [[258, "deepinv.training.AdversarialOptimizer.state_dict", false]], "step() (deepinv.physics.generator.basemaskgenerator method)": [[230, "deepinv.physics.generator.BaseMaskGenerator.step", false]], "step() (deepinv.physics.generator.bernoullisplittingmaskgenerator method)": [[231, "deepinv.physics.generator.BernoulliSplittingMaskGenerator.step", false]], "step() (deepinv.physics.generator.confocalblurgenerator3d method)": [[232, "deepinv.physics.generator.ConfocalBlurGenerator3D.step", false]], "step() (deepinv.physics.generator.diffractionblurgenerator method)": [[233, "deepinv.physics.generator.DiffractionBlurGenerator.step", false]], "step() (deepinv.physics.generator.diffractionblurgenerator3d method)": [[234, "deepinv.physics.generator.DiffractionBlurGenerator3D.step", false]], "step() (deepinv.physics.generator.generatormixture method)": [[238, "deepinv.physics.generator.GeneratorMixture.step", false]], "step() (deepinv.physics.generator.motionblurgenerator method)": [[239, "deepinv.physics.generator.MotionBlurGenerator.step", false]], "step() (deepinv.physics.generator.physicsgenerator method)": [[242, "deepinv.physics.generator.PhysicsGenerator.step", false]], "step() (deepinv.physics.generator.productconvolutionblurgenerator method)": [[243, "deepinv.physics.generator.ProductConvolutionBlurGenerator.step", false]], "step() (deepinv.physics.generator.sigmagenerator method)": [[245, "deepinv.physics.generator.SigmaGenerator.step", false]], "step() (deepinv.trainer method)": [[12, "deepinv.Trainer.step", false]], "steplossscheduler (class in deepinv.loss)": [[49, "deepinv.loss.StepLossScheduler", false]], "structuredrandom (class in deepinv.physics)": [[204, "deepinv.physics.StructuredRandom", false]], "structuredrandomphaseretrieval (class in deepinv.physics)": [[205, "deepinv.physics.StructuredRandomPhaseRetrieval", false]], "supadversarialdiscriminatorloss (class in deepinv.loss.adversarial)": [[58, "deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss", false]], "supadversarialgeneratorloss (class in deepinv.loss.adversarial)": [[59, "deepinv.loss.adversarial.SupAdversarialGeneratorLoss", false]], "suploss (class in deepinv.loss)": [[50, "deepinv.loss.SupLoss", false]], "suregaussianloss (class in deepinv.loss)": [[51, "deepinv.loss.SureGaussianLoss", false]], "surepgloss (class in deepinv.loss)": [[52, "deepinv.loss.SurePGLoss", false]], "surepoissonloss (class in deepinv.loss)": [[53, "deepinv.loss.SurePoissonLoss", false]], "swinir (class in deepinv.models)": [[101, "deepinv.models.SwinIR", false]], "symmetrize() (deepinv.transform.transform method)": [[267, "deepinv.transform.Transform.symmetrize", false]], "tensorlist (class in deepinv.utils)": [[278, "deepinv.utils.TensorList", false]], "test() (deepinv.trainer method)": [[12, "deepinv.Trainer.test", false]], "test() (in module deepinv)": [[256, "deepinv.test", false]], "tgvdenoiser (class in deepinv.models)": [[102, "deepinv.models.TGVDenoiser", false]], "threshold_3d() (deepinv.models.waveletdenoiser method)": [[108, "deepinv.models.WaveletDenoiser.threshold_3D", false]], "threshold_nd() (deepinv.models.waveletdenoiser method)": [[108, "deepinv.models.WaveletDenoiser.threshold_ND", false]], "thresold_2d() (deepinv.models.waveletdenoiser method)": [[108, "deepinv.models.WaveletDenoiser.thresold_2D", false]], "thresold_func() (deepinv.models.waveletdenoiser method)": [[108, "deepinv.models.WaveletDenoiser.thresold_func", false]], "tikhonov (class in deepinv.optim)": [[146, "deepinv.optim.Tikhonov", false]], "timeagnosticnet (class in deepinv.models)": [[104, "deepinv.models.TimeAgnosticNet", false]], "timeaveragingnet (class in deepinv.models)": [[105, "deepinv.models.TimeAveragingNet", false]], "timemixin (class in deepinv.physics)": [[206, "deepinv.physics.TimeMixin", false]], "to_complex_denoiser() (in module deepinv.models.complex)": [[110, "deepinv.models.complex.to_complex_denoiser", false]], "to_static() (deepinv.physics.dynamicmri method)": [[177, "deepinv.physics.DynamicMRI.to_static", false]], "to_torch_complex() (deepinv.physics.mrimixin static method)": [[186, "deepinv.physics.MRIMixin.to_torch_complex", false]], "tocomplex (class in deepinv.datasets.utils)": [[30, "deepinv.datasets.utils.ToComplex", false]], "tomography (class in deepinv.physics)": [[207, "deepinv.physics.Tomography", false]], "train() (deepinv.trainer method)": [[12, "deepinv.Trainer.train", false]], "train() (in module deepinv)": [[257, "deepinv.train", false]], "trainer (class in deepinv)": [[12, "deepinv.Trainer", false]], "transform (class in deepinv.transform)": [[267, "deepinv.transform.Transform", false]], "transform() (deepinv.transform.transform method)": [[267, "deepinv.transform.Transform.transform", false]], "tvdenoiser (class in deepinv.models)": [[103, "deepinv.models.TVDenoiser", false]], "tvloss (class in deepinv.loss)": [[54, "deepinv.loss.TVLoss", false]], "tvprior (class in deepinv.optim)": [[145, "deepinv.optim.TVPrior", false]], "u() (deepinv.physics.blurfft method)": [[169, "deepinv.physics.BlurFFT.U", false]], "u() (deepinv.physics.decomposablephysics method)": [[173, "deepinv.physics.DecomposablePhysics.U", false]], "u() (deepinv.physics.singlepixelcamera method)": [[200, "deepinv.physics.SinglePixelCamera.U", false]], "u_adjoint() (deepinv.physics.blurfft method)": [[169, "deepinv.physics.BlurFFT.U_adjoint", false]], "u_adjoint() (deepinv.physics.decomposablephysics method)": [[173, "deepinv.physics.DecomposablePhysics.U_adjoint", false]], "u_adjoint() (deepinv.physics.singlepixelcamera method)": [[200, "deepinv.physics.SinglePixelCamera.U_adjoint", false]], "uairgeneratorloss (class in deepinv.loss.adversarial)": [[60, "deepinv.loss.adversarial.UAIRGeneratorLoss", false]], "ula (class in deepinv.sampling)": [[255, "deepinv.sampling.ULA", false]], "unet (class in deepinv.models)": [[106, "deepinv.models.UNet", false]], "unflatten() (deepinv.physics.compressivespectralimaging method)": [[171, "deepinv.physics.CompressiveSpectralImaging.unflatten", false]], "unflatten() (deepinv.physics.timemixin static method)": [[206, "deepinv.physics.TimeMixin.unflatten", false]], "unfolded_builder() (in module deepinv.unfolded)": [[275, "deepinv.unfolded.unfolded_builder", false]], "uniformgaussiannoise (class in deepinv.physics)": [[208, "deepinv.physics.UniformGaussianNoise", false]], "uniformnoise (class in deepinv.physics)": [[209, "deepinv.physics.UniformNoise", false]], "unsupadversarialdiscriminatorloss (class in deepinv.loss.adversarial)": [[61, "deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss", false]], "unsupadversarialgeneratorloss (class in deepinv.loss.adversarial)": [[62, "deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss", false]], "update() (deepinv.physics.physics method)": [[191, "deepinv.physics.Physics.update", false]], "update() (deepinv.utils.averagemeter method)": [[276, "deepinv.utils.AverageMeter.update", false]], "update_data_fidelity_fn() (deepinv.optim.baseoptim method)": [[113, "deepinv.optim.BaseOptim.update_data_fidelity_fn", false]], "update_metrics_fn() (deepinv.optim.baseoptim method)": [[113, "deepinv.optim.BaseOptim.update_metrics_fn", false]], "update_parameters() (deepinv.physics.blur method)": [[168, "deepinv.physics.Blur.update_parameters", false]], "update_parameters() (deepinv.physics.blurfft method)": [[169, "deepinv.physics.BlurFFT.update_parameters", false]], "update_parameters() (deepinv.physics.decomposablephysics method)": [[173, "deepinv.physics.DecomposablePhysics.update_parameters", false]], "update_parameters() (deepinv.physics.gammanoise method)": [[178, "deepinv.physics.GammaNoise.update_parameters", false]], "update_parameters() (deepinv.physics.gaussiannoise method)": [[179, "deepinv.physics.GaussianNoise.update_parameters", false]], "update_parameters() (deepinv.physics.hyperspectralunmixing method)": [[181, "deepinv.physics.HyperSpectralUnmixing.update_parameters", false]], "update_parameters() (deepinv.physics.logpoissonnoise method)": [[184, "deepinv.physics.LogPoissonNoise.update_parameters", false]], "update_parameters() (deepinv.physics.mri method)": [[185, "deepinv.physics.MRI.update_parameters", false]], "update_parameters() (deepinv.physics.multicoilmri method)": [[187, "deepinv.physics.MultiCoilMRI.update_parameters", false]], "update_parameters() (deepinv.physics.poissongaussiannoise method)": [[192, "deepinv.physics.PoissonGaussianNoise.update_parameters", false]], "update_parameters() (deepinv.physics.poissonnoise method)": [[193, "deepinv.physics.PoissonNoise.update_parameters", false]], "update_parameters() (deepinv.physics.spacevaryingblur method)": [[201, "deepinv.physics.SpaceVaryingBlur.update_parameters", false]], "update_parameters() (deepinv.physics.stackedlinearphysics method)": [[202, "deepinv.physics.StackedLinearPhysics.update_parameters", false]], "update_parameters() (deepinv.physics.stackedphysics method)": [[203, "deepinv.physics.StackedPhysics.update_parameters", false]], "update_parameters() (deepinv.physics.uniformnoise method)": [[209, "deepinv.physics.UniformNoise.update_parameters", false]], "update_params_fn() (deepinv.optim.baseoptim method)": [[113, "deepinv.optim.BaseOptim.update_params_fn", false]], "update_prior_fn() (deepinv.optim.baseoptim method)": [[113, "deepinv.optim.BaseOptim.update_prior_fn", false]], "urban100hr (class in deepinv.datasets)": [[26, "deepinv.datasets.Urban100HR", false]], "v() (deepinv.physics.blurfft method)": [[169, "deepinv.physics.BlurFFT.V", false]], "v() (deepinv.physics.decolorize method)": [[172, "deepinv.physics.Decolorize.V", false]], "v() (deepinv.physics.decomposablephysics method)": [[173, "deepinv.physics.DecomposablePhysics.V", false]], "v() (deepinv.physics.mri method)": [[185, "deepinv.physics.MRI.V", false]], "v() (deepinv.physics.singlepixelcamera method)": [[200, "deepinv.physics.SinglePixelCamera.V", false]], "v_adjoint() (deepinv.physics.blurfft method)": [[169, "deepinv.physics.BlurFFT.V_adjoint", false]], "v_adjoint() (deepinv.physics.decolorize method)": [[172, "deepinv.physics.Decolorize.V_adjoint", false]], "v_adjoint() (deepinv.physics.decomposablephysics method)": [[173, "deepinv.physics.DecomposablePhysics.V_adjoint", false]], "v_adjoint() (deepinv.physics.mri method)": [[185, "deepinv.physics.MRI.V_adjoint", false]], "v_adjoint() (deepinv.physics.singlepixelcamera method)": [[200, "deepinv.physics.SinglePixelCamera.V_adjoint", false]], "var_has_converged() (deepinv.sampling.montecarlo method)": [[253, "deepinv.sampling.MonteCarlo.var_has_converged", false]], "varnet (class in deepinv.models)": [[107, "deepinv.models.VarNet", false]], "verify_split_dataset_integrity() (deepinv.datasets.div2k method)": [[14, "deepinv.datasets.DIV2K.verify_split_dataset_integrity", false]], "verify_split_dataset_integrity() (deepinv.datasets.lsdirhr method)": [[21, "deepinv.datasets.LsdirHR.verify_split_dataset_integrity", false]], "waveletdenoiser (class in deepinv.models)": [[108, "deepinv.models.WaveletDenoiser", false]], "waveletdictdenoiser (class in deepinv.models)": [[109, "deepinv.models.WaveletDictDenoiser", false]], "waveletprior (class in deepinv.optim)": [[147, "deepinv.optim.WaveletPrior", false]], "wrap_flatten_c() (deepinv.physics.timemixin static method)": [[206, "deepinv.physics.TimeMixin.wrap_flatten_C", false]], "zero_grad() (deepinv.training.adversarialoptimizer method)": [[258, "deepinv.training.AdversarialOptimizer.zero_grad", false]], "zeros_like() (in module deepinv.utils)": [[299, "deepinv.utils.zeros_like", false]]}, "objects": {"deepinv": [[12, 0, 1, "", "Trainer"], [256, 3, 1, "", "test"], [257, 3, 1, "", "train"]], "deepinv.Trainer": [[12, 1, 1, "", "check_clip_grad"], [12, 1, 1, "", "compute_loss"], [12, 1, 1, "", "compute_metrics"], [12, 1, 1, "", "get_samples"], [12, 1, 1, "", "get_samples_offline"], [12, 1, 1, "", "get_samples_online"], [12, 1, 1, "", "load_model"], [12, 1, 1, "", "log_metrics_wandb"], [12, 1, 1, "", "model_inference"], [12, 1, 1, "", "no_learning_inference"], [12, 1, 1, "", "plot"], [12, 1, 1, "", "reset_metrics"], [12, 1, 1, "", "save_model"], [12, 1, 1, "", "setup_train"], [12, 1, 1, "", "step"], [12, 1, 1, "", "test"], [12, 1, 1, "", "train"]], "deepinv.datasets": [[13, 0, 1, "", "CBSD68"], [14, 0, 1, "", "DIV2K"], [15, 0, 1, "", "FMD"], [16, 0, 1, "", "FastMRISliceDataset"], [17, 0, 1, "", "Flickr2kHR"], [18, 0, 1, "", "HDF5Dataset"], [19, 0, 1, "", "Kohler"], [20, 0, 1, "", "LidcIdriSliceDataset"], [21, 0, 1, "", "LsdirHR"], [22, 0, 1, "", "NBUDataset"], [23, 0, 1, "", "PatchDataset"], [24, 0, 1, "", "Set14HR"], [25, 0, 1, "", "SimpleFastMRISliceDataset"], [26, 0, 1, "", "Urban100HR"], [27, 3, 1, "", "generate_dataset"]], "deepinv.datasets.CBSD68": [[13, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.DIV2K": [[14, 1, 1, "", "verify_split_dataset_integrity"]], "deepinv.datasets.FMD": [[15, 0, 1, "", "NoisySampleIdentifier"]], "deepinv.datasets.FMD.NoisySampleIdentifier": [[15, 2, 1, "", "fname"], [15, 2, 1, "", "fov"], [15, 2, 1, "", "img_type"], [15, 2, 1, "", "noise_dirname"]], "deepinv.datasets.FastMRISliceDataset": [[16, 0, 1, "", "SliceSampleFileIdentifier"], [16, 1, 1, "", "save_simple_dataset"]], "deepinv.datasets.FastMRISliceDataset.SliceSampleFileIdentifier": [[16, 2, 1, "", "fname"], [16, 2, 1, "", "slice_ind"]], "deepinv.datasets.Flickr2kHR": [[17, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.Kohler": [[19, 1, 1, "", "download"], [19, 1, 1, "", "get_item"]], "deepinv.datasets.LidcIdriSliceDataset": [[20, 0, 1, "", "SliceSampleIdentifier"]], "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier": [[20, 2, 1, "", "patient_id"], [20, 2, 1, "", "scan_folder"], [20, 2, 1, "", "slice_fname"]], "deepinv.datasets.LsdirHR": [[21, 1, 1, "", "verify_split_dataset_integrity"]], "deepinv.datasets.NBUDataset": [[22, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.Set14HR": [[24, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.Urban100HR": [[26, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.utils": [[28, 0, 1, "", "PlaceholderDataset"], [29, 0, 1, "", "Rescale"], [30, 0, 1, "", "ToComplex"]], "deepinv.datasets.utils.Rescale": [[29, 1, 1, "", "forward"]], "deepinv.datasets.utils.ToComplex": [[30, 1, 1, "", "forward"]], "deepinv.loss": [[31, 0, 1, "", "Artifact2ArtifactLoss"], [32, 0, 1, "", "BaseLossScheduler"], [33, 0, 1, "", "EILoss"], [34, 0, 1, "", "FNEJacobianSpectralNorm"], [35, 0, 1, "", "InterleavedEpochLossScheduler"], [36, 0, 1, "", "InterleavedLossScheduler"], [37, 0, 1, "", "JacobianSpectralNorm"], [38, 0, 1, "", "Loss"], [39, 0, 1, "", "MCLoss"], [40, 0, 1, "", "MOEILoss"], [41, 0, 1, "", "MOILoss"], [42, 0, 1, "", "Neighbor2Neighbor"], [43, 0, 1, "", "Phase2PhaseLoss"], [44, 0, 1, "", "R2RLoss"], [45, 0, 1, "", "RandomLossScheduler"], [46, 0, 1, "", "ScoreLoss"], [47, 0, 1, "", "SplittingLoss"], [48, 0, 1, "", "StackedPhysicsLoss"], [49, 0, 1, "", "StepLossScheduler"], [50, 0, 1, "", "SupLoss"], [51, 0, 1, "", "SureGaussianLoss"], [52, 0, 1, "", "SurePGLoss"], [53, 0, 1, "", "SurePoissonLoss"], [54, 0, 1, "", "TVLoss"]], "deepinv.loss.Artifact2ArtifactLoss": [[31, 1, 1, "", "forward"]], "deepinv.loss.BaseLossScheduler": [[32, 1, 1, "", "adapt_model"], [32, 1, 1, "", "forward"], [32, 1, 1, "", "schedule"]], "deepinv.loss.EILoss": [[33, 1, 1, "", "forward"]], "deepinv.loss.FNEJacobianSpectralNorm": [[34, 1, 1, "", "forward"]], "deepinv.loss.InterleavedEpochLossScheduler": [[35, 1, 1, "", "schedule"]], "deepinv.loss.InterleavedLossScheduler": [[36, 1, 1, "", "schedule"]], "deepinv.loss.JacobianSpectralNorm": [[37, 1, 1, "", "forward"]], "deepinv.loss.Loss": [[38, 1, 1, "", "adapt_model"], [38, 1, 1, "", "forward"]], "deepinv.loss.MCLoss": [[39, 1, 1, "", "forward"]], "deepinv.loss.MOEILoss": [[40, 1, 1, "", "forward"]], "deepinv.loss.MOILoss": [[41, 1, 1, "", "forward"], [41, 1, 1, "", "next_physics"]], "deepinv.loss.Neighbor2Neighbor": [[42, 1, 1, "", "forward"]], "deepinv.loss.Phase2PhaseLoss": [[43, 1, 1, "", "adapt_model"], [43, 1, 1, "", "split"]], "deepinv.loss.R2RLoss": [[44, 1, 1, "", "adapt_model"], [44, 1, 1, "", "forward"]], "deepinv.loss.RandomLossScheduler": [[45, 1, 1, "", "schedule"]], "deepinv.loss.ScoreLoss": [[46, 0, 1, "", "ScoreModel"], [46, 1, 1, "", "adapt_model"], [46, 1, 1, "", "forward"]], "deepinv.loss.ScoreLoss.ScoreModel": [[46, 1, 1, "", "forward"]], "deepinv.loss.SplittingLoss": [[47, 0, 1, "", "SplittingModel"], [47, 1, 1, "", "adapt_model"], [47, 1, 1, "", "forward"], [47, 1, 1, "", "split"]], "deepinv.loss.SplittingLoss.SplittingModel": [[47, 1, 1, "", "forward"]], "deepinv.loss.StackedPhysicsLoss": [[48, 1, 1, "", "forward"]], "deepinv.loss.StepLossScheduler": [[49, 1, 1, "", "schedule"]], "deepinv.loss.SupLoss": [[50, 1, 1, "", "forward"]], "deepinv.loss.SureGaussianLoss": [[51, 1, 1, "", "forward"]], "deepinv.loss.SurePGLoss": [[52, 1, 1, "", "forward"]], "deepinv.loss.SurePoissonLoss": [[53, 1, 1, "", "forward"]], "deepinv.loss.TVLoss": [[54, 1, 1, "", "forward"]], "deepinv.loss.adversarial": [[55, 0, 1, "", "DiscriminatorLoss"], [56, 0, 1, "", "DiscriminatorMetric"], [57, 0, 1, "", "GeneratorLoss"], [58, 0, 1, "", "SupAdversarialDiscriminatorLoss"], [59, 0, 1, "", "SupAdversarialGeneratorLoss"], [60, 0, 1, "", "UAIRGeneratorLoss"], [61, 0, 1, "", "UnsupAdversarialDiscriminatorLoss"], [62, 0, 1, "", "UnsupAdversarialGeneratorLoss"]], "deepinv.loss.adversarial.DiscriminatorLoss": [[55, 1, 1, "", "adversarial_loss"], [55, 1, 1, "", "forward"]], "deepinv.loss.adversarial.GeneratorLoss": [[57, 1, 1, "", "adversarial_loss"], [57, 1, 1, "", "forward"]], "deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss": [[58, 1, 1, "", "forward"]], "deepinv.loss.adversarial.SupAdversarialGeneratorLoss": [[59, 1, 1, "", "forward"]], "deepinv.loss.adversarial.UAIRGeneratorLoss": [[60, 1, 1, "", "forward"]], "deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss": [[61, 1, 1, "", "forward"]], "deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss": [[62, 1, 1, "", "forward"]], "deepinv.loss.metric": [[63, 0, 1, "", "ERGAS"], [64, 0, 1, "", "L1L2"], [65, 0, 1, "", "LPIPS"], [66, 0, 1, "", "LpNorm"], [67, 0, 1, "", "MAE"], [68, 0, 1, "", "MSE"], [69, 0, 1, "", "Metric"], [70, 0, 1, "", "NIQE"], [71, 0, 1, "", "NMSE"], [72, 0, 1, "", "PSNR"], [73, 0, 1, "", "QNR"], [74, 0, 1, "", "SSIM"], [75, 0, 1, "", "SpectralAngleMapper"]], "deepinv.loss.metric.L1L2": [[64, 1, 1, "", "metric"]], "deepinv.loss.metric.LPIPS": [[65, 1, 1, "", "metric"]], "deepinv.loss.metric.LpNorm": [[66, 1, 1, "", "metric"]], "deepinv.loss.metric.MAE": [[67, 1, 1, "", "metric"]], "deepinv.loss.metric.MSE": [[68, 1, 1, "", "metric"]], "deepinv.loss.metric.Metric": [[69, 1, 1, "", "forward"], [69, 1, 1, "", "invert_metric"], [69, 1, 1, "", "metric"]], "deepinv.loss.metric.NIQE": [[70, 1, 1, "", "metric"]], "deepinv.loss.metric.NMSE": [[71, 1, 1, "", "metric"]], "deepinv.loss.metric.PSNR": [[72, 1, 1, "", "metric"]], "deepinv.loss.metric.QNR": [[73, 1, 1, "", "D_lambda"], [73, 1, 1, "", "D_s"], [73, 1, 1, "", "invert_metric"], [73, 1, 1, "", "metric"]], "deepinv.loss.metric.SSIM": [[74, 1, 1, "", "invert_metric"], [74, 1, 1, "", "metric"]], "deepinv.loss.metric.SpectralAngleMapper": [[75, 1, 1, "", "metric"]], "deepinv.models": [[76, 0, 1, "", "ArtifactRemoval"], [77, 0, 1, "", "AutoEncoder"], [78, 0, 1, "", "BM3D"], [79, 0, 1, "", "CSGMGenerator"], [80, 0, 1, "", "ConvDecoder"], [81, 0, 1, "", "DCGANDiscriminator"], [82, 0, 1, "", "DCGANGenerator"], [83, 0, 1, "", "DRUNet"], [84, 0, 1, "", "DeepImagePrior"], [85, 0, 1, "", "Denoiser"], [86, 0, 1, "", "DiffUNet"], [87, 0, 1, "", "DnCNN"], [88, 0, 1, "", "EPLLDenoiser"], [89, 0, 1, "", "ESRGANDiscriminator"], [90, 0, 1, "", "EquivariantDenoiser"], [91, 0, 1, "", "GSDRUNet"], [92, 0, 1, "", "ICNN"], [93, 0, 1, "", "MedianFilter"], [94, 0, 1, "", "PDNet_DualBlock"], [95, 0, 1, "", "PDNet_PrimalBlock"], [96, 0, 1, "", "PanNet"], [97, 0, 1, "", "PatchGANDiscriminator"], [98, 0, 1, "", "Reconstructor"], [99, 0, 1, "", "Restormer"], [100, 0, 1, "", "SCUNet"], [101, 0, 1, "", "SwinIR"], [102, 0, 1, "", "TGVDenoiser"], [103, 0, 1, "", "TVDenoiser"], [104, 0, 1, "", "TimeAgnosticNet"], [105, 0, 1, "", "TimeAveragingNet"], [106, 0, 1, "", "UNet"], [107, 0, 1, "", "VarNet"], [108, 0, 1, "", "WaveletDenoiser"], [109, 0, 1, "", "WaveletDictDenoiser"]], "deepinv.models.ArtifactRemoval": [[76, 1, 1, "", "backbone_inference"], [76, 1, 1, "", "forward"]], "deepinv.models.AutoEncoder": [[77, 1, 1, "", "forward"]], "deepinv.models.BM3D": [[78, 1, 1, "", "forward"]], "deepinv.models.CSGMGenerator": [[79, 1, 1, "", "forward"], [79, 1, 1, "", "optimize_z"], [79, 1, 1, "", "random_latent"]], "deepinv.models.ConvDecoder": [[80, 1, 1, "", "forward"]], "deepinv.models.DCGANDiscriminator": [[81, 1, 1, "", "forward"]], "deepinv.models.DCGANGenerator": [[82, 1, 1, "", "forward"]], "deepinv.models.DRUNet": [[83, 1, 1, "", "forward"]], "deepinv.models.DeepImagePrior": [[84, 1, 1, "", "forward"]], "deepinv.models.Denoiser": [[85, 1, 1, "", "forward"]], "deepinv.models.DiffUNet": [[86, 1, 1, "", "convert_to_fp16"], [86, 1, 1, "", "convert_to_fp32"], [86, 1, 1, "", "find_nearest"], [86, 1, 1, "", "forward"], [86, 1, 1, "", "forward_denoise"], [86, 1, 1, "", "forward_diffusion"], [86, 1, 1, "", "get_alpha_prod"]], "deepinv.models.DnCNN": [[87, 1, 1, "", "forward"]], "deepinv.models.EPLLDenoiser": [[88, 1, 1, "", "forward"]], "deepinv.models.ESRGANDiscriminator": [[89, 1, 1, "", "forward"]], "deepinv.models.EquivariantDenoiser": [[90, 1, 1, "", "forward"]], "deepinv.models.ICNN": [[92, 1, 1, "", "forward"], [92, 1, 1, "", "grad"]], "deepinv.models.MedianFilter": [[93, 1, 1, "", "forward"]], "deepinv.models.PDNet_DualBlock": [[94, 1, 1, "", "forward"]], "deepinv.models.PDNet_PrimalBlock": [[95, 1, 1, "", "forward"]], "deepinv.models.PanNet": [[96, 1, 1, "", "create_sampler"], [96, 1, 1, "", "forward"]], "deepinv.models.PatchGANDiscriminator": [[97, 1, 1, "", "forward"]], "deepinv.models.Reconstructor": [[98, 1, 1, "", "forward"]], "deepinv.models.Restormer": [[99, 1, 1, "", "forward"], [99, 1, 1, "", "forward_restormer"], [99, 1, 1, "", "is_standard_deblurring_network"], [99, 1, 1, "", "is_standard_denoising_network"], [99, 1, 1, "", "is_standard_deraining_network"]], "deepinv.models.SCUNet": [[100, 1, 1, "", "forward"]], "deepinv.models.SwinIR": [[101, 1, 1, "", "forward"]], "deepinv.models.TGVDenoiser": [[102, 1, 1, "", "epsilon"], [102, 1, 1, "", "epsilon_adjoint"], [102, 1, 1, "", "forward"], [102, 1, 1, "", "nabla"], [102, 1, 1, "", "nabla_adjoint"]], "deepinv.models.TVDenoiser": [[103, 1, 1, "", "forward"], [103, 1, 1, "", "nabla"], [103, 1, 1, "", "nabla_adjoint"], [103, 1, 1, "", "prox_tau_fx"]], "deepinv.models.TimeAgnosticNet": [[104, 1, 1, "", "forward"]], "deepinv.models.TimeAveragingNet": [[105, 1, 1, "", "forward"]], "deepinv.models.UNet": [[106, 1, 1, "", "forward"]], "deepinv.models.VarNet": [[107, 1, 1, "", "backbone_inference"]], "deepinv.models.WaveletDenoiser": [[108, 1, 1, "", "crop_output"], [108, 1, 1, "", "dwt"], [108, 1, 1, "", "flatten_coeffs"], [108, 1, 1, "", "forward"], [108, 1, 1, "", "hard_threshold_topk"], [108, 1, 1, "", "iwt"], [108, 1, 1, "", "pad_input"], [108, 1, 1, "", "prox_l0"], [108, 1, 1, "", "prox_l1"], [108, 1, 1, "", "psi"], [108, 1, 1, "", "reshape_ths"], [108, 1, 1, "", "threshold_3D"], [108, 1, 1, "", "threshold_ND"], [108, 1, 1, "", "thresold_2D"], [108, 1, 1, "", "thresold_func"]], "deepinv.models.WaveletDictDenoiser": [[109, 1, 1, "", "forward"], [109, 1, 1, "", "psi"]], "deepinv.models.complex": [[110, 3, 1, "", "to_complex_denoiser"]], "deepinv.optim": [[111, 0, 1, "", "AmplitudeLoss"], [112, 0, 1, "", "AmplitudeLossDistance"], [113, 0, 1, "", "BaseOptim"], [114, 0, 1, "", "Bregman"], [115, 0, 1, "", "BregmanL2"], [116, 0, 1, "", "Bregman_ICNN"], [117, 0, 1, "", "BurgEntropy"], [118, 0, 1, "", "DPIR"], [119, 0, 1, "", "DataFidelity"], [120, 0, 1, "", "Distance"], [121, 0, 1, "", "EPLL"], [122, 0, 1, "", "FixedPoint"], [123, 0, 1, "", "IndicatorL2"], [124, 0, 1, "", "IndicatorL2Distance"], [125, 0, 1, "", "L1"], [126, 0, 1, "", "L12Prior"], [127, 0, 1, "", "L1Distance"], [128, 0, 1, "", "L1Prior"], [129, 0, 1, "", "L2"], [130, 0, 1, "", "L2Distance"], [131, 0, 1, "", "LogPoissonLikelihood"], [132, 0, 1, "", "LogPoissonLikelihoodDistance"], [133, 0, 1, "", "NegEntropy"], [134, 0, 1, "", "OptimIterator"], [135, 0, 1, "", "PatchNR"], [136, 0, 1, "", "PatchPrior"], [137, 0, 1, "", "PnP"], [138, 0, 1, "", "PoissonLikelihood"], [139, 0, 1, "", "PoissonLikelihoodDistance"], [140, 0, 1, "", "Potential"], [141, 0, 1, "", "Prior"], [142, 0, 1, "", "RED"], [143, 0, 1, "", "ScorePrior"], [144, 0, 1, "", "StackedPhysicsDataFidelity"], [145, 0, 1, "", "TVPrior"], [146, 0, 1, "", "Tikhonov"], [147, 0, 1, "", "WaveletPrior"], [148, 3, 1, "", "optim_builder"]], "deepinv.optim.AmplitudeLossDistance": [[112, 1, 1, "", "fn"], [112, 1, 1, "", "grad"]], "deepinv.optim.BaseOptim": [[113, 1, 1, "", "check_conv_fn"], [113, 1, 1, "", "check_iteration_fn"], [113, 1, 1, "", "forward"], [113, 1, 1, "", "init_iterate_fn"], [113, 1, 1, "", "init_metrics_fn"], [113, 1, 1, "", "update_data_fidelity_fn"], [113, 1, 1, "", "update_metrics_fn"], [113, 1, 1, "", "update_params_fn"], [113, 1, 1, "", "update_prior_fn"]], "deepinv.optim.Bregman": [[114, 1, 1, "", "MD_step"], [114, 1, 1, "", "div"]], "deepinv.optim.BregmanL2": [[115, 1, 1, "", "conjugate"], [115, 1, 1, "", "div"], [115, 1, 1, "", "fn"], [115, 1, 1, "", "grad"], [115, 1, 1, "", "grad_conj"]], "deepinv.optim.Bregman_ICNN": [[116, 1, 1, "", "conjugate"], [116, 1, 1, "", "fn"]], "deepinv.optim.BurgEntropy": [[117, 1, 1, "", "conjugate"], [117, 1, 1, "", "fn"], [117, 1, 1, "", "grad"], [117, 1, 1, "", "grad_conj"]], "deepinv.optim.DataFidelity": [[119, 1, 1, "", "fn"], [119, 1, 1, "", "grad"], [119, 1, 1, "", "grad_d"], [119, 1, 1, "", "prox_d"], [119, 1, 1, "", "prox_d_conjugate"]], "deepinv.optim.Distance": [[120, 1, 1, "", "fn"], [120, 1, 1, "", "forward"]], "deepinv.optim.EPLL": [[121, 1, 1, "", "forward"], [121, 1, 1, "", "negative_log_likelihood"]], "deepinv.optim.FixedPoint": [[122, 1, 1, "", "anderson_acceleration_step"], [122, 1, 1, "", "forward"], [122, 1, 1, "", "init_anderson_acceleration"]], "deepinv.optim.IndicatorL2": [[123, 1, 1, "", "prox"]], "deepinv.optim.IndicatorL2Distance": [[124, 1, 1, "", "fn"], [124, 1, 1, "", "prox"]], "deepinv.optim.L1": [[125, 1, 1, "", "prox"]], "deepinv.optim.L12Prior": [[126, 1, 1, "", "fn"], [126, 1, 1, "", "prox"]], "deepinv.optim.L1Distance": [[127, 1, 1, "", "fn"], [127, 1, 1, "", "grad"], [127, 1, 1, "", "prox"]], "deepinv.optim.L1Prior": [[128, 1, 1, "", "fn"], [128, 1, 1, "", "prox"]], "deepinv.optim.L2": [[129, 1, 1, "", "prox"]], "deepinv.optim.L2Distance": [[130, 1, 1, "", "fn"], [130, 1, 1, "", "grad"], [130, 1, 1, "", "prox"]], "deepinv.optim.LogPoissonLikelihoodDistance": [[132, 1, 1, "", "fn"]], "deepinv.optim.NegEntropy": [[133, 1, 1, "", "conjugate"], [133, 1, 1, "", "fn"], [133, 1, 1, "", "grad"], [133, 1, 1, "", "grad_conj"]], "deepinv.optim.OptimIterator": [[134, 1, 1, "", "forward"], [134, 1, 1, "", "relaxation_step"]], "deepinv.optim.PatchNR": [[135, 1, 1, "", "fn"]], "deepinv.optim.PatchPrior": [[136, 1, 1, "", "fn"]], "deepinv.optim.PnP": [[137, 1, 1, "", "prox"]], "deepinv.optim.PoissonLikelihoodDistance": [[139, 1, 1, "", "fn"], [139, 1, 1, "", "grad"], [139, 1, 1, "", "prox"]], "deepinv.optim.Potential": [[140, 1, 1, "", "bregman_prox"], [140, 1, 1, "", "conjugate"], [140, 1, 1, "", "fn"], [140, 1, 1, "", "forward"], [140, 1, 1, "", "grad"], [140, 1, 1, "", "grad_conj"], [140, 1, 1, "", "prox"], [140, 1, 1, "", "prox_conjugate"]], "deepinv.optim.RED": [[142, 1, 1, "", "grad"]], "deepinv.optim.ScorePrior": [[143, 1, 1, "", "grad"]], "deepinv.optim.StackedPhysicsDataFidelity": [[144, 1, 1, "", "fn"], [144, 1, 1, "", "grad"], [144, 1, 1, "", "grad_d"], [144, 1, 1, "", "prox_d"], [144, 1, 1, "", "prox_d_conjugate"]], "deepinv.optim.TVPrior": [[145, 1, 1, "", "fn"], [145, 1, 1, "", "nabla"], [145, 1, 1, "", "nabla_adjoint"], [145, 1, 1, "", "prox"]], "deepinv.optim.Tikhonov": [[146, 1, 1, "", "fn"], [146, 1, 1, "", "grad"], [146, 1, 1, "", "prox"]], "deepinv.optim.WaveletPrior": [[147, 1, 1, "", "fn"], [147, 1, 1, "", "prox"], [147, 1, 1, "", "psi"]], "deepinv.optim.optim_iterators": [[149, 0, 1, "", "ADMMIteration"], [150, 0, 1, "", "CPIteration"], [151, 0, 1, "", "DRSIteration"], [152, 0, 1, "", "FISTAIteration"], [153, 0, 1, "", "GDIteration"], [154, 0, 1, "", "HQSIteration"], [155, 0, 1, "", "MDIteration"], [156, 0, 1, "", "PGDIteration"], [157, 0, 1, "", "SMIteration"], [158, 0, 1, "", "fStep"], [159, 0, 1, "", "gStep"]], "deepinv.optim.optim_iterators.ADMMIteration": [[149, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.CPIteration": [[150, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.DRSIteration": [[151, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.FISTAIteration": [[152, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.GDIteration": [[153, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.MDIteration": [[155, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.SMIteration": [[157, 1, 1, "", "forward"]], "deepinv.optim.phase_retrieval": [[160, 3, 1, "", "correct_global_phase"], [161, 3, 1, "", "spectral_methods"]], "deepinv.optim.utils": [[162, 0, 1, "", "GaussianMixtureModel"], [163, 3, 1, "", "bicgstab"], [164, 3, 1, "", "conjugate_gradient"], [165, 3, 1, "", "gradient_descent"], [166, 3, 1, "", "least_squares"], [167, 3, 1, "", "lsqr"]], "deepinv.optim.utils.GaussianMixtureModel": [[162, 1, 1, "", "classify"], [162, 1, 1, "", "component_log_likelihoods"], [162, 1, 1, "", "fit"], [162, 1, 1, "", "forward"], [162, 1, 1, "", "get_cov"], [162, 1, 1, "", "get_cov_inv_reg"], [162, 1, 1, "", "get_weights"], [162, 1, 1, "", "load_state_dict"], [162, 1, 1, "", "set_cov"], [162, 1, 1, "", "set_cov_reg"], [162, 1, 1, "", "set_weights"]], "deepinv.physics": [[168, 0, 1, "", "Blur"], [169, 0, 1, "", "BlurFFT"], [170, 0, 1, "", "CompressedSensing"], [171, 0, 1, "", "CompressiveSpectralImaging"], [172, 0, 1, "", "Decolorize"], [173, 0, 1, "", "DecomposablePhysics"], [174, 0, 1, "", "Demosaicing"], [175, 0, 1, "", "Denoising"], [176, 0, 1, "", "Downsampling"], [177, 0, 1, "", "DynamicMRI"], [178, 0, 1, "", "GammaNoise"], [179, 0, 1, "", "GaussianNoise"], [180, 0, 1, "", "Haze"], [181, 0, 1, "", "HyperSpectralUnmixing"], [182, 0, 1, "", "Inpainting"], [183, 0, 1, "", "LinearPhysics"], [184, 0, 1, "", "LogPoissonNoise"], [185, 0, 1, "", "MRI"], [186, 0, 1, "", "MRIMixin"], [187, 0, 1, "", "MultiCoilMRI"], [188, 0, 1, "", "NoiseModel"], [189, 0, 1, "", "Pansharpen"], [190, 0, 1, "", "PhaseRetrieval"], [191, 0, 1, "", "Physics"], [192, 0, 1, "", "PoissonGaussianNoise"], [193, 0, 1, "", "PoissonNoise"], [194, 0, 1, "", "Ptychography"], [195, 0, 1, "", "PtychographyLinearOperator"], [196, 0, 1, "", "RadioInterferometry"], [197, 0, 1, "", "RandomPhaseRetrieval"], [198, 0, 1, "", "SequentialMRI"], [199, 0, 1, "", "SinglePhotonLidar"], [200, 0, 1, "", "SinglePixelCamera"], [201, 0, 1, "", "SpaceVaryingBlur"], [202, 0, 1, "", "StackedLinearPhysics"], [203, 0, 1, "", "StackedPhysics"], [204, 0, 1, "", "StructuredRandom"], [205, 0, 1, "", "StructuredRandomPhaseRetrieval"], [206, 0, 1, "", "TimeMixin"], [207, 0, 1, "", "Tomography"], [208, 0, 1, "", "UniformGaussianNoise"], [209, 0, 1, "", "UniformNoise"], [210, 3, 1, "", "adjoint_function"], [248, 3, 1, "", "stack"]], "deepinv.physics.Blur": [[168, 1, 1, "", "A"], [168, 1, 1, "", "A_adjoint"], [168, 1, 1, "", "update_parameters"]], "deepinv.physics.BlurFFT": [[169, 1, 1, "", "A"], [169, 1, 1, "", "A_adjoint"], [169, 1, 1, "", "U"], [169, 1, 1, "", "U_adjoint"], [169, 1, 1, "", "V"], [169, 1, 1, "", "V_adjoint"], [169, 1, 1, "", "update_parameters"]], "deepinv.physics.CompressedSensing": [[170, 1, 1, "", "A"], [170, 1, 1, "", "A_adjoint"], [170, 1, 1, "", "A_dagger"]], "deepinv.physics.CompressiveSpectralImaging": [[171, 1, 1, "", "A"], [171, 1, 1, "", "A_adjoint"], [171, 1, 1, "", "crop"], [171, 1, 1, "", "flatten"], [171, 1, 1, "", "pad"], [171, 1, 1, "", "shear"], [171, 1, 1, "", "unflatten"]], "deepinv.physics.Decolorize": [[172, 1, 1, "", "V"], [172, 1, 1, "", "V_adjoint"]], "deepinv.physics.DecomposablePhysics": [[173, 1, 1, "", "A"], [173, 1, 1, "", "A_A_adjoint"], [173, 1, 1, "", "A_adjoint"], [173, 1, 1, "", "A_adjoint_A"], [173, 1, 1, "", "A_dagger"], [173, 1, 1, "", "U"], [173, 1, 1, "", "U_adjoint"], [173, 1, 1, "", "V"], [173, 1, 1, "", "V_adjoint"], [173, 1, 1, "", "prox_l2"], [173, 1, 1, "", "update_parameters"]], "deepinv.physics.Downsampling": [[176, 1, 1, "", "A"], [176, 1, 1, "", "A_adjoint"], [176, 1, 1, "", "prox_l2"]], "deepinv.physics.DynamicMRI": [[177, 1, 1, "", "A"], [177, 1, 1, "", "A_adjoint"], [177, 1, 1, "", "A_dagger"], [177, 1, 1, "", "check_mask"], [177, 1, 1, "", "noise"], [177, 1, 1, "", "to_static"]], "deepinv.physics.GammaNoise": [[178, 1, 1, "", "forward"], [178, 1, 1, "", "update_parameters"]], "deepinv.physics.GaussianNoise": [[179, 1, 1, "", "forward"], [179, 1, 1, "", "update_parameters"]], "deepinv.physics.Haze": [[180, 1, 1, "", "A"], [180, 1, 1, "", "A_dagger"]], "deepinv.physics.HyperSpectralUnmixing": [[181, 1, 1, "", "A"], [181, 1, 1, "", "A_adjoint"], [181, 1, 1, "", "A_dagger"], [181, 1, 1, "", "update_parameters"]], "deepinv.physics.Inpainting": [[182, 1, 1, "", "__mul__"], [182, 1, 1, "", "noise"]], "deepinv.physics.LinearPhysics": [[183, 1, 1, "", "A_A_adjoint"], [183, 1, 1, "", "A_adjoint"], [183, 1, 1, "", "A_adjoint_A"], [183, 1, 1, "", "A_dagger"], [183, 1, 1, "", "A_vjp"], [183, 1, 1, "", "__mul__"], [183, 1, 1, "", "adjointness_test"], [183, 1, 1, "", "compute_norm"], [183, 1, 1, "", "condition_number"], [183, 1, 1, "", "prox_l2"], [183, 1, 1, "", "stack"]], "deepinv.physics.LogPoissonNoise": [[184, 1, 1, "", "forward"], [184, 1, 1, "", "update_parameters"]], "deepinv.physics.MRI": [[185, 1, 1, "", "A_adjoint"], [185, 1, 1, "", "V"], [185, 1, 1, "", "V_adjoint"], [185, 1, 1, "", "update_parameters"]], "deepinv.physics.MRIMixin": [[186, 1, 1, "", "check_mask"], [186, 1, 1, "", "crop"], [186, 1, 1, "", "fft"], [186, 1, 1, "", "from_torch_complex"], [186, 1, 1, "", "ifft"], [186, 1, 1, "", "im_to_kspace"], [186, 1, 1, "", "kspace_to_im"], [186, 1, 1, "", "rss"], [186, 1, 1, "", "to_torch_complex"]], "deepinv.physics.MultiCoilMRI": [[187, 1, 1, "", "A"], [187, 1, 1, "", "A_adjoint"], [187, 1, 1, "", "simulate_birdcage_csm"], [187, 1, 1, "", "update_parameters"]], "deepinv.physics.NoiseModel": [[188, 1, 1, "", "__mul__"], [188, 1, 1, "", "forward"], [188, 1, 1, "", "rand_like"], [188, 1, 1, "", "randn_like"], [188, 1, 1, "", "reset_rng"], [188, 1, 1, "", "rng_manual_seed"]], "deepinv.physics.Pansharpen": [[189, 1, 1, "", "A_dagger"]], "deepinv.physics.PhaseRetrieval": [[190, 1, 1, "", "A"], [190, 1, 1, "", "A_dagger"], [190, 1, 1, "", "A_vjp"], [190, 1, 1, "", "B_dagger"], [190, 1, 1, "", "forward"]], "deepinv.physics.Physics": [[191, 1, 1, "", "A"], [191, 1, 1, "", "A_dagger"], [191, 1, 1, "", "A_vjp"], [191, 1, 1, "", "__mul__"], [191, 1, 1, "", "forward"], [191, 1, 1, "", "noise"], [191, 1, 1, "", "sensor"], [191, 1, 1, "", "set_ls_solver"], [191, 1, 1, "", "set_noise_model"], [191, 1, 1, "", "stack"], [191, 1, 1, "", "update"]], "deepinv.physics.PoissonGaussianNoise": [[192, 1, 1, "", "forward"], [192, 1, 1, "", "update_parameters"]], "deepinv.physics.PoissonNoise": [[193, 1, 1, "", "forward"], [193, 1, 1, "", "update_parameters"]], "deepinv.physics.PtychographyLinearOperator": [[195, 1, 1, "", "A"], [195, 1, 1, "", "A_adjoint"], [195, 1, 1, "", "get_overlap_img"], [195, 1, 1, "", "shift"]], "deepinv.physics.RadioInterferometry": [[196, 1, 1, "", "A"], [196, 1, 1, "", "A_adjoint"]], "deepinv.physics.SequentialMRI": [[198, 1, 1, "", "A"], [198, 1, 1, "", "A_adjoint"]], "deepinv.physics.SinglePhotonLidar": [[199, 1, 1, "", "A"], [199, 1, 1, "", "A_dagger"]], "deepinv.physics.SinglePixelCamera": [[200, 1, 1, "", "U"], [200, 1, 1, "", "U_adjoint"], [200, 1, 1, "", "V"], [200, 1, 1, "", "V_adjoint"]], "deepinv.physics.SpaceVaryingBlur": [[201, 1, 1, "", "A"], [201, 1, 1, "", "A_adjoint"], [201, 1, 1, "", "update_parameters"]], "deepinv.physics.StackedLinearPhysics": [[202, 1, 1, "", "A_adjoint"], [202, 1, 1, "", "update_parameters"]], "deepinv.physics.StackedPhysics": [[203, 1, 1, "", "A"], [203, 1, 1, "", "noise"], [203, 1, 1, "", "sensor"], [203, 1, 1, "", "set_noise_model"], [203, 1, 1, "", "update_parameters"]], "deepinv.physics.StructuredRandomPhaseRetrieval": [[205, 1, 1, "", "B_dagger"], [205, 1, 1, "", "get_structure"]], "deepinv.physics.TimeMixin": [[206, 1, 1, "", "average"], [206, 1, 1, "", "flatten"], [206, 1, 1, "", "flatten_C"], [206, 1, 1, "", "repeat"], [206, 1, 1, "", "unflatten"], [206, 1, 1, "", "wrap_flatten_C"]], "deepinv.physics.Tomography": [[207, 1, 1, "", "A"], [207, 1, 1, "", "A_adjoint"], [207, 1, 1, "", "A_dagger"]], "deepinv.physics.UniformGaussianNoise": [[208, 1, 1, "", "forward"]], "deepinv.physics.UniformNoise": [[209, 1, 1, "", "forward"], [209, 1, 1, "", "update_parameters"]], "deepinv.physics.blur": [[211, 3, 1, "", "bicubic_filter"], [212, 3, 1, "", "bilinear_filter"], [213, 3, 1, "", "gaussian_blur"], [214, 3, 1, "", "sinc_filter"]], "deepinv.physics.functional": [[215, 0, 1, "", "IRadon"], [216, 0, 1, "", "Radon"], [217, 3, 1, "", "conv2d"], [218, 3, 1, "", "conv2d_fft"], [219, 3, 1, "", "conv3d_fft"], [220, 3, 1, "", "conv_transpose2d"], [221, 3, 1, "", "conv_transpose2d_fft"], [222, 3, 1, "", "conv_transpose3d_fft"], [223, 3, 1, "", "dst1"], [224, 3, 1, "", "histogram"], [225, 3, 1, "", "histogramdd"], [226, 3, 1, "", "multiplier"], [227, 3, 1, "", "multiplier_adjoint"], [228, 3, 1, "", "product_convolution2d"]], "deepinv.physics.functional.IRadon": [[215, 1, 1, "", "forward"]], "deepinv.physics.functional.Radon": [[216, 1, 1, "", "forward"]], "deepinv.physics.generator": [[229, 0, 1, "", "Artifact2ArtifactSplittingMaskGenerator"], [230, 0, 1, "", "BaseMaskGenerator"], [231, 0, 1, "", "BernoulliSplittingMaskGenerator"], [232, 0, 1, "", "ConfocalBlurGenerator3D"], [233, 0, 1, "", "DiffractionBlurGenerator"], [234, 0, 1, "", "DiffractionBlurGenerator3D"], [235, 0, 1, "", "EquispacedMaskGenerator"], [236, 0, 1, "", "GaussianMaskGenerator"], [237, 0, 1, "", "GaussianSplittingMaskGenerator"], [238, 0, 1, "", "GeneratorMixture"], [239, 0, 1, "", "MotionBlurGenerator"], [240, 0, 1, "", "PSFGenerator"], [241, 0, 1, "", "Phase2PhaseSplittingMaskGenerator"], [242, 0, 1, "", "PhysicsGenerator"], [243, 0, 1, "", "ProductConvolutionBlurGenerator"], [244, 0, 1, "", "RandomMaskGenerator"], [245, 0, 1, "", "SigmaGenerator"]], "deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator": [[229, 1, 1, "", "batch_step"]], "deepinv.physics.generator.BaseMaskGenerator": [[230, 1, 1, "", "sample_mask"], [230, 1, 1, "", "step"]], "deepinv.physics.generator.BernoulliSplittingMaskGenerator": [[231, 1, 1, "", "batch_step"], [231, 1, 1, "", "check_pixelwise"], [231, 1, 1, "", "step"]], "deepinv.physics.generator.ConfocalBlurGenerator3D": [[232, 1, 1, "", "step"]], "deepinv.physics.generator.DiffractionBlurGenerator": [[233, 1, 1, "", "generate_coeff"], [233, 1, 1, "", "step"]], "deepinv.physics.generator.DiffractionBlurGenerator3D": [[234, 1, 1, "", "step"]], "deepinv.physics.generator.EquispacedMaskGenerator": [[235, 1, 1, "", "sample_mask"]], "deepinv.physics.generator.GaussianMaskGenerator": [[236, 1, 1, "", "get_pdf"]], "deepinv.physics.generator.GaussianSplittingMaskGenerator": [[237, 1, 1, "", "batch_step"]], "deepinv.physics.generator.GeneratorMixture": [[238, 1, 1, "", "step"]], "deepinv.physics.generator.MotionBlurGenerator": [[239, 1, 1, "", "f_matern"], [239, 1, 1, "", "matern_kernel"], [239, 1, 1, "", "step"]], "deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator": [[241, 1, 1, "", "batch_step"]], "deepinv.physics.generator.PhysicsGenerator": [[242, 1, 1, "", "__add__"], [242, 1, 1, "", "reset_rng"], [242, 1, 1, "", "rng_manual_seed"], [242, 1, 1, "", "step"]], "deepinv.physics.generator.ProductConvolutionBlurGenerator": [[243, 1, 1, "", "step"]], "deepinv.physics.generator.RandomMaskGenerator": [[244, 1, 1, "", "get_pdf"], [244, 1, 1, "", "sample_mask"]], "deepinv.physics.generator.SigmaGenerator": [[245, 1, 1, "", "step"]], "deepinv.physics.phase_retrieval": [[246, 3, 1, "", "build_probe"], [247, 3, 1, "", "generate_shifts"]], "deepinv.sampling": [[249, 0, 1, "", "DDRM"], [250, 0, 1, "", "DPS"], [251, 0, 1, "", "DiffPIR"], [252, 0, 1, "", "DiffusionSampler"], [253, 0, 1, "", "MonteCarlo"], [254, 0, 1, "", "SKRock"], [255, 0, 1, "", "ULA"]], "deepinv.sampling.DDRM": [[249, 1, 1, "", "forward"]], "deepinv.sampling.DPS": [[250, 1, 1, "", "compute_alpha_betas"], [250, 1, 1, "", "forward"]], "deepinv.sampling.DiffPIR": [[251, 1, 1, "", "compute_alpha"], [251, 1, 1, "", "find_nearest"], [251, 1, 1, "", "forward"], [251, 1, 1, "", "get_alpha_beta"], [251, 1, 1, "", "get_alpha_prod"], [251, 1, 1, "", "get_noise_schedule"]], "deepinv.sampling.MonteCarlo": [[253, 1, 1, "", "forward"], [253, 1, 1, "", "get_chain"], [253, 1, 1, "", "mean_has_converged"], [253, 1, 1, "", "reset"], [253, 1, 1, "", "var_has_converged"]], "deepinv.training": [[258, 0, 1, "", "AdversarialOptimizer"], [259, 0, 1, "", "AdversarialTrainer"]], "deepinv.training.AdversarialOptimizer": [[258, 1, 1, "", "load_state_dict"], [258, 1, 1, "", "state_dict"], [258, 1, 1, "", "zero_grad"]], "deepinv.training.AdversarialTrainer": [[259, 1, 1, "", "check_clip_grad_D"], [259, 1, 1, "", "compute_loss"], [259, 1, 1, "", "save_model"], [259, 1, 1, "", "setup_train"]], "deepinv.transform": [[260, 0, 1, "", "CPABDiffeomorphism"], [261, 0, 1, "", "Homography"], [262, 0, 1, "", "Reflect"], [263, 0, 1, "", "Rotate"], [264, 0, 1, "", "Scale"], [265, 0, 1, "", "Shift"], [266, 0, 1, "", "ShiftTime"], [267, 0, 1, "", "Transform"]], "deepinv.transform.ShiftTime": [[266, 1, 1, "", "roll_reflect_1d"]], "deepinv.transform.Transform": [[267, 1, 1, "", "__add__"], [267, 1, 1, "", "__mul__"], [267, 1, 1, "", "forward"], [267, 1, 1, "", "get_params"], [267, 1, 1, "", "identity"], [267, 1, 1, "", "inverse"], [267, 1, 1, "", "invert_params"], [267, 1, 1, "", "symmetrize"], [267, 1, 1, "", "transform"]], "deepinv.transform.projective": [[268, 0, 1, "", "Affine"], [269, 0, 1, "", "Euclidean"], [270, 0, 1, "", "PanTiltRotate"], [271, 0, 1, "", "Similarity"]], "deepinv.unfolded": [[272, 0, 1, "", "BaseDEQ"], [273, 0, 1, "", "BaseUnfold"], [274, 3, 1, "", "DEQ_builder"], [275, 3, 1, "", "unfolded_builder"]], "deepinv.unfolded.BaseDEQ": [[272, 1, 1, "", "forward"]], "deepinv.unfolded.BaseUnfold": [[273, 1, 1, "", "forward"]], "deepinv.utils": [[276, 0, 1, "", "AverageMeter"], [277, 0, 1, "", "ProgressMeter"], [278, 0, 1, "", "TensorList"], [280, 3, 1, "", "dirac_like"], [281, 3, 1, "", "get_data_home"], [282, 3, 1, "", "get_degradation_url"], [283, 3, 1, "", "get_freer_gpu"], [284, 3, 1, "", "get_image_url"], [285, 0, 1, "", "get_timestamp"], [286, 3, 1, "", "load_dataset"], [287, 3, 1, "", "load_degradation"], [288, 3, 1, "", "load_image"], [289, 3, 1, "", "load_url_image"], [290, 3, 1, "", "ones_like"], [291, 3, 1, "", "plot"], [292, 3, 1, "", "plot_curves"], [293, 3, 1, "", "plot_inset"], [294, 3, 1, "", "plot_ortho3D"], [295, 3, 1, "", "plot_parameters"], [296, 3, 1, "", "plot_videos"], [297, 3, 1, "", "rand_like"], [298, 3, 1, "", "randn_like"], [299, 3, 1, "", "zeros_like"]], "deepinv.utils.AverageMeter": [[276, 1, 1, "", "reset"], [276, 1, 1, "", "update"]], "deepinv.utils.demo": [[279, 3, 1, "", "demo_mri_model"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:function"}, "terms": {"": [12, 19, 22, 40, 46, 60, 83, 86, 87, 91, 96, 100, 101, 102, 103, 117, 118, 143, 167, 170, 171, 173, 176, 181, 198, 233, 239, 253, 256, 257, 258, 259, 271, 293, 300, 303, 306, 307, 308, 309, 312, 313, 314, 318, 319, 320, 321, 324, 325, 326, 330, 331, 334, 335, 336, 337, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 360, 361, 362, 363, 364, 365, 381, 387, 391], "0": [15, 16, 19, 20, 22, 25, 27, 31, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 86, 91, 92, 93, 96, 99, 100, 101, 103, 108, 109, 113, 114, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 138, 139, 140, 143, 145, 146, 147, 148, 149, 150, 151, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 189, 192, 193, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 216, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 249, 250, 251, 253, 254, 255, 261, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 287, 291, 293, 294, 297, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 367, 372, 373, 378, 379, 380, 383, 385, 386, 387, 389, 390, 393, 395, 396], "00": [21, 303, 307, 308, 309, 312, 314, 318, 319, 320, 323, 326, 329, 330, 331, 333, 334, 335, 337, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 361, 364, 365, 367, 373], "000": [15, 307, 314, 348, 350, 359, 363, 391], "0000": [126, 168, 169, 172, 173, 177, 182, 185, 242, 386, 393], "00000": 13, "0000001": 21, "000001": 17, "00001": 13, "0000250": 21, "0001": [14, 20], "0001000": 21, "0008211351850373835": 363, "001": [20, 46, 341, 348, 351, 363], "0014": [306, 313], "00143": 176, "002": [318, 355, 363, 364], "0022": [306, 313], "002592722410522517": 334, "002650": 17, "003": [303, 334, 348, 356, 362, 363, 367, 373], "003231370587838091": 348, "0034": 314, "0037754916896422706": 334, "00378": 334, "004": [303, 334, 356], "00490826": 150, "005": [356, 360], "006": [320, 356, 364], "0064": [306, 313], "007": [303, 354, 356], "008": [320, 349], "0084001": 21, "0084991": 21, "0085000": 21, "008716236651714974": 318, "0089": [306, 313], "009": 318, "0096": [306, 313], "00e": [307, 327, 342], "00m": 345, "01": [51, 52, 53, 59, 65, 103, 245, 302, 305, 312, 315, 323, 326, 330, 331, 334, 335, 338, 341, 342, 343, 344, 345, 347, 356, 358, 361, 364, 365, 367, 372, 373, 385, 393], "0100": 312, "0109": [306, 313], "011": 318, "011435804285508791": 318, "0144": 312, "0145": [306, 313], "0146": [176, 197, 312], "015": [320, 356], "0157": 312, "016": 334, "0164958180264647": 334, "01831": 90, "01985": [51, 52, 356], "02": [323, 329, 331, 333, 334, 338, 340, 341, 342, 343, 344, 347, 358, 373], "020": 355, "020025727886898": 355, "0202": 37, "0204": [306, 313], "024": 349, "0241": 176, "0247": [306, 313], "0271": 312, "029": 356, "02it": 309, "03": [293, 307, 315, 331, 333, 334, 335, 337, 338, 340, 342, 343, 344, 358, 360, 365, 367, 373], "0306": 312, "0318": [306, 313], "032": [349, 354], "0322": [306, 313], "0335": [306, 313], "0349": [306, 313], "03521": 170, "03679": 76, "038": 351, "039": 318, "03942249119281769": 318, "0398": 176, "03981": 87, "04": [235, 236, 244, 314, 323, 331, 344, 347, 373], "0413": 314, "0420": 317, "0431": [306, 313], "04715": 255, "05": [113, 148, 189, 251, 254, 255, 307, 316, 318, 320, 323, 326, 327, 331, 336, 337, 343, 344, 348, 356, 363, 367, 373, 379, 391], "050": 356, "0501": [306, 313], "0515": [306, 313], "0519": [306, 313], "052": [353, 354], "0523070216572739": 354, "0545": 318, "055": 356, "0559": [306, 313], "055923461914062": 354, "056": 354, "0568": [306, 313], "0588": 312, "05it": 331, "06": [307, 314, 323, 327, 329, 331, 344, 361, 373], "0603": 185, "0605": 317, "062": 361, "0623": [306, 313], "0642": [306, 313], "06474": [94, 95], "066": 356, "0667": 312, "0671": 312, "07": [323, 331, 337, 340, 343, 344, 352, 373], "0707": [306, 313], "0710": 314, "0712": [175, 182], "0732": [306, 313], "077": [207, 216, 314, 318, 323, 373], "07730712890625": 318, "077b83af57538aa183971a2fe0971ec1": 46, "07886": 214, "07it": 331, "08": [300, 323, 331, 343, 344, 367, 373, 378], "0800": 14, "0801": 14, "082": 356, "086": 363, "0864": 197, "0872": 312, "08845": 254, "08995": 251, "09": [344, 358, 373], "0900": 14, "09327": [261, 270], "094": 365, "094568888346355": 364, "095": 364, "09500349114552311": 313, "097": 356, "098": 319, "09it": [307, 341, 349], "0m": [314, 319, 365], "0mb": 331, "0mib": [308, 320, 364, 365], "0x7faeae5bda30": [309, 316, 345], "1": [12, 15, 16, 19, 20, 22, 23, 25, 28, 31, 33, 37, 38, 40, 41, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 83, 86, 88, 90, 91, 96, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 291, 293, 294, 296, 297, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 372, 376, 378, 379, 380, 381, 383, 385, 386, 387, 389, 391, 392, 393, 396], "10": [34, 37, 49, 72, 87, 92, 109, 157, 161, 168, 169, 170, 176, 195, 197, 207, 216, 224, 225, 243, 246, 249, 253, 254, 303, 306, 311, 313, 315, 317, 321, 325, 330, 331, 337, 341, 342, 343, 344, 345, 348, 349, 350, 351, 353, 354, 355, 356, 358, 360, 361, 362, 363, 364, 365, 368, 373, 378, 393], "100": [12, 14, 17, 26, 82, 113, 123, 125, 148, 162, 166, 167, 170, 183, 249, 251, 257, 303, 307, 308, 309, 310, 311, 312, 314, 317, 318, 319, 320, 326, 330, 331, 334, 335, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 361, 363, 364, 365, 391], "1000": [46, 77, 86, 102, 103, 145, 239, 250, 251, 314, 320, 343, 344, 350, 354, 360, 361, 362, 365, 391], "10000": 331, "1006": [182, 242], "100e": 232, "101": [303, 309, 331, 344, 349], "1010": 20, "1018": 20, "102": [331, 344], "1024": [131, 132, 184, 318, 331], "1024x1024": 22, "103": [331, 344], "1036": 311, "104": [331, 344], "104mb": 303, "105": [331, 344, 363], "105mb": 344, "106": [331, 344], "1068": 207, "107": [309, 327, 329, 331, 344, 373], "107m": 344, "108": [325, 331, 344, 356], "1080": 313, "10847507169258835": 356, "109": [309, 331, 344], "10x": [361, 362], "11": [49, 103, 214, 300, 302, 303, 309, 313, 320, 331, 338, 343, 344, 350, 356, 358, 361, 362, 368, 373], "110": [309, 317, 331, 344, 348], "1102": 214, "110940551757814": 303, "111": [303, 309, 331, 344], "112": [331, 344, 356], "11232": [33, 40], "113": [331, 333, 344, 373], "1135": 177, "1137": 87, "113m": 349, "114": [331, 344, 363], "1140": 315, "1145": 326, "114m": [303, 314], "115": [331, 344, 363], "116": [331, 344], "117": [331, 344], "11793": 249, "117mb": 348, "118": [331, 344], "11888": 342, "118mb": 350, "119": [331, 344], "119510806875491": 364, "12": [15, 19, 49, 107, 112, 303, 318, 325, 331, 343, 344, 353, 361, 362], "120": [303, 317, 331, 344, 364, 367, 373], "1200": [291, 293, 318], "12000": 391, "1200x1280": 391, "1202718281006854": 303, "121": [331, 343, 344], "12151": 41, "122": [331, 343, 344], "12231": 317, "1227": 182, "122mb": 303, "123": [331, 344], "124": [331, 344], "125": [306, 331, 344], "125m": 314, "126": [331, 344], "1269": 317, "127": [331, 343, 344], "128": [65, 70, 82, 83, 86, 91, 101, 181, 303, 315, 317, 319, 320, 321, 331, 334, 344, 348, 350, 363, 364, 383, 390], "128x128": [181, 303, 317, 320, 348, 350, 364], "129": [320, 323, 331, 344, 353, 373], "129271799567431": 353, "129m": [303, 349], "13": [163, 307, 313, 314, 331, 337, 343, 344, 351, 353, 363], "130": [317, 331, 343, 344, 363], "130374908447266": 363, "130m": 344, "131": [331, 344], "132": [331, 344], "1322": 363, "13247v2": [34, 37], "133": [309, 315, 323, 331, 344, 373], "1332": 363, "1336401602927466": 334, "134": [331, 334, 344], "135": [331, 344], "135388067": [303, 349], "136": [303, 312, 323, 331, 344, 373], "137": [331, 344], "138": [331, 344], "139": [331, 344], "13m": 354, "14": [24, 214, 320, 327, 331, 337, 343, 344, 351, 354, 356, 361, 365, 391], "140": [317, 331, 344, 365], "1400": 319, "1406": 239, "140e": 313, "141": [331, 344], "142": [331, 344], "1428": 318, "143": [331, 344, 362], "144": [303, 331, 344, 362], "145": [331, 344, 362], "146": [331, 344, 362, 365], "14610": 317, "14687": 250, "147": [331, 344, 362], "14756": 33, "148": [331, 344, 362], "149": [331, 344, 353], "14it": 307, "14m": [352, 353, 355], "15": [101, 181, 233, 234, 307, 319, 326, 331, 337, 340, 341, 343, 344, 353, 354, 361, 362, 364, 373, 390], "150": [22, 317, 331, 344, 347, 348, 350, 373], "1500": 343, "1506": 170, "151": [331, 344], "1510": 176, "1518": 197, "152": [331, 344, 362], "152mb": 330, "153": [331, 344], "153m": 344, "153mb": 319, "154": [331, 344], "155": [331, 344, 362], "155mb": [330, 355], "156": [331, 344], "157": [331, 344], "157mb": 319, "158": [102, 103, 331, 344], "159": [331, 344], "16": [15, 16, 21, 88, 121, 168, 169, 176, 183, 200, 201, 261, 268, 269, 270, 271, 275, 294, 296, 306, 320, 323, 330, 331, 338, 343, 344, 350, 353, 354, 360, 361, 376, 378, 379, 389, 392, 393], "160": [317, 330, 331, 344], "1608": 87, "160mb": [303, 353], "161": [331, 344], "1611": 76, "161mb": 344, "162": [331, 344], "163": [331, 344], "164": [331, 344], "16461435953776": 334, "164mb": 319, "165": [318, 331, 334, 344, 363], "1650": 207, "1653334600767409": 318, "1655": 126, "166": [331, 344], "1666": 207, "1668": 170, "167": [331, 344], "168": [331, 344], "169": [331, 344], "1696": 317, "169877507234071e": 348, "16m": 348, "16x16": [168, 169, 261, 268, 269, 270, 271, 378], "17": [291, 294, 303, 307, 319, 320, 331, 341, 343, 344, 349, 356], "170": [316, 317, 323, 331, 344, 373], "1707": [94, 95], "171": [331, 344], "172": [331, 344], "173": [306, 331, 344], "173828125": 300, "174": [303, 331, 344, 356], "175": [331, 344], "176": [331, 344, 348], "176m": 344, "176mb": 303, "177": [331, 344], "178": [331, 344, 364], "1788": [173, 182], "179": [331, 344], "17m": 350, "18": [103, 303, 307, 308, 314, 331, 334, 343, 344, 373], "180": [101, 207, 215, 216, 261, 263, 268, 269, 270, 271, 317, 331, 344], "181": [319, 331, 344], "1814": 185, "181mb": 354, "182": [331, 344], "1820": 182, "182mb": 318, "183": [331, 344], "1830": 327, "184": [331, 344], "184mb": 303, "185": [331, 344], "186": [331, 344], "186646143595378": 334, "187": [331, 334, 344, 362], "187019": [348, 350], "187mb": 344, "188": [331, 344, 365], "188174": 365, "189": [303, 331, 344], "19": [309, 320, 323, 331, 334, 342, 343, 344, 345, 352, 355, 356, 363, 364], "190": [314, 317, 331, 344], "1908": 254, "191": [331, 344], "192": [307, 323, 331, 344, 347, 373], "193": [331, 344, 349], "194": [303, 319, 331, 344], "194541857761619e": 348, "195": [331, 344], "196": [331, 344], "197": [303, 331, 344, 349], "198": [19, 331, 344], "1982": 167, "1985": 175, "198mb": 352, "199": [19, 331, 344, 349], "1991": 313, "1992": 163, "1_alex": 334, "1conv": 101, "1d": [90, 236, 237, 244, 321, 378], "1e": [34, 37, 51, 52, 53, 79, 84, 102, 103, 112, 113, 122, 123, 125, 140, 145, 160, 161, 162, 163, 164, 165, 166, 167, 169, 183, 191, 252, 253, 254, 255, 272, 300, 303, 307, 309, 315, 320, 325, 326, 331, 337, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 363, 364, 365, 386], "1e16": 124, "1e2": [163, 164, 165, 252, 341], "1e3": [253, 254, 255, 341], "1e4": 363, "1e8": 167, "1f": 154, "1j": [300, 314, 317], "1m": [337, 344, 365], "1mb": 344, "1mib": [326, 364, 365], "1x1024x1024": 391, "1z2us9zhjdgolu6r1jee0s2bbej2xv5": 331, "2": [15, 16, 20, 22, 25, 30, 31, 33, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 83, 84, 85, 86, 88, 90, 91, 93, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 115, 121, 122, 123, 125, 126, 127, 129, 130, 134, 140, 143, 145, 146, 147, 150, 151, 152, 156, 157, 160, 163, 166, 167, 168, 169, 170, 173, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 219, 229, 231, 232, 233, 234, 235, 236, 237, 239, 244, 250, 251, 252, 253, 254, 255, 259, 262, 267, 269, 271, 291, 293, 294, 296, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 325, 326, 327, 330, 331, 333, 334, 335, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 376, 378, 379, 380, 381, 385, 386, 387, 390, 391, 393, 396], "20": [15, 72, 86, 87, 251, 300, 312, 316, 317, 320, 326, 330, 331, 336, 342, 343, 344, 349, 351, 354, 356, 360, 362, 363, 364, 365, 386, 390], "200": [19, 88, 121, 317, 331, 335, 336, 344, 349, 361, 362, 364, 391], "2000": 326, "2000x2000": 391, "2007": 78, "2009": [103, 307, 325, 326, 334, 337], "200m": 344, "201": 314, "2010": 102, "2011": 121, "2012": [34, 37], "2013": [102, 103], "2017": [96, 118, 228, 307, 334], "2018": [84, 309, 363], "20185546875": 354, "202": [327, 354], "2020": 363, "2021": 46, "2022": [309, 341, 342, 345], "2024": [300, 368], "2025": [334, 368], "2040": 14, "2040x2040": 391, "204661061157774": [320, 364], "2048": 316, "205": [320, 364], "206": 303, "2064": 175, "2067779": 320, "2069441": 351, "209": 363, "20it": 309, "20m1387961": 87, "21": [214, 232, 234, 321, 326, 331, 335, 343, 344, 345, 348, 349, 356, 360], "2103": [33, 255], "210mb": 344, "211": 349, "211mb": 344, "213": [16, 319, 360], "2139": 175, "213mb": 349, "214": 319, "216": 373, "2160x2160": 391, "217": 319, "218mb": 351, "219": 361, "2197": 170, "219mb": 351, "22": [303, 314, 320, 331, 337, 343, 344, 347, 356, 361, 365, 373], "2201": [41, 249], "2209": [250, 342], "220mb": 344, "221mb": 344, "223": 363, "224": 310, "224x224": 310, "225m": 344, "225mb": 349, "2270": 126, "227mb": 349, "228": [318, 356], "228mb": 344, "229": [306, 323, 373], "229mb": 314, "22m": 364, "23": [303, 305, 309, 318, 331, 335, 336, 341, 343, 344, 351, 355, 356, 373], "2305": 251, "230mb": [314, 337], "2312": [33, 40, 90], "231mb": [303, 344, 349], "233": [311, 321, 323, 373], "233mb": 303, "234": [365, 367, 373], "2348": 126, "234mb": [303, 337, 344], "235": 303, "235mb": [303, 349], "2372": 319, "2376": 319, "237mb": 344, "238": 354, "23841247558594": 354, "238mb": [303, 314, 344], "23it": 303, "24": [303, 309, 318, 319, 320, 327, 331, 343, 344, 352, 354, 355, 364, 368], "2402": 317, "2403": [261, 270], "24033": 317, "2409": [51, 52, 356], "240mb": 314, "2419": 103, "241mb": 349, "242": 355, "2434": 103, "244mb": 344, "248": 391, "2489": 317, "24966812133789": 303, "249mb": 337, "25": [101, 195, 196, 233, 234, 239, 243, 247, 251, 300, 303, 312, 313, 330, 331, 341, 343, 344, 360, 390], "250": [21, 303], "2500": [79, 84, 168, 169, 378], "252m": 344, "253": 303, "2532": [242, 245], "253mb": 344, "254": [341, 347, 373], "2544": 317, "255": [101, 330, 331, 343, 344, 345, 390], "2550": 315, "25592549641927": 337, "256": [80, 83, 86, 91, 100, 135, 201, 233, 291, 303, 306, 307, 308, 316, 318, 326, 327, 337, 343, 344, 349, 383, 390], "256x256": [343, 344], "258": [207, 216], "25852": [117, 336], "2588": 197, "25it": [331, 344], "26": [330, 331, 342, 343, 344, 360, 363, 368], "2640": 207, "265": 362, "2674": 207, "26it": [303, 331, 344], "27": [319, 330, 331, 343, 344, 364], "270": [263, 337], "2704836828395761": 337, "2744": 126, "275": 318, "27505362033843994": 318, "276": [24, 365], "276m": 344, "279": [325, 329, 373], "27it": 344, "28": [314, 318, 319, 330, 331, 334, 341, 343, 344, 351, 354, 361, 362, 368, 379, 391], "281": [308, 323, 373], "285": 214, "28690": 300, "288": [361, 362], "2899": 317, "28crop": [309, 341, 342, 345], "28it": 344, "29": [309, 316, 319, 331, 337, 341, 342, 343, 344, 345, 354, 363, 364, 365], "2908": 185, "293": 320, "296": 361, "298856479885389": 303, "2989": 315, "299": 303, "299m": 344, "29it": 344, "2_2": [60, 72, 303], "2a": 52, "2artifact": 31, "2ax_": 335, "2cm": 122, "2d": [16, 20, 25, 108, 168, 171, 177, 185, 186, 187, 194, 195, 196, 198, 200, 204, 217, 218, 220, 221, 228, 230, 233, 237, 239, 240, 261, 263, 264, 265, 268, 269, 270, 271, 300, 306, 316, 321, 348, 349, 378, 391], "2e": [300, 303, 315], "2f": [34, 300, 309, 314, 315, 325, 326, 327, 330, 331, 335, 336, 338, 341, 342, 345], "2m": [170, 197, 349], "2mb": [350, 354, 361], "2mib": [320, 364], "2nd": 102, "2x": 348, "2x2": [168, 169, 185, 187, 379], "2x320x320": 25, "2x_": [335, 364], "3": [12, 15, 20, 22, 34, 37, 44, 46, 48, 52, 53, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 81, 82, 83, 86, 87, 88, 91, 92, 94, 95, 97, 99, 100, 101, 102, 106, 108, 109, 121, 126, 129, 140, 144, 147, 152, 170, 172, 173, 174, 175, 182, 183, 189, 197, 198, 199, 200, 207, 210, 211, 214, 231, 233, 234, 237, 238, 239, 242, 249, 251, 253, 254, 255, 260, 261, 267, 268, 269, 270, 271, 279, 291, 294, 296, 300, 303, 306, 307, 308, 311, 312, 313, 314, 315, 318, 320, 325, 326, 327, 329, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 348, 349, 351, 353, 354, 356, 360, 361, 362, 363, 364, 365, 376, 378, 379, 383, 389, 392, 393, 395, 396], "30": [267, 314, 317, 319, 331, 334, 337, 338, 342, 343, 344, 361, 363, 364, 368], "300": [314, 326, 327, 379, 391], "303": [354, 358, 373], "307": 320, "309": 365, "30e": 307, "30it": 349, "31": [240, 306, 326, 331, 344, 347, 354, 363, 365, 373], "310": 334, "3132": 315, "316": 319, "317": 340, "31m": 319, "32": [31, 43, 74, 77, 88, 94, 95, 121, 170, 171, 176, 183, 189, 200, 201, 249, 251, 303, 306, 308, 309, 312, 314, 315, 320, 330, 331, 334, 337, 338, 341, 342, 343, 344, 345, 350, 352, 353, 355, 356, 360, 363, 364, 365, 367, 373, 379, 383], "320": [16, 177, 185, 187, 198, 330], "320x320": [319, 348, 350, 391], "3223": 175, "322m": 344, "323": 360, "326": 362, "32it": 331, "32x32": [176, 183, 189, 200, 249, 251, 320, 364], "33": [307, 331, 334, 337, 342, 343, 344, 349], "3322": 317, "333": 228, "334": 307, "334139506022137": 307, "34": [314, 319, 323, 331, 337, 344, 348, 363, 365, 373], "3429": 317, "343": 318, "343320846557617": 318, "345m": 344, "346": [352, 355, 363], "346023559570312": [352, 355], "3467": 317, "348": [228, 303, 305, 373], "3487": 317, "349": 364, "35": [303, 309, 313, 314, 320, 330, 331, 333, 343, 344, 373], "3542": 317, "355": 365, "356": 360, "357": 86, "357m": 344, "35it": 331, "36": [325, 329, 331, 344, 348, 373], "360": [207, 263], "3608000": 303, "3617": 348, "362": 331, "3624": 175, "3636": 126, "3637": 321, "3695": 126, "36it": [331, 349], "37": [232, 319, 331, 340, 343, 344, 350, 363, 364, 365], "371": [361, 362], "372": 363, "373": 363, "3731": [182, 317], "374": 356, "3744": 185, "375": 351, "375037058737495": 351, "38": [331, 333, 344], "3809": 317, "381": [300, 302, 373], "3856": 207, "385k": [308, 326, 334, 365], "3881": 126, "388614665784662": 351, "389": 351, "38e": 307, "38it": [309, 331], "38m": [303, 330], "39": [303, 331, 344], "391": 323, "3929": [118, 334], "3938": [118, 334], "395e": [232, 313], "397": 300, "3986": [173, 182], "39it": 331, "3c353_gdth": 300, "3conv": 101, "3d": [16, 78, 85, 108, 109, 147, 168, 179, 183, 185, 186, 187, 188, 191, 219, 222, 232, 234, 240, 242, 270, 283, 291, 294, 322, 323, 324, 328, 329, 348, 349, 373, 376, 378, 380], "3f": [314, 356], "3k": 312, "3m": [303, 364], "3mb": [312, 335, 354], "3mib": 365, "3x3": [126, 170, 172, 175, 182, 183, 197, 207], "4": [15, 16, 19, 20, 22, 27, 31, 43, 51, 52, 63, 79, 80, 83, 88, 90, 93, 96, 99, 100, 101, 104, 105, 106, 113, 121, 122, 126, 168, 169, 174, 181, 183, 186, 189, 191, 207, 210, 211, 214, 230, 234, 235, 236, 237, 244, 262, 267, 272, 291, 293, 294, 300, 303, 306, 307, 308, 311, 313, 314, 316, 318, 320, 321, 325, 327, 330, 331, 334, 335, 337, 338, 342, 343, 344, 348, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 368, 376, 378, 379, 386, 391], "40": [317, 330, 331, 336, 342, 343, 344, 349, 350], "402": 334, "4024091561635335": 334, "4033": [173, 182], "407": [351, 353, 358, 373], "4081": 126, "4099398": 51, "40it": 331, "41": [326, 331, 344, 349, 363, 367], "411": [343, 344], "413": [317, 323, 373], "4133": 318, "414": 341, "415": [318, 323, 373], "41it": 331, "42": [310, 314, 331, 343, 344, 358, 365], "421": 320, "4249": 317, "429": [326, 329, 373], "4290": 185, "43": [167, 303, 319, 326, 331, 343, 344, 349, 361, 367, 373], "430": 303, "430047607421876": 303, "4312": 317, "4322": 175, "435": [313, 323, 373], "4375": 300, "4385367335731565": 354, "439": [350, 354], "43928527832031": 350, "43it": [303, 309, 331], "44": [314, 329, 331, 344], "444": 363, "444737": [352, 353, 354, 355, 356], "444867": [303, 349], "4453": 177, "4468237274226996": 334, "447": [315, 334], "449944205275518": 318, "45": [207, 303, 315, 316, 331, 343, 344, 365], "450": 318, "451": 341, "455": 391, "456": [337, 338, 340, 373], "4564": 185, "4569": 314, "458": 362, "46": [300, 303, 331, 344, 362], "460": [102, 103], "465": 356, "466": 363, "4666": 126, "47": [19, 309, 331, 337, 341, 343, 344], "4710": 317, "4736": 318, "4746": 317, "4776": 126, "479": [102, 103], "47it": [309, 331], "47mb": 354, "48": [19, 99, 200, 331, 344, 373, 391], "480": 319, "4805": 317, "481x321": 391, "482": 364, "4860": 207, "4882": 207, "489e": [232, 313], "48it": 331, "49": [37, 303, 319, 331, 344], "492": 102, "4949": 126, "4a": 211, "4e": 303, "4k": 319, "4m": [303, 337, 344, 365], "4mb": [319, 345, 361], "4mib": 365, "4x": [177, 319], "4x4": [174, 207], "5": [15, 22, 44, 46, 47, 48, 52, 53, 60, 64, 86, 92, 94, 95, 96, 101, 102, 103, 106, 113, 122, 123, 125, 126, 135, 160, 161, 162, 163, 164, 165, 169, 170, 171, 175, 183, 186, 187, 204, 205, 207, 208, 210, 211, 212, 216, 233, 238, 239, 245, 249, 251, 255, 261, 264, 268, 269, 270, 271, 272, 273, 275, 293, 296, 300, 303, 306, 307, 309, 312, 313, 314, 315, 316, 318, 320, 321, 325, 330, 331, 337, 340, 341, 342, 343, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 361, 362, 363, 364, 365, 372, 378, 379, 383, 385, 386, 389], "50": [15, 37, 101, 122, 131, 132, 140, 157, 161, 183, 184, 191, 199, 214, 261, 268, 269, 270, 271, 272, 300, 303, 311, 312, 314, 316, 317, 318, 320, 330, 331, 342, 343, 344, 351, 352, 364, 379, 390], "500": [183, 307], "5000": [15, 300, 330], "501": 352, "5012940824804186": 352, "502": [330, 333, 373], "505": 362, "507": 354, "5073385957994816": 354, "50e": 232, "50it": 331, "50m": 344, "50th": 311, "51": [37, 232, 234, 313, 327, 331, 343, 344, 349], "510": 391, "512": [15, 16, 20, 24, 83, 91, 232, 234, 319, 372, 385, 391], "512x512": 391, "516": [352, 358, 363, 373], "51it": 331, "51m": 354, "52": [303, 331, 343, 344], "526": 102, "5281": [207, 216], "5282": 170, "529": 362, "53": [331, 343, 344, 365], "534": 362, "5369": 126, "538": [320, 362], "539": 321, "53it": [318, 331], "53mb": 361, "54": [300, 331, 343, 344, 365], "5410": [173, 182], "543": 362, "548789978027344": 354, "549": [354, 360], "54it": [331, 341], "54k": [354, 361], "54m": [354, 361], "55": [22, 307, 313, 314, 317, 331, 343, 344], "5513": 126, "553": 362, "555": [319, 323, 373], "5567108": 180, "558": [352, 355, 356], "559": [353, 358, 373], "55it": 331, "55m": [318, 335], "56": [319, 331, 344], "566": 319, "567": [342, 347, 373], "568": 350, "5684": [170, 173, 182], "56it": 331, "56m": 345, "57": [207, 216, 300, 317, 331, 343, 344], "5720": 207, "5748996872970398": 337, "575": [337, 367], "576": 364, "5779": 170, "579": 362, "57it": 331, "58": [228, 331, 344], "582": 358, "5842": 214, "586": 320, "5870": 315, "58754328": 319, "58it": 331, "59": [309, 331, 344, 347], "5955": 317, "5976": 300, "598": [343, 347, 373], "59it": [331, 345, 349], "5a": 211, "5d": [31, 43, 267, 313, 383, 396], "5e": [320, 350, 351, 352, 355, 356, 362, 365], "5e3": 345, "5j": 314, "5m": [303, 319, 344, 349], "5mib": [320, 334, 365], "5x5": [341, 343], "6": [15, 22, 23, 88, 95, 99, 101, 121, 135, 136, 166, 167, 183, 197, 231, 237, 300, 306, 313, 317, 320, 325, 326, 330, 331, 342, 343, 344, 349, 354, 356, 362, 363, 364, 365, 367, 368, 391], "60": [15, 22, 317, 327, 331, 342, 343, 344], "604": [319, 363, 367, 373], "60it": 331, "61": [303, 331, 344], "611": 363, "61101531982422": 363, "616": 333, "6160": 170, "6179": 317, "61e": 342, "61it": 331, "61mb": 361, "62": [303, 331, 337, 344, 365], "6209": 185, "623": [345, 347, 373], "628": [310, 323, 373], "62it": [303, 331], "62m": 303, "63": [331, 343, 344, 349, 361], "631": 163, "633": [352, 355, 358, 373], "633206176757813": 352, "635": [356, 358, 373], "639": 364, "63it": 331, "64": [28, 69, 73, 81, 82, 83, 87, 91, 92, 97, 100, 181, 235, 236, 243, 244, 306, 309, 315, 316, 326, 327, 331, 335, 336, 337, 344, 348, 349, 351, 354, 361, 362, 365, 383], "6418031": 66, "644": 163, "64it": 331, "64x64": [316, 343], "65": [331, 344, 349, 365], "650": 391, "651": 360, "6536": 207, "6592": 317, "65it": 331, "65m": [354, 361], "66": [99, 331, 335, 341, 344], "665": [336, 340, 373], "668229": 360, "6687": 315, "669": [361, 367, 373], "66it": [331, 342], "67": [303, 307, 314, 331, 337, 342, 343, 344, 350], "671": 362, "6714502": [52, 53], "672": 351, "672152709960937": 351, "6752": 170, "677": 362, "678": 361, "679": 361, "67it": [331, 342], "68": [13, 320, 331, 344, 365, 391], "68080139160156": 348, "681": 348, "6879638671875": 353, "688": 353, "68878173828125": 356, "689": [351, 356, 363], "68945770263672": 351, "68it": [307, 331, 342], "69": [331, 344], "69037": 343, "6995": 207, "69it": 331, "6m": 314, "6mb": [331, 345], "7": [15, 80, 94, 168, 169, 171, 176, 182, 196, 214, 243, 251, 300, 307, 318, 320, 330, 331, 335, 336, 342, 343, 344, 349, 356, 362, 363, 364, 365, 378], "70": [182, 303, 317, 331, 337, 342, 343, 344, 349, 365], "7012": 317, "705": 303, "7051143970949734": 303, "7061": 317, "70888900756836": 353, "709": 353, "70e": [307, 313], "70it": 331, "71": [167, 309, 331, 342, 344, 365], "7125": 126, "7137": 207, "717": 365, "718": [350, 358, 373], "7193": [173, 182], "71it": 331, "72": [102, 331, 336, 337, 344, 364, 365], "722": 362, "726": 363, "72it": 307, "73": [314, 331, 337, 343, 344], "7302": 175, "7325177722415908": 303, "733": 303, "7340": 207, "735636393229164": 307, "736": 307, "738": 354, "73807144244024": 354, "739k": 331, "73it": 331, "74": [303, 331, 342, 344, 365], "7400": 317, "7412": 314, "7444": 239, "74856948852539": 350, "7488": 317, "749": 350, "74it": [309, 331], "75": [177, 264, 316, 320, 331, 343, 344, 362, 365], "7510": 317, "752": 319, "754": 349, "75595": 363, "757126": 300, "75it": 331, "76": [320, 331, 344, 365], "763": 363, "768": [24, 391], "769": 362, "76it": [331, 345], "77": [319, 331, 337, 343, 344, 364, 365], "77124": 318, "7715": 317, "772": 363, "775": 356, "776": 362, "7765691388022045": 353, "7769": 170, "777": 353, "77it": 349, "78": [300, 330, 331, 344, 345, 361, 362, 365], "782": 360, "784": [334, 340, 373], "786": [352, 355], "78632784200239": [352, 355], "7883": 126, "78mb": 354, "79": [311, 331, 342, 344, 345, 365], "7914941": 318, "792": 348, "7930": 317, "7944": 317, "795": [361, 362], "7969": 177, "797": 362, "7db": 354, "7m": [303, 330, 349], "7mb": [330, 361], "7mib": 365, "8": [15, 20, 22, 44, 47, 63, 64, 66, 67, 68, 71, 72, 75, 88, 99, 101, 103, 104, 105, 121, 145, 164, 167, 168, 169, 189, 214, 235, 236, 237, 243, 244, 294, 296, 300, 303, 306, 307, 309, 313, 316, 318, 319, 320, 321, 326, 327, 330, 331, 334, 337, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 378, 379, 383, 391], "80": [72, 309, 314, 317, 330, 331, 342, 343, 344, 365], "800": 391, "800x800": 391, "801k": [319, 350], "8064": 175, "8075": 197, "80e": 315, "80it": 331, "81": [331, 334, 344], "8137": 177, "814": 329, "816": [349, 358, 373], "8181": 170, "81it": 342, "82": [303, 331, 344], "820529": [319, 350], "820534": 319, "826": 356, "83": [303, 309, 314, 331, 343, 344], "8307932": [207, 216], "8343": 317, "8380": 182, "8395": 317, "83it": [331, 342], "83m": 365, "84": [331, 344], "8405": 197, "843": 363, "84390640258789": 348, "844": 348, "84499": 391, "8457": 207, "8477": 317, "848833121419835": 320, "849": 320, "85": [249, 300, 331, 344, 349, 363], "851647675037384": 348, "852": 348, "856": 363, "8567": 182, "859": 320, "85it": 342, "85m": 320, "86": [319, 331, 344, 345, 349], "8622": 185, "864": 365, "87": [318, 331, 335, 343, 344, 365], "872": 348, "8746174573898315": 348, "875": 348, "876": [348, 355], "876023864746095": 355, "88": [303, 314, 331, 344, 349, 351], "881": 356, "8814043693576259": 356, "88it": 309, "89": [303, 331, 344], "8986": 126, "8994": 242, "899650573730469": [320, 364], "89it": 342, "8a": 211, "8m": [320, 330, 344, 351, 364, 365], "8mb": [303, 354, 361], "8mib": 365, "8x64x64": [235, 236, 244], "9": [47, 51, 52, 93, 113, 183, 231, 232, 237, 303, 306, 307, 313, 318, 320, 321, 327, 330, 331, 337, 342, 343, 344, 345, 348, 349, 354, 356, 358, 361, 362, 363, 364], "90": [22, 90, 263, 267, 306, 314, 317, 321, 325, 331, 342, 343, 344, 349, 350], "900": [96, 319, 320, 350, 364], "9000": 126, "9002": 207, "902": [314, 337], "902320861816406": 337, "9026750869443771": 307, "903": 307, "908": 320, "90it": [319, 331], "90m": 349, "91": [331, 342, 344, 354], "912": 318, "9127841": 199, "91it": [303, 309, 331], "91m": [354, 361], "92": [303, 314, 330, 331, 344], "921": 320, "921340942382812": 320, "93": [331, 343, 344, 361], "9332": 170, "9360": 207, "9387": 317, "94": [330, 331, 344], "945": [360, 367, 373], "946": 319, "9493": 207, "95": [214, 309, 314, 330, 331, 344], "952": 360, "9531": 317, "9547": 391, "955k": 318, "956": [335, 340, 373], "958": 363, "96": [315, 331, 344, 345], "9605e": 378, "9648": 317, "96it": 331, "97": [303, 331, 336, 343, 344], "972": 319, "973": 391, "978": 303, "978289794921874": 303, "9793": 207, "97it": [309, 331], "98": [330, 331, 344], "98084411621094": 356, "981": 356, "9860": 177, "9897": 207, "99": [103, 331, 335, 344, 363, 365], "994": [348, 358, 373], "996": [319, 365], "9971": 207, "999": 314, "9999": [49, 393], "99e": 327, "9k": [331, 354, 361], "9m": [303, 314, 337, 351, 365], "9mb": [303, 318, 319], "9mib": 365, "A": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 28, 37, 39, 44, 47, 51, 52, 53, 76, 83, 85, 86, 96, 98, 102, 103, 108, 113, 119, 122, 123, 125, 134, 150, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 210, 213, 214, 217, 218, 219, 220, 221, 222, 224, 225, 230, 233, 235, 236, 238, 239, 240, 242, 243, 244, 248, 250, 254, 255, 256, 259, 273, 283, 284, 289, 291, 296, 300, 307, 312, 315, 318, 320, 322, 323, 324, 325, 326, 327, 330, 331, 335, 336, 337, 338, 341, 343, 344, 351, 359, 361, 362, 363, 364, 371, 373, 374, 375, 377, 379, 380, 381, 382, 384, 385, 386, 387, 389, 391, 395, 396], "AT": [166, 167], "And": [99, 106, 167], "As": [117, 141, 147, 181, 279, 300, 303, 325, 330, 331, 334, 336, 343, 344, 348, 349, 350, 351], "At": [31, 43, 46, 47, 79, 99], "By": [12, 16, 19, 25, 27, 31, 33, 39, 40, 41, 42, 43, 46, 47, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 99, 113, 126, 134, 139, 140, 142, 183, 185, 189, 191, 253, 254, 255, 257, 261, 263, 264, 281, 306, 319, 321, 348, 350, 393], "For": [22, 44, 47, 55, 57, 90, 99, 102, 103, 107, 113, 141, 147, 155, 163, 164, 170, 171, 184, 191, 199, 205, 218, 221, 231, 235, 236, 244, 254, 255, 261, 263, 267, 272, 274, 300, 303, 306, 309, 312, 313, 318, 319, 320, 321, 325, 326, 327, 331, 335, 336, 338, 343, 344, 348, 349, 354, 360, 361, 362, 364, 365, 385, 386, 391, 393, 394, 395, 396], "If": [12, 13, 14, 15, 16, 17, 18, 19, 21, 24, 25, 26, 27, 31, 40, 41, 46, 47, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 86, 87, 90, 91, 96, 99, 100, 101, 107, 108, 113, 121, 124, 134, 135, 140, 143, 147, 148, 149, 150, 151, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 173, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 204, 205, 206, 207, 209, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 240, 241, 242, 253, 254, 255, 256, 259, 267, 272, 273, 274, 275, 279, 288, 289, 291, 294, 296, 300, 312, 315, 331, 351, 361, 362, 364, 369, 370, 379, 384, 387, 395, 396], "In": [12, 19, 20, 27, 43, 73, 76, 86, 103, 111, 118, 125, 150, 170, 172, 183, 200, 207, 300, 303, 306, 307, 310, 311, 312, 313, 314, 316, 318, 320, 325, 326, 327, 330, 331, 334, 335, 336, 337, 341, 342, 343, 344, 345, 348, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365, 374, 383, 386, 389, 392, 393, 394, 395], "It": [12, 13, 19, 26, 27, 31, 33, 40, 43, 54, 69, 70, 78, 86, 87, 93, 105, 108, 109, 129, 135, 164, 168, 169, 176, 183, 184, 189, 191, 200, 201, 204, 205, 211, 212, 249, 259, 278, 306, 313, 317, 319, 326, 327, 331, 375, 376, 379, 383, 389], "No": [73, 88, 121, 185, 237, 267, 300, 383, 384, 386, 392, 396], "On": 331, "One": [306, 344, 361], "The": [12, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 26, 27, 29, 31, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 56, 60, 69, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 113, 115, 117, 118, 119, 121, 122, 124, 126, 127, 133, 134, 135, 138, 139, 141, 144, 152, 153, 154, 155, 156, 157, 160, 161, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 195, 196, 198, 199, 200, 202, 203, 205, 206, 207, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 232, 233, 234, 235, 236, 238, 242, 243, 244, 245, 248, 249, 250, 251, 253, 254, 255, 256, 259, 261, 267, 270, 272, 291, 293, 294, 295, 303, 306, 307, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 325, 326, 327, 331, 334, 335, 336, 337, 338, 341, 342, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 369, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 395, 396], "Their": 363, "Then": [90, 187, 214, 306, 331, 348], "There": [15, 19, 20, 131, 132, 196, 300, 344, 353, 355, 356, 381, 396], "These": [9, 12, 25, 107, 141, 207, 260, 268, 269, 271, 273, 303, 316, 318, 319, 321, 349, 361, 362, 379, 392, 396], "To": [16, 20, 27, 31, 43, 44, 47, 69, 72, 74, 99, 141, 161, 229, 241, 267, 296, 303, 306, 313, 316, 319, 330, 343, 344, 348, 354, 360, 364, 365, 383, 393], "With": [310, 314, 344], "_": [20, 37, 40, 41, 58, 59, 60, 61, 62, 90, 102, 103, 113, 119, 123, 124, 125, 126, 127, 128, 129, 130, 134, 137, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 152, 154, 156, 157, 173, 238, 250, 251, 300, 303, 314, 319, 325, 326, 327, 331, 335, 343, 344, 348, 351, 360, 361, 362, 364, 365, 378, 381, 385, 386], "_0": 344, "_1": [113, 122, 125, 127, 128, 325, 361, 386, 393], "_2": [34, 37, 44, 51, 52, 53, 54, 102, 103, 113, 115, 122, 123, 124, 125, 126, 127, 129, 130, 146, 207, 254, 255, 300, 303, 307, 325, 326, 327, 344, 351, 355, 356, 361, 362, 364, 381, 386, 393], "_4": 321, "__add__": [242, 267], "__class__": 349, "__getitem__": 19, "__init__": [55, 57, 58, 59, 60, 61, 62, 253, 300, 307, 310, 315, 335, 337, 341, 363], "__iter__": 310, "__mul__": [182, 183, 188, 191, 267], "__name__": 349, "_c": [309, 316, 345], "_f": [134, 273, 389], "_g": [273, 389], "_get_param": 267, "_i": [48, 72, 181, 393], "_k": 303, "_m": 47, "_n": [108, 109], "_p": [66, 393], "_t": [250, 251, 343, 344], "_transform": 267, "_vf": 321, "_x": [119, 144, 183, 191], "_z": [303, 381], "a_": [40, 41, 170, 183, 190, 191, 351], "a_1": [40, 42, 47, 144, 182, 183, 191, 203, 248, 352, 354, 379], "a_2": [40, 42, 47, 144, 182, 183, 188, 191, 203, 248, 352, 354, 379], "a_a_adjoint": [173, 183], "a_adjoint": [12, 16, 113, 122, 168, 169, 170, 171, 173, 176, 177, 181, 183, 185, 187, 195, 196, 198, 201, 202, 207, 210, 256, 300, 309, 312, 315, 316, 318, 319, 326, 327, 335, 336, 338, 341, 342, 343, 345, 348, 360, 361, 362, 364, 365, 377, 379], "a_adjoint_a": [173, 183, 319], "a_dagg": [12, 51, 170, 173, 177, 180, 181, 183, 189, 190, 191, 199, 207, 256, 300, 311, 314, 315, 316, 318, 331, 354, 363, 379], "a_forward": [113, 122], "a_g": 41, "a_i": [144, 202, 248], "a_n": [203, 248], "a_t": [250, 344], "a_vjp": [119, 144, 183, 190, 191], "aa": [173, 183], "aat": 166, "ab": [33, 34, 37, 40, 41, 51, 52, 87, 90, 94, 95, 170, 176, 200, 249, 250, 251, 254, 255, 261, 270, 306, 313, 317, 319, 342, 343, 345, 356], "abc": 230, "aberr": [306, 313], "abl": [260, 310, 343, 344], "about": [19, 98, 160, 300, 314, 353, 355, 383, 391, 392], "about_mapstyle_vs_iter": 310, "abov": [22, 49, 90, 113, 150, 171, 177, 185, 187, 198, 296, 300, 303, 319, 343, 349, 379, 380], "abs_angl": [110, 314], "absenc": [138, 139], "absolut": [67, 101, 110, 163, 164, 165, 191], "abstract": [51, 52, 53, 66, 180, 199, 230], "abud": 318, "abund": [181, 318], "abus": 134, "ac": [17, 348], "acar": [47, 237], "acceler": [80, 107, 113, 122, 177, 185, 187, 198, 219, 222, 230, 235, 236, 244, 254, 260, 272, 316, 341, 348, 350, 387], "accept": [9, 110, 267, 396], "access": [16, 19, 20, 24, 26, 310, 349, 379], "accord": [79, 174, 186, 195, 200, 230, 231, 235, 236, 237, 238, 244, 392], "accordingli": [88, 121, 395], "account": [83, 341, 369, 392], "accur": 306, "achiev": [44, 113, 260, 354], "acknowledg": 369, "acm": 167, "acorss": 181, "acquir": [19, 314], "acquisit": [113, 183, 191, 200, 253, 254, 255, 273, 350, 374, 379], "across": [12, 27, 105, 113, 200, 206, 223, 230, 235, 236, 244, 247, 272, 273, 293, 312, 348, 361, 362, 364, 365, 378, 391, 392, 395, 396], "act": [104, 105, 113, 184, 267, 309, 355, 379, 386], "act_mod": [83, 91], "action": [90, 268, 269, 270, 271], "activ": [49, 83, 87, 91, 97, 232, 233, 234, 306, 313, 372, 392], "actual": [43, 134, 344, 348], "ad": [44, 179, 184, 192, 193, 208, 209, 242, 324, 343, 375, 381], "adam": [84, 259, 303, 309, 318, 319, 320, 331, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "adapt": [12, 31, 32, 38, 42, 43, 44, 46, 47, 48, 51, 52, 53, 79, 86, 97, 99, 101, 102, 103, 104, 105, 107, 113, 118, 144, 167, 207, 216, 237, 308, 348, 354, 376, 381, 382, 383, 392], "adapt_model": [31, 32, 38, 43, 44, 46, 47, 348, 353, 354], "add": [12, 30, 44, 99, 101, 178, 179, 183, 184, 188, 191, 192, 193, 206, 208, 209, 236, 300, 307, 308, 319, 325, 326, 334, 337, 343, 360, 379, 391], "addit": [12, 34, 44, 83, 86, 91, 99, 113, 129, 148, 158, 159, 170, 183, 204, 205, 207, 259, 274, 275, 303, 314, 344, 386, 392], "addition": [259, 264, 344], "address": 369, "adj_project": 300, "adjnufftobj": 300, "adjoint": [76, 102, 103, 113, 121, 145, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 183, 185, 187, 195, 196, 198, 201, 202, 207, 210, 217, 218, 219, 221, 222, 226, 227, 300, 315, 318, 319, 326, 327, 338, 363, 364, 375, 377, 378, 379, 382], "adjoint_funct": [183, 377], "adjointness_test": [183, 315], "adjust": [173, 186, 236, 307], "adler": 363, "admit": 325, "admm": [122, 148, 149, 273, 274, 275, 307, 371, 386], "adv": [58, 59, 60, 61, 62, 303, 381], "advanc": [12, 79, 302, 306, 313, 373, 392], "advantag": 341, "adversari": [12, 18, 26, 27, 38, 50, 55, 56, 57, 58, 59, 60, 61, 62, 79, 81, 82, 85, 89, 97, 98, 106, 168, 183, 191, 239, 240, 242, 258, 259, 281, 283, 305, 373, 374, 384], "adversarial_loss": [55, 57], "adversarialoptim": [259, 303], "adversarialschedul": 303, "adversarialtrain": [303, 381], "advis": 344, "af_": 309, "aff": [268, 349], "affect": [27, 123, 183, 191, 374, 379], "affin": [260, 261, 321, 349, 396], "after": [16, 19, 49, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 99, 101, 122, 139, 195, 196, 253, 259, 267, 295, 296, 300, 303, 312, 317, 325, 331, 341, 354, 369], "afterward": 363, "ag_": 84, "again": [13, 14, 15, 17, 18, 21, 24, 25, 26], "against": 19, "aghabigl": 300, "agnost": [104, 383], "agre": [16, 25, 319, 348, 350], "agreement": [16, 25, 319, 348, 350], "ahead": 259, "ai": [12, 74, 300], "aim": [181, 300, 369, 381, 389], "airi": [232, 300, 306, 313], "al": [47, 58, 59, 60, 61, 62, 73, 78, 79, 81, 82, 84, 86, 89, 96, 97, 102, 106, 107, 236, 237, 260, 261, 270, 300, 303, 307, 309, 318, 321, 326, 334, 337, 343, 344, 348, 349, 390], "algebra": 341, "algorithm": [5, 7, 10, 12, 13, 18, 24, 27, 38, 50, 79, 85, 87, 93, 94, 95, 102, 103, 109, 113, 114, 117, 118, 119, 122, 123, 125, 129, 134, 137, 138, 140, 141, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 173, 176, 179, 183, 188, 191, 193, 200, 206, 207, 213, 236, 250, 251, 252, 253, 254, 255, 256, 272, 273, 274, 275, 281, 283, 284, 286, 287, 289, 291, 292, 295, 300, 312, 314, 315, 317, 324, 339, 340, 346, 347, 364, 366, 367, 371, 373, 374, 384, 391], "alia": [15, 16, 20, 257], "alias": 214, "align": [149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 213, 250, 251, 273, 325, 335, 343, 344, 364, 385, 389], "all": [9, 12, 13, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 29, 32, 38, 40, 47, 67, 68, 69, 83, 84, 88, 90, 99, 108, 113, 120, 121, 136, 147, 148, 163, 164, 166, 167, 182, 186, 205, 207, 215, 216, 225, 229, 231, 237, 241, 260, 262, 267, 273, 274, 275, 293, 296, 300, 306, 307, 308, 309, 310, 314, 319, 320, 321, 324, 325, 334, 335, 336, 337, 338, 344, 348, 349, 350, 351, 352, 353, 355, 356, 360, 361, 362, 364, 365, 369, 373, 374, 379, 380, 383, 384, 386, 387, 390, 391, 392, 393, 394, 395, 396], "allclos": [183, 210, 314, 319, 379], "allow": [16, 19, 103, 169, 177, 182, 200, 259, 260, 278, 376, 396], "almost": 231, "alon": [33, 384, 392], "along": [86, 95, 113, 122, 177, 213, 256, 261, 267, 268, 269, 270, 271, 300, 307, 326, 327, 335, 336, 338, 363], "alongsid": [259, 319], "alparon": 73, "alpha": [44, 64, 73, 86, 91, 250, 251, 253, 254, 255, 341, 343, 344, 345, 393], "alpha_j": 344, "alpha_k": [152, 386], "alpha_t": [86, 344], "alphas_cumprod": 343, "alreadi": [13, 14, 15, 17, 21, 24, 25, 26, 27, 105, 338, 355], "also": [12, 16, 18, 27, 31, 40, 43, 47, 51, 52, 69, 83, 86, 87, 91, 100, 101, 108, 127, 141, 143, 167, 169, 173, 177, 182, 183, 187, 198, 204, 205, 206, 225, 259, 267, 303, 306, 313, 314, 315, 316, 318, 319, 321, 338, 342, 344, 348, 353, 354, 355, 356, 361, 362, 369, 377, 379, 380, 385, 386, 387, 389, 390, 391, 392, 393, 395, 396], "altern": [12, 35, 36, 134, 149, 177, 182, 198, 303, 310, 334, 338, 343, 344, 381, 386], "although": [47, 141], "altogeth": 354, "alwai": [64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 200, 237, 267, 319, 344, 386], "ambientgan": [61, 62, 79, 381], "among": [15, 20, 147, 306, 310, 326, 334, 360, 363, 386, 394], "amount": [181, 255, 266, 267, 338, 343, 375], "amplitud": [111, 112, 209, 232, 234, 313], "amplitudeloss": 386, "an": [12, 19, 20, 31, 34, 43, 51, 52, 53, 69, 76, 79, 80, 82, 83, 84, 86, 87, 90, 91, 97, 98, 100, 102, 103, 108, 109, 113, 119, 120, 129, 134, 135, 138, 140, 141, 147, 148, 150, 152, 155, 161, 162, 167, 170, 173, 177, 179, 181, 182, 183, 185, 187, 188, 190, 191, 195, 197, 200, 204, 205, 213, 231, 232, 234, 237, 240, 250, 251, 253, 254, 255, 256, 259, 261, 264, 267, 270, 272, 273, 274, 275, 279, 283, 286, 288, 289, 291, 294, 296, 300, 303, 306, 307, 308, 310, 312, 314, 315, 316, 318, 320, 321, 322, 323, 324, 330, 331, 335, 336, 337, 341, 342, 344, 345, 348, 349, 350, 351, 353, 355, 356, 361, 362, 364, 368, 369, 370, 373, 374, 376, 378, 379, 381, 382, 384, 386, 389, 391, 392, 393, 396], "analog": 259, "analogi": 181, "analysi": [368, 378], "analyz": [181, 376], "anatomi": [25, 319], "ancestr": 344, "anderson": [113, 122, 272], "anderson_acceler": [113, 122, 360], "anderson_acceleration_backward": [272, 360], "anderson_acceleration_step": 122, "andrew": 371, "angap": 313, "angl": [12, 23, 75, 88, 119, 121, 131, 135, 136, 140, 141, 173, 175, 183, 184, 188, 191, 207, 209, 213, 215, 216, 261, 263, 268, 269, 270, 271, 291, 306, 313, 314, 316, 317, 324, 330, 332, 333, 338, 354, 363, 373, 390, 396], "angular": 313, "ani": [12, 27, 31, 33, 39, 40, 41, 42, 43, 47, 50, 51, 56, 67, 68, 79, 90, 92, 107, 135, 150, 177, 183, 185, 187, 191, 198, 206, 207, 216, 236, 244, 256, 257, 267, 272, 273, 303, 308, 310, 314, 315, 318, 321, 369, 370, 380, 381, 383, 384, 385, 389, 392], "anim": [296, 348, 376], "anim_kwarg": 296, "anim_writ": 296, "anisotrop": 213, "anneal": 46, "annoi": 206, "annot": [20, 391], "annual": 368, "anoth": 31, "ansi": 306, "ansi_standard_indic": 306, "anti": 214, "antiproportion": 184, "anyth": 348, "ap": 101, "apertur": [171, 232, 234, 313, 318], "appear": [300, 379], "append": [278, 314, 317, 343, 344], "appli": [15, 18, 32, 43, 47, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 85, 86, 90, 92, 93, 96, 98, 100, 102, 103, 106, 108, 110, 113, 143, 145, 147, 160, 168, 169, 171, 172, 173, 176, 177, 181, 182, 183, 185, 187, 189, 190, 195, 196, 198, 199, 200, 201, 203, 206, 215, 219, 222, 231, 237, 250, 261, 268, 269, 270, 271, 300, 303, 306, 309, 318, 325, 326, 327, 331, 335, 341, 342, 343, 344, 345, 354, 361, 365, 378, 381, 382, 384, 386], "applic": [102, 103, 195, 300, 318, 378, 379], "apply_nois": [33, 40, 41], "approach": [76, 79, 171, 181, 300, 321, 351, 363, 394], "appropri": [31, 43, 47, 65, 70, 108, 129, 343], "approx": [37, 46, 207, 341, 344, 345, 375, 381], "approxim": [19, 44, 46, 51, 52, 53, 90, 108, 121, 143, 147, 183, 207, 228, 231, 237, 250, 254, 300, 313, 316, 331, 338, 341, 345, 362, 379, 387, 390], "ar": [3, 12, 15, 16, 19, 20, 22, 25, 27, 28, 31, 32, 39, 40, 41, 43, 44, 46, 47, 49, 52, 56, 76, 79, 84, 85, 86, 87, 90, 94, 95, 98, 99, 103, 106, 107, 108, 109, 110, 113, 122, 134, 138, 139, 147, 149, 150, 151, 154, 163, 164, 166, 167, 168, 170, 172, 173, 176, 177, 180, 182, 183, 185, 186, 187, 189, 191, 194, 195, 197, 198, 201, 202, 203, 204, 205, 207, 213, 215, 216, 220, 225, 228, 229, 231, 233, 235, 236, 237, 241, 242, 243, 248, 250, 253, 254, 255, 256, 259, 261, 263, 267, 268, 269, 271, 273, 288, 289, 291, 293, 294, 295, 296, 300, 303, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 349, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365, 369, 372, 374, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396], "arang": [31, 43, 215, 216], "arbitrari": [108, 267, 314, 319, 343, 344, 391], "architectur": [10, 76, 77, 80, 83, 87, 91, 96, 99, 100, 101, 106, 275, 279, 303, 309, 312, 319, 320, 343, 348, 350, 352, 353, 354, 355, 356, 360, 364, 365, 371, 374, 381, 383, 384], "archiv": 19, "aren": [65, 70, 267], "arg": [29, 30, 33, 41, 55, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 82, 88, 90, 96, 102, 103, 108, 109, 112, 113, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 155, 157, 162, 183, 191, 230, 231, 235, 236, 237, 244, 257, 258, 260, 262, 263, 264, 265, 266, 267, 272, 273, 296, 300, 307, 319, 325, 331, 337, 362, 363, 364, 385, 386], "argentina": [309, 341, 342, 345], "argmin": [86, 123, 125, 127, 129, 130, 140, 251, 303, 343, 381], "args_model": 34, "argument": [18, 21, 22, 25, 34, 50, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 88, 99, 113, 121, 122, 131, 132, 148, 158, 159, 166, 188, 206, 224, 257, 259, 267, 273, 274, 275, 310, 321, 391, 393], "aris": 331, "arithmet": [267, 321], "around": [213, 311, 368, 376], "arrai": [20, 86, 194, 195, 247, 251, 276, 300, 316, 343], "arridg": 363, "arriv": 395, "arrow": 13, "art": [300, 371], "artefact": 390, "artifact": [12, 31, 76, 101, 207, 216, 256, 257, 348, 351, 374, 381, 383, 384], "artifact2artifact": [12, 25, 31, 38, 43, 47, 173, 177, 183, 185, 186, 191, 198, 206, 229, 230, 231, 236, 242, 244, 279, 281, 283, 291, 296, 324, 357, 358, 373], "artifact2artifactloss": [47, 229, 348, 392], "artifact2artifactsplittingmaskgener": 380, "artifact_remov": 364, "artifactremov": [48, 85, 107, 170, 183, 207, 320, 351, 352, 353, 354, 355, 356, 382, 394], "arxiv": [33, 34, 37, 40, 41, 51, 52, 76, 87, 90, 94, 95, 170, 176, 239, 249, 250, 251, 254, 255, 261, 270, 342, 356], "asarrai": 343, "ascent": [51, 52], "ask": 369, "assert": [300, 314, 319, 379], "assess": 73, "assign": [27, 189, 348, 380], "associ": [19, 27, 31, 33, 38, 39, 40, 41, 42, 44, 46, 47, 51, 52, 53, 55, 57, 102, 103, 113, 122, 129, 140, 145, 195, 225, 253, 300, 311, 316, 343, 361, 390, 391, 395], "assum": [12, 33, 40, 59, 60, 62, 86, 105, 124, 169, 181, 186, 206, 207, 215, 216, 254, 255, 267, 318, 319, 343, 344, 348, 392, 395], "assumpt": [150, 250, 392], "astigmat": 306, "at_next": 344, "ata": 166, "atan": 338, "aten": [311, 321], "atmospher": 180, "attempt": [267, 283, 384], "attent": [86, 99, 101, 338], "attn_drop_r": 101, "attr": 321, "attribut": [69, 79, 149, 150, 151, 171, 179, 184, 192, 193, 208, 209, 295, 308, 343, 380, 394], "atu": 95, "au": [123, 125, 129], "augment": [9, 23, 27, 33, 38, 40, 41, 85, 90, 93, 179, 188, 206, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 284, 289, 291, 296, 322, 323, 324, 373, 374, 396], "author": [86, 101, 343, 344, 363, 390], "authorship": 369, "auto_exampl": [302, 305, 323, 329, 333, 340, 347, 358, 359, 367], "auto_examples_jupyt": 324, "auto_examples_python": 324, "autocalibr": 237, "autoencod": [31, 43, 383], "autograd": [344, 377], "automat": [12, 140, 141, 142, 183, 191, 267, 307, 313, 314, 338, 344, 369, 377, 390, 395], "aux": 113, "aux_x": 344, "auxiliari": [102, 113, 122], "avail": [76, 83, 86, 87, 90, 91, 100, 101, 108, 109, 123, 125, 147, 166, 183, 191, 228, 300, 306, 310, 317, 318, 319, 320, 325, 350, 364, 376, 378, 380, 381, 383, 385, 389, 390, 391], "averag": [12, 15, 43, 44, 47, 83, 90, 91, 105, 131, 132, 168, 169, 171, 172, 183, 184, 189, 206, 256, 267, 276, 315, 321, 325, 342, 345, 348, 354, 376, 379, 383, 393, 396], "averagemet": [12, 376, 393], "avg": [331, 395], "avg16": 15, "avg2": 15, "avg4": 15, "avg8": 15, "avgpool": [83, 91], "avoid": [27, 84, 112, 136, 253, 259, 309, 310, 341], "awar": 383, "award": 368, "awgn": 344, "ax": [113, 121, 122, 125, 129, 150, 163, 164, 166, 167, 170, 173, 183, 207, 213, 262, 291, 300, 307, 326, 327, 330, 331, 345, 361, 362, 364, 378, 387], "ax_": 341, "ax_cur": 94, "ax_k": [361, 362], "axi": [126, 207, 216, 261, 262, 268, 325, 343], "axial": [232, 313], "b": [31, 43, 51, 52, 53, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 92, 93, 96, 101, 104, 105, 111, 112, 120, 123, 124, 127, 130, 132, 157, 161, 163, 164, 166, 167, 168, 171, 172, 177, 181, 185, 186, 187, 190, 194, 195, 197, 198, 199, 201, 205, 206, 210, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 235, 241, 243, 244, 253, 254, 255, 267, 291, 294, 296, 303, 309, 311, 312, 313, 314, 317, 318, 319, 330, 331, 335, 337, 341, 342, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 361, 362, 364, 380, 383, 386, 393, 396], "b1hw": 73, "b4": [309, 341, 342, 345], "b_": [195, 197, 199, 311], "b_1": 195, "b_2": 195, "b_dagger": [190, 205], "b_i": [51, 111, 386], "b_l": 195, "b_t": [250, 344], "back": [12, 27, 76, 115, 207, 274, 275, 300, 343, 361, 362], "backbon": [46, 76, 79, 96, 107, 279, 309, 319, 320, 361, 389, 393, 394], "backbone_gener": 79, "backbone_infer": [76, 107], "backbone_net": [76, 96, 104, 105, 351], "backend": 300, "background": [138, 139, 199, 311], "backproject": [95, 300, 316, 331, 360, 361, 362, 363, 365], "backpropag": [34, 37, 78, 135, 344, 374, 387], "backtrack": [113, 307, 327, 337], "backtrak": 307, "backward": [12, 59, 60, 62, 123, 125, 207, 259, 272, 307, 331, 371, 389, 395], "balanc": [381, 393], "ball": [123, 124, 125, 364], "band": [147, 171, 181, 189, 318, 361, 393], "bar": [12, 27, 79, 251, 256, 320, 344, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365], "barbara": [306, 335], "bare": 19, "base": [1, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 215, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 277, 279, 285, 303, 309, 319, 330, 341, 344, 348, 363, 371, 378, 381, 383, 384, 385, 386, 387, 391, 392, 393], "base_dir": [303, 307, 308, 312, 314, 320, 325, 326, 327, 334, 335, 336, 337, 338, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "baseclass": 69, "basedeq": [274, 389], "baselin": [303, 354], "baselossschedul": [35, 36, 45, 49, 392], "basemaskgener": [235, 236, 244], "baseoptim": [118, 148, 273, 275, 334, 337, 338, 386], "baseunfold": [272, 274, 275, 389], "bash": 283, "basi": [312, 325, 361, 364, 368], "basic": [168, 169, 181, 183, 187, 259, 261, 316, 323, 371, 373, 378, 379], "basplib": 300, "batch": [12, 20, 23, 27, 29, 31, 38, 43, 46, 55, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 83, 84, 86, 87, 88, 97, 104, 106, 112, 113, 120, 121, 124, 127, 130, 132, 135, 162, 163, 164, 166, 167, 177, 181, 182, 185, 198, 199, 206, 210, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 256, 260, 261, 264, 267, 268, 269, 270, 271, 276, 291, 293, 294, 308, 310, 326, 331, 334, 337, 350, 351, 360, 361, 362, 383, 393], "batch_dimens": 162, "batch_norm": [97, 106, 303, 320, 349], "batch_siz": [20, 27, 51, 52, 53, 54, 83, 88, 94, 95, 121, 182, 195, 206, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 303, 306, 307, 308, 310, 313, 319, 320, 330, 331, 334, 337, 344, 348, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365, 379, 391], "batch_step": [229, 231, 237, 241], "batchnorm": 106, "batchnorm2d": 106, "batchwis": 267, "bay": 344, "bayer": [174, 316], "bayer_filt": 174, "bayesian": 345, "bch": 73, "beam": [207, 216], "becaus": [312, 364], "beck": 103, "been": [12, 13, 14, 17, 21, 24, 26, 27, 42, 122, 300, 303, 307, 308, 309, 318, 319, 320, 334, 336, 337, 338, 343, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 364, 365], "befor": [27, 31, 32, 37, 38, 43, 44, 47, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 84, 101, 105, 122, 148, 176, 182, 185, 187, 193, 198, 267, 273, 274, 275, 295, 303, 343, 344, 364], "begin": [12, 113, 123, 124, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 171, 183, 191, 195, 203, 211, 212, 213, 214, 248, 250, 251, 272, 273, 300, 325, 326, 327, 331, 335, 343, 344, 361, 364, 379, 385, 386, 389], "beginn": [81, 82], "behav": 102, "behavior": 19, "behaviour": [67, 68, 267], "behind": 19, "being": [12, 19, 139, 314, 343, 391], "belong": 44, "below": [31, 43, 63, 69, 75, 182, 300, 306, 313, 369, 375, 384, 392], "benchmark": [13, 19, 22, 184, 318, 391], "benefit": [69, 260], "bergman": 336, "berkelei": [13, 391], "bernoulli": [52, 53, 182, 231, 355], "bernoullisplittingmaskgener": [47, 171, 182, 237, 241, 348, 354, 380], "besid": 314, "bessel": 196, "best": [44, 47, 79, 314, 343, 344, 352, 353, 354, 355, 356], "beta": [73, 88, 121, 122, 134, 138, 139, 149, 150, 151, 180, 214, 250, 251, 330, 343, 344, 363, 365, 386, 393], "beta_": 344, "beta_anderson_acc": [113, 122], "beta_anderson_acc_backward": 272, "beta_end": [86, 251, 343, 344], "beta_start": [86, 251, 343, 344], "beta_t": 344, "better": [19, 44, 47, 69, 73, 74, 314, 320, 325, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365, 384, 393], "between": [12, 14, 15, 16, 19, 21, 33, 34, 35, 36, 40, 45, 47, 58, 59, 61, 62, 64, 65, 75, 77, 103, 106, 113, 119, 120, 134, 140, 170, 183, 190, 191, 196, 202, 207, 216, 234, 243, 251, 253, 255, 263, 291, 294, 300, 303, 307, 309, 317, 331, 334, 337, 338, 343, 344, 375, 381, 385, 386, 393, 396], "beyond": [321, 349, 350], "bfbatchnorm2d": 106, "bi": 163, "bia": [87, 94, 95, 97, 99, 101, 106, 320, 350, 351, 352, 353, 355, 360, 361, 362, 363, 364, 365, 381], "bias": [12, 87, 106], "biasfre": [99, 106], "bicgstab": [166, 170, 183, 191, 207], "biconjug": [163, 166], "biconjugate_gradient_stabilized_method": 163, "bicub": [176, 189, 211, 264, 337], "bicubic_filt": 380, "bigcup_t": 198, "bigger": [47, 170, 200, 291, 294], "bilinear": [176, 189, 212, 261, 268, 269, 270, 271], "bilinear_filt": 380, "bin": [199, 224, 225, 311], "binari": [171, 173, 177, 182, 185, 187, 198, 200, 231, 237, 316, 351], "binomi": 44, "biolog": 15, "birdcag": [187, 319], "bkg": [138, 139], "bkg_level": 311, "black": [168, 169, 176, 183, 369, 378], "blank": [229, 241], "blind": [58, 59, 97, 100, 106, 303, 379, 391], "bling": 99, "blob": 390, "block": [56, 83, 91, 94, 95, 99, 101, 135, 237, 291, 383, 389, 394], "blue": [311, 318], "blur": [19, 169, 173, 176, 183, 189, 191, 201, 211, 212, 213, 214, 217, 220, 228, 233, 238, 239, 240, 242, 243, 284, 289, 291, 303, 313, 322, 323, 324, 327, 336, 337, 341, 343, 360, 365, 373, 379, 380], "blur_col": 313, "blur_confoc": 313, "blur_gener": 303, "blurfft": [306, 307, 326, 334, 336, 341, 360, 379, 380], "blurri": [19, 391], "blurry_shot": 19, "bm3d": 383, "bmatrix": [183, 191, 203, 248, 379], "bologna": 368, "bool": [12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 31, 33, 34, 37, 40, 41, 43, 46, 47, 51, 52, 56, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 84, 86, 87, 90, 91, 92, 94, 95, 97, 99, 100, 101, 102, 103, 106, 113, 122, 134, 136, 138, 139, 147, 148, 158, 159, 160, 161, 162, 163, 164, 167, 170, 171, 177, 182, 183, 185, 186, 187, 189, 193, 195, 196, 197, 198, 200, 205, 207, 215, 216, 217, 219, 220, 222, 225, 231, 237, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 263, 267, 272, 273, 274, 275, 283, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 300], "boolean": [93, 135, 253], "bora": [58, 59, 61, 62, 79, 303], "borrow": 225, "both": [12, 19, 166, 188, 200, 207, 237, 239, 240, 258, 259, 303, 313, 319, 331, 338, 348, 350, 354, 361, 362, 363, 379, 386, 395], "bottom": [16, 171, 293], "bound": [224, 225], "boundari": [136, 243, 300, 306], "box": [253, 254, 255, 341], "brain": [15, 16, 25, 319, 325, 391], "brain_dataset": 319, "brainweb": [319, 325], "brainweb_t1_icbm_1mm_subject_0": [313, 319, 325], "breath": [31, 43, 229, 241], "bredi": 102, "bregman": [115, 116, 117, 133, 140, 148, 155, 274, 275, 336], "bregman_icnn": 386, "bregman_potenti": [140, 148, 155, 274, 275, 336], "bregman_prox": 140, "bregmanl2": [155, 386], "briefli": 390, "briggs_weight": 300, "bright": 300, "broad": 99, "broadcast": [182, 217, 218, 220, 221, 226, 227], "brovei": [189, 318], "bsd68": 13, "bsds500": [88, 121, 330, 390], "buffer_s": 310, "bug": 370, "build": [23, 56, 85, 93, 119, 129, 136, 140, 141, 143, 148, 169, 173, 179, 183, 188, 191, 246, 253, 255, 274, 275, 283, 289, 291, 300, 308, 321, 324, 335, 345, 346, 347, 371, 373, 379, 383, 389, 394], "build_prob": [194, 195, 317, 380], "builder": 389, "built": [92, 135], "burg": [117, 336], "burgentropi": [336, 386], "burn": [253, 254, 255], "burnin": [252, 341], "burnin_ratio": [252, 253, 254, 255, 341], "butterfli": [336, 343, 344], "bx": [190, 194], "byaman14": 237, "bz": 165, "c": [22, 23, 31, 43, 52, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 84, 86, 92, 96, 99, 101, 104, 105, 124, 167, 168, 169, 170, 171, 172, 173, 174, 177, 181, 182, 185, 186, 187, 189, 195, 196, 197, 198, 200, 201, 204, 205, 206, 210, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 235, 236, 237, 241, 243, 244, 267, 291, 294, 296, 300, 313, 316, 319, 325, 348, 362, 364, 379, 383, 391, 393, 396], "c2": 344, "c_": 147, "c_1": 393, "c_2": 393, "cach": [16, 303, 312, 314, 318, 319, 330, 331, 334, 335, 337, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355], "cal": 183, "cal_psnr": 314, "calcul": [44, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 92, 115, 117, 119, 126, 128, 133, 140, 142, 144, 146, 185, 187, 198, 206, 267, 291, 296, 317, 341, 393], "call": [12, 19, 32, 36, 38, 45, 50, 55, 57, 90, 103, 119, 122, 134, 144, 182, 183, 210, 229, 256, 267, 291, 296, 306, 313, 314, 321, 379, 383, 387, 389], "callabl": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 51, 69, 90, 113, 114, 119, 120, 122, 136, 137, 140, 141, 142, 148, 161, 163, 164, 165, 166, 167, 173, 183, 188, 191, 203, 204, 206, 210, 242, 252, 253, 254, 255, 267, 274, 275, 286], "camera": [19, 181, 200, 268, 269, 270, 271, 335, 349, 390, 396], "cameraman": [372, 385], "can": [1, 9, 12, 16, 19, 22, 25, 27, 31, 33, 39, 40, 41, 42, 43, 44, 47, 50, 51, 52, 53, 56, 69, 77, 78, 79, 83, 84, 85, 86, 87, 90, 91, 92, 100, 101, 104, 105, 106, 108, 109, 110, 113, 122, 126, 129, 135, 143, 147, 148, 170, 176, 177, 182, 183, 185, 187, 188, 189, 190, 191, 196, 197, 198, 200, 201, 207, 210, 216, 217, 218, 219, 220, 221, 222, 226, 227, 230, 231, 235, 237, 242, 244, 249, 250, 253, 256, 257, 260, 272, 273, 274, 275, 281, 293, 295, 296, 300, 303, 306, 307, 308, 310, 312, 313, 314, 315, 316, 318, 319, 320, 321, 324, 325, 326, 327, 334, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 369, 371, 372, 374, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396], "cancer": [20, 391], "cancerimagingarch": 20, "capabl": 206, "capac": 310, "capitol": [117, 336], "captur": [181, 183, 191, 374, 375, 379], "care": [251, 341, 392, 395], "carefulli": 343, "carlo": [31, 44, 47, 51, 52, 53, 90, 252, 253, 254, 255, 267, 321, 341, 345, 383, 384], "cartesian": [177, 185, 187, 198, 235, 236, 244, 316, 319], "cascad": [107, 236, 279, 319], "case": [27, 31, 43, 44, 46, 72, 74, 76, 86, 111, 123, 124, 125, 134, 161, 170, 171, 183, 191, 200, 207, 211, 212, 214, 250, 268, 269, 270, 271, 300, 306, 308, 310, 311, 313, 319, 325, 326, 335, 344, 348, 354, 361, 383, 385, 386, 391, 394, 395], "cassi": [171, 318], "cast": 18, "cat": [106, 311, 315, 316, 319, 344], "caus": [19, 106], "caveat": [12, 344], "cbar": [291, 300], "cbsb68": 13, "cbsbd68": 13, "cbsd500": [360, 365], "cbsd68": [307, 316, 320, 364, 391], "cbsd_0010": [306, 316, 317, 330], "cc": 46, "cdot": [108, 109, 113, 119, 123, 143, 144, 147, 157, 160, 161, 181, 186, 212, 214, 250, 251, 267, 303, 325, 343, 344, 374, 381, 386, 387, 389, 393], "celeba": [27, 391], "celeba_exampl": [65, 70, 321, 349], "cell": [15, 260], "center": [123, 124, 125, 168, 169, 176, 183, 186, 217, 219, 230, 235, 236, 237, 244, 364], "center_block": 237, "center_fract": [230, 235, 236, 244], "centercrop": [16, 303, 307, 308, 319, 320, 326, 327, 334, 337, 349, 360, 364, 365], "centr": 348, "certain": [19, 84, 267, 309, 310, 391], "cfloat": [18, 170, 197, 205, 300], "cg": [163, 164, 166, 170, 183, 191, 207], "cgan": 381, "cgstab": 163, "ch": 21, "chain": [119, 144, 252, 253, 254, 255, 267, 321, 384, 396], "challeng": [14, 300], "chambol": [12, 18, 27, 38, 50, 85, 102, 103, 108, 119, 123, 137, 140, 141, 148, 150, 152, 173, 182, 183, 191, 256, 273, 274, 275, 283, 286, 312, 324, 363, 366, 367, 373, 386], "chang": [12, 113, 122, 168, 191, 267, 306, 353, 369, 395], "channel": [16, 23, 28, 47, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 81, 82, 83, 86, 87, 88, 91, 92, 94, 95, 97, 99, 100, 101, 106, 121, 135, 160, 170, 171, 172, 174, 177, 181, 182, 185, 186, 187, 197, 198, 199, 200, 204, 206, 217, 218, 219, 220, 221, 222, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 244, 291, 294, 306, 308, 309, 311, 315, 316, 317, 325, 326, 330, 334, 337, 348, 360, 363, 390], "channelwis": [170, 197, 316], "character": [183, 191, 374, 379], "characteris": 303, "cheap": 108, "chebyshev": [254, 387], "check": [12, 13, 14, 15, 17, 21, 24, 26, 99, 113, 122, 183, 185, 186, 187, 231, 259, 267, 300, 362, 364, 365, 369], "check_clip_grad": [12, 259], "check_clip_grad_d": 259, "check_conv_fn": [113, 122], "check_dataset_exist": [13, 17, 22, 24, 26], "check_grad": 12, "check_input_rang": [65, 70], "check_iteration_fn": [113, 122], "check_mask": [177, 185, 186, 187], "check_pixelwis": 231, "checkpoint": [12, 101, 303, 307, 312, 314, 318, 319, 330, 331, 335, 337, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355], "checksum": 14, "chen": [321, 349, 371], "child": [141, 230, 235, 244, 272, 273, 386], "choic": [19, 51, 52, 53, 88, 118, 121, 330, 331, 338, 375, 381, 383, 386], "choos": [22, 31, 35, 36, 42, 45, 82, 86, 113, 122, 147, 170, 174, 183, 202, 207, 217, 219, 220, 222, 307, 312, 316, 320, 331, 335, 343, 344, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365, 389], "choosen": 331, "chose": [326, 334, 360], "chosen": [12, 27, 90, 101, 113, 166, 183, 184, 256, 330, 336, 338, 343, 360, 365, 385], "chung": 344, "chunk": [31, 229, 348], "chw": 72, "circ": [66, 182, 183, 188, 191, 386], "circl": [207, 215, 216, 338, 363], "circular": [106, 168, 169, 176, 183, 189, 201, 207, 216, 217, 218, 219, 220, 221, 222, 228, 243, 265, 303, 306, 313, 378], "circular_pad": [106, 303, 349], "cirm": 368, "ckp_": 12, "ckp_10_demo_r2r_poisson": 353, "ckp_10_demo_sur": 355, "ckp_50_demo_n2n": 352, "ckp_interv": [12, 350, 351], "ckpt": [303, 312, 318, 319, 320, 336, 337, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 390], "ckpt_dir": [312, 320, 336, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365], "ckpt_path": 76, "ckpt_pretrain": 12, "ckpt_state_dict": 312, "claim": 113, "clamp": [147, 300, 319, 327, 343], "clamp_max": 147, "clamp_min": [147, 300], "class": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 215, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 285, 300, 306, 307, 308, 310, 313, 314, 315, 316, 318, 319, 320, 325, 326, 327, 331, 334, 335, 338, 342, 343, 344, 345, 348, 356, 360, 361, 362, 363, 364, 365, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 389, 391, 392, 393, 395], "classic": [189, 318, 374], "classif": 259, "classifi": [55, 57, 97, 162, 392, 393], "classmethod": 19, "clean": [15, 44, 170, 177, 182, 191, 207, 363, 365, 369, 381], "click": 20, "clip": [12, 29, 193, 252, 253, 254, 255, 256, 259, 263, 291, 294, 314, 330, 331, 341, 344, 372, 385, 386, 391], "clip_posit": 193, "clone": [316, 325, 331, 336, 343, 344], "close": [108, 109, 123, 124, 125, 131, 132, 170, 176, 183, 191, 207, 315, 325, 341, 342, 377, 379, 381, 384], "closer": [183, 249, 251, 314], "cm": [207, 216], "cmap": [291, 293, 294, 300, 325], "cnn": [118, 309, 334, 383], "co": [13, 17, 26, 213, 303, 310, 312, 313, 314, 318, 319, 325, 330, 331, 335, 337, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 372, 385, 390], "code": [12, 42, 72, 74, 86, 101, 102, 103, 107, 122, 167, 171, 235, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 369, 377, 385, 386, 390, 394, 395], "coeff": [108, 233, 234, 306, 313], "coeff_col": [232, 313], "coeff_il": 232, "coeffic": 108, "coeffici": [108, 109, 147, 172, 232, 233, 234, 306, 313, 314, 316], "coil": [16, 107, 177, 185, 186, 187, 198, 319, 348, 350], "coil_map": [187, 319], "coil_map_0": 319, "coil_map_1": 319, "coil_map_2": 319, "coincid": 313, "colab": 324, "coll": 313, "collabor": 78, "collat": 267, "collate_batch": 267, "collect": [2, 4, 20, 90, 232, 267, 313, 348, 371, 379, 386, 389], "colon": 375, "color": [13, 88, 121, 174, 181, 189, 306, 307, 308, 314, 315, 316, 317, 320, 326, 327, 334, 335, 336, 337, 338, 360, 363, 364, 365, 390], "colorjitt": 321, "colormap": [291, 294, 300], "colour": [306, 315, 321], "column": [182, 236, 244, 291, 294, 361, 362], "com": [187, 324, 331, 372], "combett": 325, "combin": [64, 171, 181, 183, 188, 191, 202, 203, 242, 243, 251, 318, 321, 343, 377, 394], "come": [114, 120, 140, 141, 183, 274, 275, 379, 386], "command": [283, 369], "comment": [303, 348], "commerci": 15, "common": [147, 300, 309, 341, 342, 345, 360, 361, 365, 386, 396], "commonli": [24, 26, 122, 378], "commun": 369, "commut": 90, "compar": [12, 14, 19, 31, 56, 79, 229, 272, 303, 319, 341, 342, 345], "compare_no_learn": [12, 318], "comparison": [12, 19, 56, 256], "compat": [108, 185, 187, 318, 319, 392, 394], "compens": 300, "compil": 22, "complet": [171, 259], "complex": [18, 27, 30, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 110, 147, 160, 170, 177, 185, 186, 187, 196, 200, 291, 294, 300, 312, 314, 316, 317, 319, 325, 391, 393], "complex64": [187, 317, 319], "complex_ab": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 319], "complex_denois": 383, "complex_dtyp": 18, "compliant": 369, "complic": 303, "compon": [88, 121, 162, 331, 344], "component_log_likelihood": 162, "compos": [16, 20, 48, 56, 87, 109, 125, 144, 183, 267, 303, 307, 308, 310, 319, 320, 321, 326, 327, 334, 337, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 364, 365, 379, 391], "composit": [102, 103, 379], "compound": [9, 267, 396], "comprehens": [369, 372, 391], "compress": [12, 18, 27, 38, 50, 58, 59, 79, 101, 119, 129, 140, 141, 147, 156, 170, 171, 183, 191, 273, 275, 281, 283, 291, 295, 303, 318, 324, 366, 367, 373, 380, 391], "compressedsens": [316, 361, 362, 379, 380, 391], "compressivespectralimag": [318, 380], "comptu": 160, "comput": [12, 20, 23, 31, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 65, 70, 72, 74, 85, 87, 88, 93, 102, 103, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 155, 163, 166, 169, 170, 172, 173, 175, 176, 177, 179, 182, 183, 184, 188, 189, 190, 191, 195, 196, 197, 198, 200, 202, 203, 205, 207, 209, 210, 214, 215, 216, 219, 222, 224, 225, 239, 247, 250, 251, 252, 253, 254, 255, 256, 259, 272, 273, 275, 283, 284, 289, 291, 292, 300, 306, 307, 308, 309, 314, 315, 320, 324, 325, 326, 327, 330, 332, 334, 335, 336, 337, 339, 341, 342, 343, 344, 345, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 368, 377, 378, 379, 386, 387, 390, 395], "compute_alpha": [251, 344], "compute_alpha_beta": 250, "compute_invers": [197, 316], "compute_loss": [12, 259, 331, 395], "compute_metr": [12, 73, 113, 122, 272, 273, 300, 314, 326, 327, 335, 336, 338, 395], "compute_norm": [183, 255, 300, 315, 386], "concanten": 182, "concaten": [94, 95, 101, 182, 183, 188, 191, 195, 261, 267, 268, 269, 270, 271], "conclus": 314, "condat": [85, 87, 102, 103, 113, 119, 129, 134, 137, 140, 141, 148, 158, 159, 173, 179, 183, 188, 191, 200, 283, 284, 289, 291, 292, 324, 339, 340, 373, 385], "condatvu": 335, "condit": [19, 58, 59, 86, 97, 167, 183, 219, 222, 243, 251, 306, 343, 351, 374, 379], "condition_numb": 183, "confer": [118, 334, 337], "config": [100, 311, 343], "config_matplotlib": [311, 343], "confirm": [16, 25, 319, 348, 350], "confoc": [15, 232], "confocal_bpae_b": 15, "confocal_bpae_g": 15, "confocal_bpae_r": 15, "confocal_fish": 15, "confocal_mic": 15, "confocalblurgenerator3d": [313, 380], "conj": [157, 160, 161, 183, 386], "conj_model": 116, "conjug": [114, 115, 116, 117, 119, 120, 133, 140, 144, 150, 160, 164, 166, 176, 183, 189, 335, 386], "conjugate_gradi": 386, "conjugate_gradient_method": 164, "conjunct": [12, 256, 283], "conlim": 167, "connect": [77, 101, 106, 383], "consecut": [19, 140, 307, 337], "consequ": 184, "consid": [16, 88, 121, 135, 163, 164, 166, 167, 218, 221, 229, 231, 232, 233, 234, 237, 241, 263, 316, 330, 331, 344, 363], "consider": 235, "consist": [15, 19, 20, 24, 27, 31, 39, 41, 42, 43, 47, 50, 58, 59, 60, 61, 62, 79, 86, 107, 113, 185, 189, 300, 312, 316, 318, 335, 343, 344, 348, 350, 351, 364, 375, 389, 391], "consol": [12, 27, 162, 163, 164, 167, 256], "consortium": 20, "const": 331, "constant": [51, 52, 53, 99, 102, 103, 131, 132, 160, 165, 180, 183, 184, 217, 250, 253, 254, 255, 267, 319, 330, 344, 360, 392, 395], "constant_batch": 260, "constant_shap": [263, 267], "constrain": [12, 18, 27, 38, 50, 85, 103, 108, 119, 123, 137, 140, 141, 173, 182, 183, 191, 256, 273, 275, 283, 286, 312, 321, 324, 366, 367, 373, 396], "constraint": [253, 254, 255, 390], "construct": [5, 27, 31, 43, 58, 59, 61, 62, 246, 303, 313, 316, 343, 344, 348, 354, 384], "constructor": [19, 238, 257], "consumpt": [88, 121], "contain": [4, 7, 8, 9, 12, 13, 15, 16, 17, 18, 20, 22, 24, 26, 27, 40, 41, 108, 109, 113, 122, 134, 148, 149, 150, 151, 152, 153, 155, 157, 162, 168, 169, 192, 196, 199, 207, 216, 243, 253, 254, 255, 273, 274, 275, 287, 288, 289, 295, 306, 308, 311, 312, 313, 318, 335, 348, 361, 379, 386, 387, 389, 390, 391, 392, 393, 396], "content": [14, 319], "context": [46, 273, 303, 310], "continu": [260, 349, 396], "contrast": 331, "contribut": [225, 368], "contributor": [368, 369], "control": [19, 47, 51, 90, 106, 118, 178, 250, 255, 338, 341, 343, 345, 354, 375, 392], "conv": [97, 99, 100, 101], "conv1d": 311, "conv2d": [168, 220, 378], "conv2d_fft": [221, 378], "conv3d": 168, "conv3d_fft": [168, 222, 378], "conv_transpose2d": [217, 378], "conv_transpose2d_fft": [218, 378], "conv_transpose3d_fft": [219, 378], "convdecod": [84, 309, 381], "conveni": [19, 186, 318, 319, 325, 326, 327, 341, 348, 350, 393], "convent": [63, 75, 108, 172, 233, 325], "converg": [12, 34, 37, 102, 103, 113, 122, 123, 125, 134, 140, 145, 154, 163, 183, 252, 253, 254, 255, 300, 307, 315, 325, 326, 327, 334, 335, 336, 337, 338, 342, 363, 386], "convers": 370, "convert": [16, 25, 30, 85, 86, 110, 172, 173, 177, 288, 289, 314, 315, 342, 348, 382, 383, 387], "convert_to_fp16": 86, "convert_to_fp32": 86, "convex": [92, 102, 103, 114, 115, 116, 117, 119, 120, 124, 133, 140, 144, 155, 336, 364, 386], "convolut": [80, 81, 82, 83, 84, 87, 91, 92, 94, 95, 99, 101, 106, 143, 168, 169, 196, 201, 217, 218, 219, 220, 221, 222, 228, 236, 300, 307, 309, 311, 326, 345, 378, 379, 381, 386, 387], "convolv": [143, 217, 218, 219, 220, 221, 222, 306, 387], "convtranspos": [83, 91], "coordin": [213, 239, 293, 300], "copi": [311, 313, 316, 325, 343, 344, 360, 361, 362, 364, 365], "core": 310, "corner": 293, "correct": [79, 86, 160, 196, 300, 317, 338], "correct_global_phas": [314, 317], "correctli": [13, 14, 17, 21, 24, 26, 364], "correl": [217, 220, 352], "correspond": [15, 43, 79, 99, 113, 115, 117, 131, 132, 133, 134, 150, 157, 160, 161, 177, 178, 183, 184, 185, 190, 191, 194, 195, 198, 202, 203, 204, 205, 217, 218, 219, 220, 221, 222, 242, 248, 259, 268, 269, 270, 271, 293, 300, 306, 313, 316, 331, 335, 337, 343, 344, 361, 362, 365, 383, 386], "corrupt": [44, 46, 336, 352, 353, 355, 356], "cosin": [161, 314], "cosine_similar": [161, 314], "cosineannealinglr": 363, "cost": [52, 113, 122, 134, 148, 149, 150, 151, 152, 153, 155, 183, 274, 275, 307, 314, 326, 327, 335, 337, 386], "cost_tv": 326, "cost_tv_prox": 326, "cost_wv": 327, "cost_wv_prox": 327, "could": [12, 309], "count": 225, "coupl": 331, "cours": 348, "cov": 162, "cov_regular": 162, "covari": [157, 161, 162, 239], "coverag": 300, "cp": [148, 273, 274, 275, 312, 364, 386], "cpab": 260, "cpabdiffeomorph": [319, 321, 396], "cpiter": [363, 364], "cpp": [311, 321], "cpu": [12, 27, 31, 43, 55, 56, 57, 58, 59, 60, 61, 62, 65, 70, 76, 83, 85, 87, 88, 91, 92, 96, 98, 99, 100, 104, 105, 108, 109, 118, 121, 135, 147, 162, 168, 169, 170, 171, 172, 174, 176, 177, 181, 182, 185, 186, 187, 189, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 207, 210, 215, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 242, 244, 245, 246, 249, 250, 251, 256, 260, 261, 268, 269, 270, 271, 273, 275, 279, 288, 289, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 320, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 372, 385], "craft": [383, 384], "creat": [18, 27, 31, 37, 41, 43, 47, 56, 69, 88, 90, 113, 121, 122, 170, 173, 175, 177, 179, 181, 182, 183, 185, 187, 188, 191, 197, 198, 206, 229, 230, 231, 236, 237, 241, 242, 244, 249, 253, 257, 267, 275, 283, 286, 291, 307, 314, 317, 321, 322, 323, 324, 334, 335, 373, 377, 379, 383, 386, 389], "create_sampl": 96, "creation": 315, "crit": [102, 103, 307, 327, 342], "crit_conv": [113, 123, 125, 253, 255, 307, 337], "criteria": [79, 253, 307, 334, 337], "criterion": [102, 103, 113, 122, 123, 125, 145, 183, 325], "critic": [55, 57, 259], "crop": [16, 108, 171, 185, 186, 187, 204, 263, 267, 288, 289, 319], "crop_output": 108, "cropms": 319, "croppsnr": 319, "cross": [217, 220], "crucial": [338, 381], "csgm": [79, 381], "csgm_model": 303, "csgmgener": [303, 381], "csv": 20, "ct": [12, 20, 38, 47, 50, 85, 87, 88, 94, 95, 113, 119, 121, 129, 134, 135, 137, 140, 141, 148, 150, 158, 159, 179, 183, 184, 188, 191, 207, 273, 275, 283, 284, 289, 291, 292, 324, 330, 331, 339, 340, 366, 367, 371, 373, 378, 391], "ct_small": 331, "ct_toi": 331, "cth": 187, "cubic": [147, 325], "cuda": [12, 37, 88, 118, 121, 168, 169, 201, 242, 249, 251, 283, 300, 303, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 319, 320, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 394], "cumprod": [343, 344], "cup_": [309, 341, 342, 345], "cur_data_fidel": [122, 134, 149, 150, 151, 152, 153, 155, 314, 335, 363], "cur_param": [122, 134, 149, 150, 151, 152, 153, 155, 157, 314, 335], "cur_prior": [122, 134, 149, 150, 151, 152, 153, 155, 157, 314, 335, 363], "current": [12, 32, 35, 36, 45, 49, 71, 94, 95, 113, 122, 134, 149, 150, 151, 152, 153, 155, 157, 162, 168, 169, 173, 176, 177, 178, 179, 181, 184, 188, 192, 193, 198, 201, 209, 242, 259, 285, 307, 327, 335, 341, 342, 344, 363, 376], "current_log": 331, "curv": [300, 307, 314, 317, 320, 326, 327, 335, 336, 338, 350, 351, 352, 353, 355, 360, 361, 362, 363, 364, 365, 376], "custom": [12, 18, 25, 27, 38, 50, 85, 87, 93, 113, 119, 129, 134, 137, 140, 141, 143, 148, 156, 158, 159, 169, 170, 172, 173, 176, 179, 183, 185, 188, 189, 191, 200, 213, 253, 255, 256, 257, 267, 273, 274, 275, 281, 283, 284, 286, 289, 291, 292, 295, 308, 312, 314, 322, 323, 324, 338, 339, 340, 346, 347, 354, 364, 366, 367, 373, 374, 379, 385, 391, 395], "custom_init": [113, 300, 312, 338, 363, 364], "custom_init_cp": [312, 364], "custom_metr": 113, "custom_output": [337, 363], "customis": 321, "customtrain": 395, "cutoff": [233, 234, 306, 313], "cv": 17, "cviter": 335, "cx256x256": [22, 391], "cyclegan": 303, "d": [34, 44, 54, 55, 57, 58, 59, 60, 61, 62, 66, 73, 86, 90, 102, 103, 115, 117, 119, 120, 121, 133, 137, 142, 143, 144, 145, 168, 170, 180, 185, 186, 187, 196, 197, 199, 219, 222, 225, 258, 259, 294, 300, 303, 311, 313, 319, 325, 335, 341, 345, 364, 381, 386, 387], "d_": [73, 114, 140, 199, 250, 251, 311, 336, 364, 393], "d_i": [144, 204, 205], "d_lambda": 73, "dabov": 78, "dagger": [51, 76, 173, 177, 382], "damp": [167, 254], "daniil": [102, 103], "data": [9, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 31, 33, 39, 41, 42, 43, 47, 50, 51, 52, 53, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 88, 92, 100, 104, 105, 107, 111, 112, 113, 118, 119, 121, 122, 123, 125, 127, 129, 130, 134, 144, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 162, 181, 185, 186, 187, 195, 196, 206, 215, 216, 229, 237, 241, 242, 245, 250, 251, 256, 257, 259, 273, 274, 275, 281, 300, 303, 309, 314, 317, 318, 331, 349, 374, 375, 376, 378, 379, 383, 384, 385, 389, 392, 394, 395, 396], "data_dir": [286, 287, 303, 307, 308, 312, 318, 320, 325, 326, 327, 334, 336, 337, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "data_fidel": [113, 117, 122, 129, 134, 144, 148, 149, 150, 151, 152, 153, 155, 250, 251, 253, 254, 255, 273, 274, 275, 300, 307, 312, 314, 317, 326, 327, 331, 334, 335, 336, 337, 338, 341, 343, 344, 345, 360, 361, 362, 363, 364, 365, 372, 385, 386, 389], "data_fidelity_list": 144, "data_init": 162, "data_test": 391, "data_train": 391, "databas": 20, "datafid": [113, 119, 127, 129, 130, 131, 138, 144, 331, 375, 385, 386, 389], "datafidel": [111, 113, 122, 123, 125, 129, 131, 134, 138, 144, 148, 149, 150, 151, 152, 153, 155, 250, 251, 253, 254, 255, 273, 274, 275, 335, 363, 386], "datafidnam": [113, 119, 129, 144, 385, 386], "datagener": 355, "dataload": [12, 20, 162, 256, 257, 259, 303, 307, 318, 319, 320, 331, 334, 335, 336, 337, 338, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 391, 395], "dataparallel": 394, "datapoint": 27, "dataset": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 47, 88, 121, 173, 175, 179, 183, 184, 185, 186, 187, 188, 191, 256, 257, 259, 281, 283, 286, 287, 291, 313, 314, 316, 318, 319, 322, 323, 324, 325, 330, 331, 336, 338, 344, 348, 349, 354, 369, 371, 372, 373, 374, 376, 378, 385, 390, 392, 393, 395], "dataset_cach": 16, "dataset_filenam": [27, 320, 350, 351, 352, 353, 355, 356, 360, 361, 362, 364, 365], "dataset_info": 13, "dataset_nam": [286, 307, 308, 326, 327, 334, 335, 337], "dataset_path": [16, 303, 319], "dataweight": [196, 300], "daubechi": 300, "db": [300, 309, 314, 325, 326, 327, 335, 336, 338, 341, 342, 345], "db1": [147, 300, 325], "db2": [108, 147, 300, 325], "db3": [300, 325], "db4": [109, 147, 300, 325], "db5": 300, "db6": 300, "db7": 300, "db8": [108, 109, 147, 300, 312, 325, 327, 361, 364], "dcgan": [79, 81, 82, 303, 381], "dcgan_faces_tutori": [81, 82], "dcgandiscrimin": [59, 60, 62, 303, 381], "dcgangener": [79, 303, 381], "dcm": 20, "dd_hh": 12, "ddim": [250, 344], "ddpm": 344, "ddrm": [315, 342, 387], "deal": [12, 206, 319], "deblock": 21, "deblur": [12, 18, 19, 21, 27, 38, 50, 58, 59, 83, 85, 87, 97, 99, 103, 113, 118, 119, 129, 137, 140, 141, 145, 148, 169, 173, 179, 183, 188, 191, 213, 256, 264, 272, 274, 283, 286, 287, 291, 292, 303, 322, 323, 324, 328, 329, 336, 339, 340, 343, 349, 366, 367, 371, 373, 383, 391], "deblurgan": [58, 59, 97, 303], "deblurgan_model": 303, "debug": 77, "dec": 108, "decid": 369, "decod": [80, 83, 84, 99, 309, 381], "decolor": [189, 315, 318, 380], "decolorizesvd": 315, "decompos": [171, 196, 300, 387], "decomposablephys": [169, 172, 175, 177, 182, 185, 198, 200, 249, 306, 315, 341, 342, 377, 379, 395], "decomposit": [108, 109, 147, 169, 172, 173, 177, 182, 185, 198, 200, 233, 234, 249, 306, 313, 315, 341, 342, 377, 379], "deconvolut": [378, 389], "decor": 267, "decreas": [113, 162, 249, 250, 251, 343, 344], "dedic": 15, "deep": [12, 18, 27, 31, 38, 43, 50, 65, 76, 80, 81, 82, 83, 84, 85, 87, 96, 98, 113, 116, 118, 119, 129, 137, 140, 141, 148, 169, 173, 179, 182, 183, 188, 191, 213, 229, 236, 241, 256, 272, 273, 274, 279, 283, 286, 287, 289, 291, 308, 314, 322, 323, 324, 334, 348, 350, 366, 367, 369, 373, 374, 384], "deepimageprior": [80, 309], "deepinv": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 368, 369, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396], "deepinv_data": 281, "deepinv_dataset_path": 307, "deepinv_datasets_path": [320, 350, 351, 352, 353, 354, 355, 356, 364], "deepinvers": [12, 16, 18, 25, 27, 33, 38, 50, 76, 85, 87, 98, 106, 107, 113, 119, 129, 140, 141, 147, 148, 173, 177, 183, 185, 186, 187, 191, 196, 206, 230, 235, 236, 242, 244, 260, 267, 279, 280, 281, 282, 283, 284, 286, 287, 291, 292, 293, 294, 301, 302, 316, 318, 322, 323, 324, 369, 373, 376, 386, 390], "def": [253, 300, 303, 307, 310, 312, 315, 319, 331, 335, 337, 341, 343, 344, 362, 363, 364, 395], "def_crit": 145, "default": [12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 81, 82, 83, 86, 87, 90, 91, 94, 95, 96, 97, 99, 100, 101, 102, 103, 108, 109, 113, 118, 119, 120, 122, 123, 124, 126, 130, 134, 135, 138, 139, 140, 142, 145, 147, 148, 149, 150, 151, 158, 159, 160, 161, 168, 170, 171, 172, 181, 182, 183, 185, 186, 189, 191, 196, 197, 200, 204, 205, 206, 207, 215, 216, 217, 219, 220, 222, 229, 230, 231, 232, 233, 234, 237, 239, 240, 241, 242, 243, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 286, 287, 291, 293, 294, 295, 296, 300, 306, 314, 330, 376, 379, 390, 393, 394], "default_preprocess": 161, "defin": [32, 33, 35, 36, 39, 40, 41, 44, 45, 46, 48, 49, 50, 60, 66, 79, 85, 88, 93, 98, 108, 109, 111, 112, 113, 121, 122, 124, 125, 126, 127, 129, 134, 135, 143, 144, 149, 150, 151, 152, 153, 155, 157, 168, 169, 170, 172, 173, 175, 176, 177, 180, 182, 183, 185, 186, 187, 189, 190, 191, 194, 196, 197, 198, 200, 202, 207, 211, 212, 213, 216, 239, 249, 250, 251, 253, 259, 267, 296, 300, 306, 310, 311, 313, 314, 315, 319, 321, 325, 330, 331, 338, 343, 349, 350, 351, 352, 353, 355, 356, 374, 378, 379, 381, 384, 385, 386, 389, 391, 395, 396], "definit": [306, 335, 344, 377, 393], "defocu": 99, "defocus_deblur": 99, "deform": 396, "deg2rad": 313, "deg_dir": [307, 312, 325, 326, 327, 334, 337, 360], "degrad": [282, 287, 312, 325, 336, 338, 376, 390], "degre": [90, 207, 213, 261, 263, 267, 268, 269, 270, 271, 313, 316, 321, 331, 350], "dehaz": 380, "delet": 348, "delta": [46, 201, 214, 300, 306], "demo": [16, 25, 65, 70, 198, 279, 300, 303, 306, 307, 308, 312, 313, 314, 316, 317, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 364, 365, 388, 390, 391], "demo_3d_wavelet": [325, 329, 373], "demo_artifact2artifact": [348, 358, 373], "demo_artifact2artifact_mri": 348, "demo_blur_tour": [306, 323, 373], "demo_custom_kernel": [341, 347, 373], "demo_custom_prior": [307, 323, 373], "demo_custom_prior_unfold": [362, 367, 373], "demo_dataset": [308, 323, 373], "demo_ddrm": [342, 347, 373], "demo_deq": [360, 367, 373], "demo_deq0": 360, "demo_diffpir": [343, 347, 373], "demo_dip": [309, 323, 373], "demo_dp": [344, 347, 373], "demo_ei_transform": [349, 358, 373], "demo_epl": [330, 333, 373], "demo_equivariant_imag": [350, 358, 373], "demo_equivariant_imaging0": 350, "demo_fastmri_brain_multicoil": [16, 319], "demo_gan_imag": [303, 305, 373], "demo_hf_dataset": [310, 323, 373], "demo_learned_primal_du": [363, 367, 373], "demo_licp": 362, "demo_licp0": 362, "demo_lidar": [311, 323, 373], "demo_lista": [361, 367, 373], "demo_lista0": 361, "demo_load": [312, 323, 373], "demo_measplit_mnist_tomographi": 354, "demo_microscopy_3d": [313, 323, 373], "demo_moi_ckp_10": 351, "demo_mri_model": [319, 348, 350, 388], "demo_multioperator_imag": [351, 358, 373], "demo_multioperator_imaging0": 351, "demo_multioperator_imaging1": 351, "demo_multioperator_imaging2": 351, "demo_multioperator_imaging3": 351, "demo_multioperator_imaging4": 351, "demo_multioperator_imaging5": 351, "demo_multioperator_imaging6": 351, "demo_multioperator_imaging7": 351, "demo_multioperator_imaging8": 351, "demo_multioperator_imaging9": 351, "demo_n2n": 352, "demo_n2n0": 352, "demo_n2n_denois": [352, 358, 373], "demo_nbu_pansharpen": 318, "demo_patch_priors_ct": [331, 333, 373], "demo_phase_retriev": [314, 323, 373], "demo_phys": [315, 323, 373], "demo_physics_tour": [316, 323, 373], "demo_pnp_custom_optim": [335, 340, 373], "demo_pnp_dpir_deblur": [334, 340, 373], "demo_pnp_mirror_desc": [336, 340, 373], "demo_ptychographi": [317, 323, 373], "demo_r2r": 353, "demo_r2r0": 353, "demo_r2r_denois": [353, 358, 373], "demo_red_gspnp_sr": [337, 340, 373], "demo_remote_sens": [318, 323, 373], "demo_ri_bas": [300, 302, 373], "demo_sampl": [345, 347, 373], "demo_splitting_loss": [354, 358, 373], "demo_sur": [355, 356], "demo_sure0": [355, 356], "demo_sure_denois": [355, 358, 373], "demo_tour_mri": [319, 323, 373], "demo_train_inpaint": [320, 323, 373], "demo_training_inpaint": [320, 364], "demo_training_inpainting0": [320, 364], "demo_transform": [321, 323, 373], "demo_tv_minimis": [326, 329, 373], "demo_unfolded_constrained_lista": [364, 367, 373], "demo_unfolded_cp": 312, "demo_unfolded_cp_ptwt": 312, "demo_unfolded_sr": 365, "demo_unfolded_sr0": 365, "demo_unsur": [356, 358, 373], "demo_vanilla_pnp": [338, 340, 373], "demo_vanilla_unfold": [365, 367, 373], "demo_wavelet_prior": [327, 329, 373], "demonstr": [303, 318, 321, 348, 349, 354, 396], "demosa": 380, "demosaick": 21, "den": 343, "denois": [12, 15, 18, 21, 27, 38, 42, 44, 46, 48, 51, 52, 53, 76, 77, 78, 83, 86, 87, 88, 90, 91, 93, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 113, 118, 119, 121, 129, 137, 140, 141, 142, 143, 144, 145, 147, 148, 173, 176, 178, 179, 182, 183, 184, 188, 191, 192, 193, 208, 209, 249, 250, 251, 253, 254, 255, 256, 273, 274, 275, 279, 281, 283, 284, 286, 287, 289, 291, 308, 309, 312, 319, 324, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 345, 348, 350, 354, 357, 358, 360, 361, 364, 365, 369, 371, 372, 373, 374, 375, 380, 382, 384, 385, 386, 387, 389, 390, 396], "denoised_imag": 383, "denoiser_arg": 90, "denoiser_complex": 314, "denoiser_kwarg": 90, "denoiser_nam": 337, "denoisernam": [85, 90, 385], "denoising_color": 99, "denoising_grai": 99, "denoising_r": 99, "denorm": [138, 139], "denot": [34, 66, 124, 154, 168, 169, 180, 186, 313], "dens": 135, "densiti": [138, 236, 244, 331], "dep": 372, "depend": [16, 46, 55, 56, 57, 86, 113, 207, 242, 251, 253, 300, 331, 341, 369, 375, 384, 386, 389], "deploi": 384, "deprec": [12, 44, 47, 76, 170, 257], "depth": [46, 87, 94, 95, 100, 101, 180, 185, 187, 191, 199, 232, 234, 283, 294, 313, 319, 322, 323, 324, 325, 336, 360, 365, 373], "deq": [12, 18, 27, 38, 50, 85, 87, 119, 129, 137, 140, 141, 169, 173, 179, 183, 188, 191, 272, 274, 283, 286, 287, 291, 324, 366, 367, 373, 384, 389], "deq_build": [360, 389], "der": 163, "derain": [99, 383], "deriv": [52, 396], "descent": [85, 87, 92, 113, 114, 117, 119, 138, 140, 141, 142, 148, 153, 155, 156, 165, 169, 173, 183, 188, 191, 193, 213, 273, 274, 275, 283, 284, 289, 291, 292, 307, 324, 326, 327, 338, 339, 340, 356, 362, 373, 385, 386], "describ": [118, 135, 182, 183, 184, 191, 249, 250, 251, 312, 334, 345, 351, 374, 379, 380, 383], "descript": [102, 103, 147, 235, 236, 244, 348, 369, 378, 381, 384, 385, 387, 388, 391, 392, 396], "design": [46, 51, 52, 53, 85, 314, 319, 383, 392], "desir": [12, 16, 27, 82, 206, 235, 291, 303, 369], "detach": [311, 316, 317, 331, 343, 344], "detail": [5, 6, 7, 10, 12, 16, 31, 34, 37, 40, 42, 43, 44, 52, 53, 69, 83, 86, 87, 88, 91, 100, 101, 102, 103, 109, 113, 118, 121, 147, 148, 163, 164, 170, 171, 178, 181, 183, 184, 189, 191, 207, 228, 233, 234, 239, 243, 256, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 291, 294, 343, 344, 348, 350, 354, 364, 377, 379, 385, 389, 390, 392, 393], "detect": 391, "detector": [207, 216, 313], "detector_radiu": [207, 216], "detector_spac": [207, 216], "determin": [135, 160, 162, 172, 230, 285], "determinist": [183, 191, 267, 374, 375, 379, 395, 396], "dev": [342, 345], "develop": [369, 371, 372], "deviat": [51, 52, 113, 118, 129, 148, 175, 179, 189, 192, 199, 208, 213, 239, 256, 273, 274, 275, 276, 307, 311, 316, 325, 326, 327, 330, 334, 335, 337, 338, 342, 343, 344, 375, 383, 386, 393], "devic": [12, 27, 31, 43, 55, 56, 57, 58, 59, 60, 61, 62, 65, 70, 76, 79, 83, 85, 87, 88, 91, 92, 96, 98, 99, 100, 104, 105, 108, 109, 118, 121, 135, 147, 162, 168, 169, 170, 171, 172, 174, 176, 177, 181, 182, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 207, 210, 215, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 242, 244, 245, 246, 249, 250, 251, 256, 260, 261, 268, 269, 270, 271, 273, 275, 279, 283, 288, 289, 300, 303, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 319, 320, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 372, 385, 394, 395], "device_count": 394, "device_id": 394, "df": 37, "df73285e": 334, "dft": 205, "dhariw": 390, "diag": [37, 157, 161, 170, 173, 182, 187, 190, 195, 306, 386], "diagnost": 20, "diagon": [37, 47, 182, 204, 205, 226, 227, 341, 378], "diagonal_mod": 205, "dicom": 20, "dict": [12, 18, 74, 113, 122, 134, 148, 149, 150, 151, 152, 153, 155, 157, 191, 202, 203, 207, 216, 230, 231, 232, 233, 234, 245, 258, 267, 272, 273, 274, 275, 291, 292, 295, 296, 319, 335, 353, 395], "dict_kei": [232, 233, 234, 238, 239, 242, 243, 245, 306, 313], "dict_param": 379, "dictat": [76, 107], "dictionari": [12, 113, 122, 134, 148, 149, 150, 151, 152, 153, 155, 157, 191, 202, 203, 230, 231, 232, 233, 234, 238, 239, 242, 243, 245, 256, 273, 274, 275, 292, 295, 306, 313, 325, 335, 336, 360, 361, 362, 365, 379, 386], "dictionnari": 300, "diff": [239, 342], "diffeomorph": [260, 321, 396], "differ": [9, 12, 15, 22, 40, 41, 42, 46, 54, 76, 84, 101, 102, 103, 145, 171, 189, 229, 239, 249, 250, 263, 278, 303, 306, 307, 309, 313, 314, 330, 337, 343, 344, 351, 352, 361, 362, 365, 379, 386, 391, 392, 393, 396], "differenti": [33, 40, 140, 141, 142, 150, 183, 191, 250, 254, 255, 344, 386], "difficulti": 379, "diffpir": [85, 86, 119, 129, 138, 140, 173, 179, 182, 183, 188, 191, 283, 284, 289, 291, 324, 344, 346, 347, 373, 387], "diffract": [168, 183, 191, 232, 233, 234, 240, 242, 283, 291, 294, 322, 323, 324, 373], "diffraction_gener": [306, 313], "diffractionblur": 306, "diffractionblurgener": [201, 232, 234, 238, 243, 306, 380], "diffractionblurgenerator3d": 313, "diffunet": [343, 344, 383, 390], "diffus": [83, 85, 86, 98, 173, 179, 182, 183, 188, 191, 249, 250, 251, 252, 253, 283, 289, 291, 324, 343, 346, 347, 371, 373, 374, 384], "diffusion_ffhq_10m": 344, "diffusion_step": 343, "diffusionsampl": [342, 387], "digit": 316, "dih": 321, "dihedr": 321, "dilat": [264, 311], "dim": [67, 68, 69, 90, 99, 100, 101, 105, 171, 183, 185, 186, 187, 206, 210, 237, 262, 266, 267, 307, 311, 315, 316, 317, 319, 321, 342, 344, 345, 378], "dim_hid": 77, "dim_input": 77, "dim_mid": 77, "dimens": [9, 16, 29, 30, 31, 43, 47, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 82, 86, 88, 92, 95, 101, 104, 105, 108, 119, 120, 121, 123, 124, 125, 126, 127, 144, 145, 147, 157, 161, 162, 163, 164, 166, 167, 171, 173, 177, 182, 185, 186, 187, 196, 198, 206, 210, 223, 225, 229, 230, 231, 235, 236, 237, 240, 241, 244, 260, 261, 266, 267, 268, 269, 270, 271, 293, 296, 300, 308, 319, 326, 334, 337, 348, 360, 361, 376, 383, 391, 392, 393, 396], "dimension": [207, 236, 244, 378], "dimensionless": [63, 393], "dinv": [44, 46, 47, 48, 96, 113, 122, 129, 144, 249, 251, 275, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 372, 378, 379, 383, 385, 386, 389, 391, 392, 393, 394], "dinv_dataset": 27, "dinv_dataset0": [303, 307, 308, 319, 334, 337, 354], "dinv_dataset_path": [308, 334, 337], "dir": [334, 337, 391], "dirac": 300, "dirac_comb": [201, 306], "dirac_lik": 300, "direct": [76, 96, 149, 171, 195, 232, 234, 267, 313, 348, 382, 386], "directli": [19, 69, 86, 101, 119, 144, 148, 177, 185, 187, 198, 273, 274, 275, 300, 306, 313, 314, 319, 363, 372, 376, 393], "directori": [12, 13, 14, 15, 17, 19, 20, 21, 22, 24, 25, 26, 256, 286, 287, 295, 369, 376, 391], "disabl": [47, 320, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "disast": 318, "discard": [79, 253, 254, 255], "discord": [369, 370], "discourag": 393, "discrep": [113, 375, 385, 386], "discret": [170, 177, 185, 196, 198, 205, 223, 300, 331], "discrimin": [55, 56, 57, 58, 59, 60, 61, 62, 81, 89, 97, 258, 259, 303, 392], "discriminatorloss": [58, 61, 392], "disk": [13, 14, 15, 24, 26, 194, 195, 246, 310, 317], "dispers": 171, "displai": [12, 79, 168, 169, 176, 296, 308, 310, 348, 349], "display_losses_ev": 12, "distanc": [3, 64, 112, 113, 115, 117, 119, 124, 127, 130, 132, 139, 140, 144, 207, 216, 336, 375, 386, 393, 396], "distancenam": [119, 130, 144, 150, 386], "distancename_i": 144, "distancz": 132, "distinct": [113, 148, 273, 274, 275, 312, 361, 362, 363, 364, 365, 386], "distort": [73, 318, 374, 381, 384, 392, 393, 396], "distribut": [44, 46, 88, 98, 121, 139, 143, 175, 178, 181, 182, 205, 231, 236, 237, 249, 251, 252, 253, 254, 255, 313, 331, 341, 342, 345, 353, 355, 356, 374, 375, 378, 381, 387, 392], "distributeddataparallel": 394, "div": [114, 115, 343], "div2k": 391, "div2k_train_hr": 14, "div2k_valid_hr": 14, "diverg": [51, 52, 53, 114, 115, 117, 133, 139, 140, 386], "divers": [303, 391], "divid": [31, 139, 229], "divis": [86, 99, 112], "dncnn": [46, 107, 275, 279, 319, 335, 336, 338, 345, 348, 350, 360, 365, 383, 389, 390, 392], "dncnn_sigma2_lipschitz_color": 345, "dncnn_sigma2_lipschitz_grai": 335, "do": [19, 31, 43, 76, 107, 108, 113, 141, 160, 267, 303, 310, 319, 321, 334, 337, 338, 343, 348, 382, 383, 384, 393, 395], "doc": [12, 46, 69, 74, 90, 177, 186, 260, 310, 321, 349, 350, 369, 379], "doctor": 368, "document": [51, 52, 53, 66, 150, 180, 199, 364, 368, 369, 375, 394], "doe": [19, 27, 33, 34, 37, 40, 46, 67, 68, 69, 73, 78, 87, 123, 154, 178, 183, 191, 237, 260, 272, 273, 275, 303, 325, 360, 379], "doesn": [143, 206, 308, 392], "doi": [87, 207, 216, 313], "domain": [47, 78, 196, 300, 331, 361, 362, 382, 383], "don": [13, 73, 206, 283, 293, 384], "done": [12, 47, 108, 189, 306, 314, 320, 326, 327, 342, 343, 344, 354, 356, 360, 361, 362, 363, 364, 365, 369, 379, 381, 391, 395], "dongdong": 371, "dose": 184, "dossal": 152, "dot": [40, 41, 109, 187, 195, 351], "doubl": [20, 183], "dougla": [148, 151, 273, 274, 275, 365, 386], "down": [96, 267, 337], "download": [13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 83, 86, 87, 88, 91, 99, 100, 101, 121, 249, 251, 286, 287, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 369, 372, 385, 390, 391], "download_and_extract_arch": [303, 349], "download_arch": [16, 319], "download_lipschitz": [87, 335, 345], "downsampl": [83, 91, 96, 106, 183, 189, 211, 212, 214, 316, 318, 331, 337, 360, 365, 379, 380], "downsample_mod": [83, 91], "downscal": 349, "dp": [85, 86, 119, 129, 140, 173, 182, 183, 191, 283, 284, 289, 291, 324, 346, 347, 373, 387], "dpi": [291, 293, 296, 318, 343], "dpir": [18, 27, 83, 85, 113, 119, 129, 137, 140, 141, 148, 169, 173, 179, 183, 188, 191, 256, 283, 286, 287, 324, 339, 340, 373, 385, 390], "dr": [148, 151, 273, 274, 275, 300, 327, 365, 386], "drawback": 394, "drawn": 205, "drive": [22, 331], "driven": [92, 369], "drop": 100, "drop_last": 331, "drop_path_r": [100, 101], "drop_rat": 101, "dropout": 101, "drunet": [91, 118, 249, 251, 314, 334, 342, 360, 365, 383, 390, 394], "drunet_dataset": 310, "drunet_deepinv_gray_finetune_26k": 314, "dst": [170, 223], "dst1": 204, "dtype": [18, 27, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 113, 122, 170, 183, 186, 187, 197, 200, 205, 207, 210, 215, 216, 231, 232, 233, 234, 239, 242, 245, 288, 289, 306, 313, 316, 319, 331, 343, 344, 362], "du": [34, 37], "dual": [12, 38, 50, 85, 87, 94, 95, 99, 102, 103, 113, 119, 123, 125, 129, 134, 137, 140, 141, 148, 150, 158, 159, 173, 179, 183, 188, 191, 200, 207, 273, 275, 283, 284, 289, 291, 292, 324, 339, 340, 364, 366, 367, 373, 385, 386, 389], "dual_pixel_task": 99, "due": [170, 171, 207, 223, 336, 348], "dummi": 379, "dure": [12, 18, 19, 27, 40, 41, 44, 46, 47, 99, 106, 113, 182, 306, 319, 343, 344, 349, 361, 363, 392], "dwt": 108, "dx": [102, 103, 145, 326, 362, 386], "dynam": [31, 43, 47, 104, 105, 177, 206, 229, 236, 237, 241, 300, 306, 316, 380], "dynamic_model": [31, 43, 348], "dynamicmri": [31, 43, 198, 319, 380], "e": [12, 13, 14, 15, 16, 17, 18, 19, 21, 24, 26, 27, 29, 31, 33, 34, 37, 39, 40, 41, 42, 43, 44, 47, 50, 56, 58, 59, 60, 61, 62, 64, 69, 72, 76, 79, 83, 86, 87, 88, 90, 91, 96, 102, 103, 105, 108, 109, 112, 113, 119, 121, 122, 123, 124, 125, 127, 129, 130, 143, 144, 147, 148, 160, 168, 169, 170, 171, 172, 174, 175, 177, 181, 182, 183, 185, 187, 189, 190, 193, 196, 198, 204, 205, 206, 207, 210, 218, 221, 229, 231, 237, 241, 242, 243, 246, 249, 253, 254, 255, 259, 261, 262, 263, 266, 267, 269, 272, 273, 274, 275, 276, 291, 296, 300, 303, 308, 311, 313, 314, 315, 318, 321, 324, 325, 331, 335, 341, 342, 343, 348, 349, 350, 351, 352, 355, 356, 381, 383, 384, 386, 387, 389, 391, 392, 393, 395, 396], "e2": [107, 319, 388], "each": [12, 15, 16, 19, 20, 22, 25, 27, 31, 32, 35, 36, 42, 43, 45, 48, 52, 53, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 84, 90, 94, 95, 97, 99, 100, 101, 108, 109, 113, 118, 121, 122, 134, 144, 148, 162, 181, 183, 191, 196, 202, 203, 217, 218, 219, 220, 221, 222, 225, 229, 238, 243, 248, 256, 262, 264, 267, 273, 274, 275, 291, 293, 294, 300, 306, 312, 319, 330, 341, 343, 348, 351, 352, 355, 361, 362, 363, 364, 365, 379, 386, 391, 393, 395], "earli": [84, 118, 161, 309, 337, 385], "early_stop": [113, 122, 161, 300, 307, 314, 326, 327, 334, 335, 336, 337, 338], "easi": [319, 341, 371, 379, 391], "easili": [9, 27, 303, 319, 320, 321, 343, 344, 348, 350, 354, 364, 369, 372, 385, 391, 393, 395, 396], "edg": [171, 225], "edinburgh": 368, "edongdongchen": 89, "edsr": 17, "edu": [16, 348], "ee": 21, "effect": [12, 15, 47, 88, 121, 136, 171, 182, 261, 264, 267, 270, 306, 343, 349, 354, 378, 396], "effic": 307, "effici": [44, 47, 99, 166, 170, 171, 173, 177, 183, 191, 200, 207, 267, 341, 377, 378, 379, 390], "effort": 309, "eg": [178, 386], "egg": [324, 372], "ei": [33, 40, 89, 321, 349, 350, 396], "eigen": 243, "eigenvalu": 37, "eigenvector": [157, 161], "eiloss": [40, 318, 319, 321, 349, 350, 392, 396], "either": [19, 25, 27, 29, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 86, 99, 101, 105, 107, 108, 109, 110, 113, 118, 147, 148, 166, 172, 177, 185, 187, 198, 217, 218, 219, 220, 221, 222, 225, 226, 227, 230, 231, 237, 273, 274, 275, 276, 291, 293, 294, 296, 319, 330, 383, 386, 389, 391, 392, 393, 394, 395], "elaps": [315, 341, 342, 345], "element": [19, 66, 77, 96, 108, 170, 180, 189, 195, 197, 205, 238, 262, 314, 325, 361, 365, 375, 378], "elementari": 376, "elementwis": [52, 53, 182, 355, 356], "ell": [46, 178, 325], "ell_": 126, "ell_0": [108, 109], "ell_1": [33, 39, 40, 41, 42, 50, 102, 108, 109, 125, 127, 128, 385, 386], "ell_2": [54, 118, 121, 123, 124, 125, 126, 129, 130, 183, 344, 364, 386], "ell_p": 66, "els": [113, 123, 124, 187, 249, 251, 272, 273, 300, 303, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 320, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 395], "elu": [83, 91], "em": 162, "email": 369, "embed": [86, 101], "embed_dim": 101, "emiss": [232, 300, 313], "emission_wavelength": [233, 234], "emit": 313, "empti": [30, 182, 198, 230, 235, 244, 391], "en": [44, 74, 163, 164, 174, 178, 233, 306, 313, 368], "enabl": [19, 99, 272, 273, 307, 310, 344, 378, 379], "enable_grad": 344, "encapsul": [258, 259], "encod": [83, 99, 171, 196, 300], "encompass": [273, 275], "encount": 106, "end": [12, 88, 97, 107, 113, 121, 123, 124, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 171, 183, 191, 195, 203, 211, 212, 213, 214, 248, 250, 251, 272, 273, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 379, 385, 386, 389], "endmemb": [181, 318], "enforc": [39, 93, 113, 375, 385, 386], "enhanc": [89, 381], "enough": [374, 386], "ensur": [19, 162, 236, 306, 307, 308, 309, 313, 314, 316, 319, 320, 325, 326, 327, 334, 335, 336, 337, 338, 345, 348, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365, 390], "entir": [267, 383], "entri": [51, 52, 53, 111, 112, 162, 170, 182, 183, 191, 200, 202, 203, 248, 255, 341, 386], "entropi": [117, 133, 336], "enumer": 395, "envelop": [143, 154, 387], "environ": [281, 291], "environment": 318, "ep": [164, 343], "epfl": 368, "epll": [162, 173, 175, 179, 182, 183, 188, 191, 284, 289, 291, 324, 332, 333, 373, 383, 385], "epll_batch_s": 331, "epll_dataload": 331, "epll_max_it": 331, "epll_num_compon": 331, "epll_prior": 331, "eplldenois": [383, 390], "epoch": [12, 32, 35, 36, 45, 46, 49, 257, 259, 303, 318, 319, 320, 331, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 392, 395], "epoch_thresh": 49, "eprint": [117, 336], "eps_anderson_acc": [113, 122], "eps_anderson_acc_backward": 272, "epsilon": [46, 52, 86, 102, 112, 179, 181, 192, 208, 209, 300, 326, 327, 330, 341, 344, 380, 386], "epsilon_adjoint": 102, "epub": 87, "eq": [90, 113, 313, 331, 385, 386], "equal": [31, 43, 56, 108, 143, 180, 182, 189, 200, 207, 210, 235, 236, 293, 321, 354], "equat": [113, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 166, 167, 211, 212, 213, 214, 250, 251, 272, 300, 325, 326, 327, 331, 343, 344, 361, 364, 374, 385, 386, 389], "equilibrium": [12, 18, 27, 38, 50, 85, 87, 119, 129, 137, 140, 141, 169, 173, 179, 183, 188, 191, 272, 274, 283, 286, 287, 291, 324, 366, 367, 371, 373], "equispac": [235, 331], "equispacedmaskgener": [316, 319, 380], "equival": [19, 44, 67, 68, 188, 343, 344, 379], "equivari": [9, 12, 16, 18, 25, 26, 27, 33, 38, 39, 40, 85, 90, 93, 106, 173, 179, 182, 183, 185, 186, 188, 191, 206, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 273, 279, 281, 283, 284, 287, 289, 291, 318, 319, 322, 323, 324, 357, 358, 373, 392, 396], "equivariantdenois": [321, 383, 396], "erga": [318, 393], "ergas_std": 318, "error": [12, 31, 33, 39, 40, 41, 42, 43, 47, 50, 63, 65, 66, 67, 68, 70, 71, 141, 207, 257, 267, 320, 342, 343, 345, 356, 364, 381, 393], "escand": 228, "especi": 392, "esrgan": 89, "esrgandiscrimin": 381, "essenti": 181, "est": [113, 122, 134, 149, 150, 151, 152, 153, 155, 300, 312, 314, 335, 337, 338, 363, 364], "est_sigma": 356, "estim": [27, 46, 51, 52, 53, 69, 70, 75, 76, 86, 88, 98, 104, 107, 112, 121, 134, 138, 149, 150, 151, 152, 153, 155, 161, 162, 173, 180, 181, 183, 251, 253, 255, 256, 303, 314, 318, 319, 330, 331, 335, 343, 344, 355, 356, 372, 381, 383, 385, 386, 390], "estimt": 330, "et": [47, 58, 59, 60, 61, 62, 73, 78, 79, 81, 82, 84, 86, 89, 96, 97, 102, 106, 107, 236, 237, 260, 261, 270, 300, 303, 307, 309, 318, 321, 326, 334, 337, 343, 344, 348, 349, 390], "eta": [44, 99, 113, 167, 183, 191, 249, 250, 254, 255, 341, 344, 345], "eta_0": 341, "eta_backtrack": 113, "etab": [249, 342], "etc": [27, 33, 56, 122, 256, 263, 278, 303, 315, 318, 341, 368, 371, 374, 376, 379, 386, 387, 389, 396], "ethz": 21, "euclidean": [115, 148, 261, 274, 275, 321, 349, 396], "eugenesiow": 26, "eval": [12, 47, 303, 318, 319, 320, 334, 337, 338, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "eval_dataload": [12, 257, 303, 320, 349, 351, 352, 353, 355, 360, 361, 362, 363, 365], "eval_interv": 12, "eval_metr": 12, "eval_mod": [34, 37], "eval_n_sampl": [44, 47, 354], "eval_psnr": 259, "eval_split_input": [47, 354], "eval_split_output": [47, 354], "evalu": [3, 12, 22, 26, 27, 37, 43, 46, 47, 70, 72, 74, 96, 103, 105, 122, 135, 136, 162, 183, 191, 236, 244, 256, 257, 259, 267, 303, 315, 318, 331, 342, 344, 354, 360, 361, 362, 374, 389, 391, 393, 395], "even": [43, 99, 217, 241, 311, 336, 344], "evenli": 27, "eventu": 303, "everi": [12, 84, 259, 314, 344, 395, 396], "everywher": 343, "evid": 341, "evlauaton": 122, "exact": [170, 183, 207, 263, 267, 303, 310, 383, 396], "exactli": [31, 162, 229, 231], "exampl": [13, 14, 15, 17, 19, 20, 21, 24, 35, 36, 37, 45, 46, 49, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 88, 104, 105, 122, 126, 144, 208, 210, 245, 266, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 371, 372, 373, 377, 379, 381, 385, 386, 389, 390, 391, 392, 393, 395, 396], "except": [67, 68, 69, 225, 383], "excit": [232, 313], "exclus": [229, 241], "execut": [302, 305, 323, 329, 333, 340, 347, 358, 359, 367, 373], "exist": [13, 14, 17, 18, 21, 22, 24, 26, 27, 31, 43, 69, 170, 177, 182, 183, 190, 191, 197, 200, 207, 283, 348, 355, 374, 377, 379, 383, 384, 389, 393, 396], "exp": [44, 131, 132, 180, 184, 213, 239, 314, 317, 380, 386], "expand": [267, 306, 313], "expans": [228, 345, 390, 392], "expect": [14, 21, 29, 30, 88, 99, 121, 162, 173, 175, 179, 182, 183, 188, 191, 236, 284, 289, 291, 324, 331, 332, 333, 348, 373], "expens": 170, "experi": [84, 300, 309, 318, 319, 349, 372, 376], "explain": [296, 309, 371], "explan": 393, "explicit": [18, 27, 113, 119, 129, 140, 141, 148, 169, 173, 179, 183, 188, 191, 213, 254, 256, 283, 286, 316, 322, 323, 324, 337, 362, 373, 379, 385, 386], "explicit_prior": [141, 307, 337], "explicitli": 331, "exploit": [314, 315, 341, 352, 353, 355], "explor": [306, 313], "expon": 73, "exponenti": 44, "exponential_famili": 44, "export": 331, "exposit": 19, "express": [173, 313], "ext": 391, "extend": [40, 44, 171, 300, 303, 325, 330, 348, 363, 394], "extens": [16, 27, 286, 287, 296], "extern": 391, "extra": [44, 183, 267, 348, 379], "extract": [19, 88, 96, 121, 293, 303, 314, 317, 318, 330, 331, 349, 376, 378], "extract_loc": [293, 300], "extract_s": [293, 300], "ey": 185, "f": [34, 37, 52, 93, 102, 111, 112, 113, 114, 122, 125, 127, 129, 130, 134, 140, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 173, 177, 183, 185, 187, 195, 196, 198, 204, 205, 206, 214, 251, 253, 267, 273, 274, 275, 276, 300, 306, 309, 311, 313, 314, 315, 317, 321, 326, 327, 331, 335, 336, 338, 341, 342, 343, 345, 356, 385, 386, 389, 391, 393, 395, 396], "f_": [267, 309, 320, 321, 396], "f_0": 113, "f_1": 144, "f_2": 144, "f_fn": [113, 134, 148, 274, 275, 335], "f_k": 122, "f_matern": 239, "f_step": [334, 335, 337, 338, 363], "f_x": 239, "f_y": 239, "face": [310, 344], "facebookresearch": [107, 235], "factor": [44, 63, 80, 96, 101, 123, 129, 172, 176, 183, 189, 211, 212, 214, 230, 252, 261, 264, 268, 271, 300, 316, 318, 330, 337, 348, 361, 362, 365, 379], "factory_kwarg": [232, 234], "fail": 106, "faint": 300, "faintest": 300, "fake": [55, 56, 57, 97], "fake_label": 56, "fall": 115, "fals": [12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 31, 33, 34, 37, 40, 43, 46, 47, 51, 52, 56, 65, 66, 67, 68, 69, 70, 74, 75, 76, 79, 84, 86, 90, 97, 99, 100, 101, 102, 103, 106, 113, 122, 134, 135, 136, 139, 147, 148, 149, 150, 151, 158, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 177, 183, 185, 186, 187, 193, 196, 197, 198, 200, 205, 207, 215, 216, 217, 220, 225, 229, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 263, 267, 272, 273, 274, 275, 288, 289, 291, 293, 294, 296, 300, 303, 306, 307, 308, 312, 316, 317, 318, 319, 320, 325, 327, 330, 331, 334, 335, 337, 338, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 386, 391, 395], "famili": [44, 306, 380, 384], "familiar": 369, "fan": [207, 216], "fan_beam": [207, 216], "fan_paramet": [207, 216], "fashion": [170, 182, 190, 197, 200, 231, 237, 278, 364, 389], "fast": [77, 103, 152, 163, 169, 170, 177, 182, 185, 198, 200, 260, 265, 316, 361, 362, 369, 378, 386], "fasten": [307, 308, 320, 334, 335, 337, 338, 352, 353, 355, 356, 360, 361, 362, 364, 365], "faster": [16, 207, 215, 216, 300, 306, 326, 327, 350, 369, 378], "fastmri": [16, 25, 72, 74, 107, 185, 186, 187, 235, 348, 350, 391], "fastmri_brain_singlecoil": 16, "fastmri_knee_singlecoil": 16, "fastmrislicedataset": [25, 185, 186, 187, 319, 348, 350, 391], "fbp": 331, "fbpconvnet": 76, "fc": [233, 234, 243, 306, 313], "fdfd": 205, "featur": [77, 94, 95, 96, 371, 378], "feb": 368, "feed": 79, "feedforward": 99, "fenchel": [150, 335], "fetch": [307, 308, 326, 327, 334, 335, 338], "few": [183, 310, 320, 331, 348, 364], "ffhq": [86, 344, 390], "ffn_expansion_factor": 99, "fft": [168, 169, 186, 196, 205, 218, 219, 221, 222, 300, 306, 313, 378], "fftn": 186, "fid1": 144, "fid2": 144, "fidel": [27, 88, 111, 113, 118, 119, 121, 122, 123, 125, 129, 130, 134, 144, 148, 150, 158, 250, 251, 273, 274, 275, 300, 307, 312, 314, 317, 326, 327, 334, 335, 336, 337, 338, 360, 361, 362, 364, 365, 374, 375, 379, 385, 389], "field": [15, 16, 20, 102, 103, 243, 247, 260], "fifa": [309, 341, 342, 345], "fig": 291, "figsiz": [291, 293, 294, 296, 313, 317, 325, 343], "figur": [99, 291, 293, 294, 296, 311, 343], "file": [12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 26, 27, 46, 88, 99, 121, 135, 170, 182, 190, 197, 200, 286, 287, 288, 289, 296, 302, 305, 310, 323, 329, 333, 340, 347, 358, 359, 367, 369, 373, 376, 391], "file1000005": 16, "file_nam": [25, 282, 284, 312, 318, 319, 348, 350, 351, 352, 353, 354, 355], "file_typ": 286, "filenam": [12, 15, 20, 27, 282, 284, 293, 296], "fill": [280, 290, 297, 298, 299, 319, 348], "filter": [76, 78, 93, 168, 169, 176, 183, 189, 199, 201, 207, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 232, 233, 234, 238, 239, 242, 243, 306, 307, 309, 313, 316, 321, 326, 331, 334, 336, 337, 341, 360, 363, 365, 378, 379, 383, 385], "filter_0": [306, 313], "filter_90": 306, "filter_rgb": 306, "filter_torch": 307, "final": [83, 86, 87, 91, 100, 101, 306, 313, 314, 319, 331, 382, 393], "final_est": 317, "find": [79, 86, 157, 161, 191, 199, 251, 272, 303, 363, 376], "find_nearest": [86, 251, 343], "find_spec": 312, "fine": [303, 331, 348], "finish": [134, 158, 159, 337, 341, 342, 345], "finit": [102, 103, 145, 362, 386], "firm": [34, 390], "firmli": [345, 392], "first": [16, 19, 44, 54, 86, 88, 99, 113, 120, 121, 134, 162, 177, 185, 189, 198, 199, 200, 204, 205, 206, 210, 256, 267, 291, 294, 300, 303, 306, 311, 313, 314, 316, 318, 319, 321, 325, 326, 327, 343, 344, 348, 362, 363, 379, 382, 386], "firstli": 343, "fista": [152, 300, 386], "fit": [79, 162, 331, 395], "fix": [19, 113, 122, 134, 177, 183, 185, 191, 198, 230, 235, 236, 244, 261, 267, 272, 273, 310, 312, 334, 360, 361, 362, 364, 365, 386, 389], "fixed_point": [334, 337, 338], "fixedpoint": [113, 134, 272, 334, 337, 338, 386, 389], "flat": [172, 177, 185, 187, 189, 198, 231, 318, 319], "flatten": [104, 108, 109, 135, 147, 171, 177, 198, 206, 267, 278, 325, 342, 345, 348, 383, 386], "flatten_c": 206, "flatten_coeff": 108, "flatten_video_input": 267, "flavour": [56, 392], "fledg": 342, "flexibl": [291, 383, 395], "flickr": 391, "flickr2k": 17, "flickr2khr": 391, "flip": [90, 170, 262], "float": [12, 16, 18, 25, 33, 34, 37, 40, 41, 42, 44, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 72, 73, 74, 77, 78, 79, 80, 83, 84, 85, 87, 88, 91, 92, 93, 96, 99, 100, 101, 102, 103, 106, 108, 109, 112, 113, 114, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 137, 138, 139, 140, 143, 145, 146, 147, 148, 152, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 177, 178, 179, 180, 182, 183, 184, 191, 192, 193, 196, 198, 199, 204, 205, 207, 208, 209, 210, 213, 214, 215, 216, 224, 225, 230, 231, 232, 233, 234, 237, 238, 239, 245, 249, 250, 251, 252, 253, 254, 255, 261, 263, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 293, 300, 316, 362, 386], "float16": 86, "float32": [86, 200, 231, 232, 233, 234, 239, 242, 245, 288, 289, 306, 313, 331, 343, 344], "float64": [113, 122, 303, 307, 318, 320, 334, 337, 348, 350, 351, 352, 353, 354, 355, 356, 363, 364], "flow": [135, 331, 386], "fluoresc": [15, 232, 313, 391], "fly": [72, 74, 171, 177, 182, 185, 187, 198, 230, 306, 319, 363], "fmd": 391, "fmt": 276, "fn": [112, 115, 116, 117, 119, 120, 124, 126, 127, 128, 130, 132, 133, 135, 136, 139, 140, 144, 145, 146, 147, 307], "fname": [15, 16], "fne": 34, "fnejacobianspectralnorm": [345, 392], "focu": 313, "folder": [13, 14, 15, 17, 18, 22, 24, 26, 27, 281, 334, 337, 360, 361, 362, 391], "foldernam": [15, 20], "follow": [9, 12, 13, 14, 17, 21, 22, 24, 26, 38, 51, 52, 53, 56, 60, 63, 75, 108, 113, 147, 172, 178, 214, 228, 233, 250, 251, 255, 273, 300, 303, 306, 307, 312, 313, 318, 325, 326, 327, 331, 334, 335, 338, 341, 343, 344, 345, 361, 363, 364, 369, 372, 375, 379, 381, 383, 385, 386, 389, 390, 396], "font": 343, "fontsiz": [291, 294, 325], "forc": [92, 372], "forget": 141, "fork": [260, 369], "form": [108, 109, 113, 122, 123, 125, 131, 132, 134, 169, 170, 171, 183, 191, 207, 230, 273, 315, 320, 325, 342, 349, 362, 369, 377, 379, 385, 386, 389], "formal": [44, 325], "format": [12, 27, 108, 276, 300, 310, 325, 330, 331, 391], "former": [344, 394], "formul": 396, "formula": [46, 55, 57, 140, 143, 170, 176, 183, 191, 207, 344, 345, 387], "forw": [33, 39, 40, 41, 47, 60, 119, 123, 125, 129, 144, 190, 191, 194, 303, 374, 375, 379, 381, 385], "forw_model": 116, "forward": [6, 12, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 69, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 119, 120, 121, 122, 123, 125, 134, 135, 140, 149, 150, 151, 152, 153, 155, 157, 161, 162, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 213, 215, 216, 228, 230, 235, 236, 242, 244, 248, 249, 250, 251, 253, 255, 256, 257, 259, 267, 272, 273, 275, 283, 284, 289, 291, 303, 306, 307, 308, 318, 319, 322, 323, 324, 336, 337, 344, 350, 354, 361, 362, 363, 371, 373, 374, 377, 379, 380, 381, 383, 386, 387, 389, 391, 392, 394, 396], "forward_denois": 86, "forward_diffus": 86, "forward_restorm": 99, "found": [109, 316, 342, 348, 379], "four": 314, "fourier": [177, 185, 187, 195, 196, 198, 205, 300, 307, 316, 319, 378], "fov": [15, 247, 317], "fr": [117, 336], "frac": [34, 37, 44, 46, 47, 51, 52, 53, 72, 90, 102, 103, 112, 113, 115, 119, 123, 125, 126, 127, 129, 130, 140, 143, 144, 146, 160, 161, 166, 170, 173, 183, 184, 191, 192, 193, 197, 207, 213, 239, 250, 251, 254, 255, 272, 300, 307, 325, 326, 327, 341, 343, 344, 345, 354, 355, 356, 361, 362, 380, 385, 387, 389, 393], "fraction": [181, 230, 265, 293], "frame": [19, 43, 104, 198, 206, 296, 348, 391], "framework": [114, 259, 261, 268, 269, 270, 271, 314, 318, 349, 371, 392], "franc": 368, "fraunhoff": [233, 234], "free": [31, 43, 99, 106, 229, 241, 283, 349, 354], "freeli": 344, "freia": 135, "freifeld": 260, "french": 368, "freq": [230, 235], "freq_plot": 12, "frequenc": [12, 96, 230, 233, 234, 235, 236, 244, 300, 306, 313, 335], "fresnel": [233, 234, 306, 313], "frobeniu": 102, "from": [1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 121, 122, 126, 134, 135, 141, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 200, 201, 205, 206, 207, 208, 209, 210, 215, 216, 225, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 249, 250, 251, 255, 259, 260, 261, 262, 263, 267, 268, 269, 270, 271, 272, 279, 281, 282, 283, 284, 286, 287, 288, 289, 291, 293, 294, 296, 300, 302, 303, 305, 306, 307, 308, 311, 312, 313, 318, 319, 320, 321, 323, 324, 325, 326, 327, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 343, 344, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 371, 372, 373, 374, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396], "from_numpi": [300, 313, 319, 325, 343, 344], "from_torch_complex": 186, "front": [123, 140], "fstep": [363, 386], "fstepcv": 335, "fstephq": 334, "fsteppdnet": 363, "fsteppgd": [337, 338], "full": [17, 25, 31, 33, 40, 41, 43, 46, 47, 185, 187, 261, 268, 269, 271, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 383, 391], "fulli": [25, 47, 77, 92, 106, 107, 319, 342, 343, 350, 351, 352, 353, 355, 356, 383, 391], "funcanim": 296, "function": [2, 3, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 31, 32, 33, 34, 37, 38, 40, 41, 42, 44, 47, 48, 50, 55, 56, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 84, 85, 86, 87, 90, 92, 96, 98, 103, 106, 107, 112, 113, 114, 119, 120, 121, 122, 123, 124, 126, 129, 130, 134, 135, 136, 138, 139, 140, 141, 144, 147, 148, 149, 150, 151, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 177, 183, 185, 186, 187, 188, 189, 191, 194, 195, 199, 204, 206, 207, 210, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 239, 240, 242, 244, 252, 253, 254, 255, 256, 257, 259, 260, 267, 272, 274, 275, 279, 281, 283, 284, 291, 294, 296, 300, 303, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 331, 334, 335, 337, 343, 344, 349, 351, 356, 360, 361, 362, 363, 364, 365, 373, 374, 375, 381, 383, 384, 386, 389, 392, 393, 396], "functool": 69, "further": [260, 262, 263, 265, 266, 303, 314, 372, 392, 396], "furthermor": [78, 354], "fusion": 73, "futur": [44, 76, 170, 257, 369], "fx": [204, 205], "fx_t": 177, "g": [12, 13, 14, 15, 16, 17, 18, 19, 21, 24, 26, 27, 31, 33, 39, 40, 41, 42, 43, 47, 50, 56, 69, 72, 76, 79, 88, 90, 96, 102, 103, 105, 113, 121, 122, 126, 128, 134, 136, 141, 142, 145, 146, 147, 148, 150, 155, 157, 158, 159, 168, 169, 171, 172, 174, 175, 177, 178, 181, 182, 183, 185, 187, 193, 196, 198, 205, 206, 207, 210, 213, 231, 237, 242, 243, 246, 250, 252, 258, 259, 262, 267, 273, 274, 275, 296, 300, 303, 308, 311, 313, 319, 321, 324, 325, 326, 327, 331, 335, 337, 341, 344, 348, 351, 361, 362, 381, 383, 384, 385, 386, 389, 391, 392, 393, 395, 396], "g1": 238, "g2": 238, "g_": [84, 325, 361, 385, 386], "g_first": [134, 148, 149, 150, 151, 158, 159, 273, 274, 275, 307, 312, 337, 362, 364, 386], "g_i": [41, 267, 351], "g_param": [122, 148, 273, 275, 312, 314, 334, 335, 336, 337, 338, 341, 360, 362, 364, 365, 372, 385, 386, 389], "g_statist": [252, 253, 254, 255], "g_step": [334, 335, 337, 338, 363], "gain": [52, 53, 138, 139, 192, 193, 316, 336, 353, 355], "galleri": [291, 294, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 373], "game": [303, 381, 392], "gamma": [42, 44, 46, 51, 52, 53, 103, 108, 113, 114, 119, 123, 124, 125, 126, 127, 128, 129, 130, 137, 139, 140, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 156, 157, 166, 173, 176, 178, 183, 192, 193, 273, 303, 326, 327, 335, 343, 352, 353, 355, 361, 362, 380, 385, 386, 392], "gamma_backtrack": 113, "gamma_distribut": 178, "gammanois": [44, 46, 353], "gan": [55, 56, 57, 58, 59, 374, 392], "gaofen": [22, 318], "gaussian": [15, 44, 46, 48, 51, 52, 85, 88, 121, 129, 143, 144, 162, 170, 175, 176, 179, 183, 189, 192, 197, 199, 208, 213, 236, 237, 239, 245, 251, 255, 298, 300, 307, 308, 309, 311, 314, 316, 318, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 353, 355, 356, 360, 361, 362, 365, 375, 379, 381, 387, 392], "gaussian_blur": [168, 169, 306, 307, 316, 336, 379, 380], "gaussianmaskgener": [316, 319, 348, 380], "gaussianmixturemodel": [88, 121], "gaussiannois": [44, 46, 48, 144, 175, 189, 249, 251, 307, 308, 309, 315, 316, 321, 325, 326, 327, 330, 334, 335, 337, 338, 341, 342, 343, 345, 353, 354, 356, 360, 363, 365, 372, 379, 380, 385, 391], "gaussiansplittingmaskgener": [354, 380], "gb": 86, "gd": [148, 153, 155, 272, 273, 274, 275, 314, 360, 386], "gdfn": 99, "gditer": 314, "gen": [182, 231, 237], "geneal": 44, "gener": [3, 12, 16, 18, 25, 27, 31, 32, 33, 35, 38, 40, 41, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 73, 76, 79, 81, 82, 84, 85, 88, 89, 98, 102, 106, 121, 123, 125, 134, 135, 150, 170, 171, 173, 175, 177, 178, 179, 182, 183, 184, 185, 187, 188, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 204, 208, 209, 210, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 250, 251, 253, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 281, 283, 300, 310, 312, 316, 318, 319, 321, 324, 325, 330, 331, 335, 336, 337, 338, 344, 348, 349, 354, 357, 358, 363, 369, 373, 374, 377, 381, 382, 383, 384, 385, 386, 389, 390, 392, 393, 395, 396], "generalis": 102, "generate_coeff": 233, "generate_dataset": [12, 18, 303, 307, 308, 319, 320, 334, 337, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 364, 365, 391, 395], "generate_shift": [194, 195, 317, 380], "generated_dataset_path": 391, "generated_datasets_path": [360, 361, 362, 365], "generator2d": [232, 234], "generator_col": 313, "generator_il": 232, "generatorloss": [59, 60, 62, 392], "generatormixtur": [242, 306, 379], "geometr": [9, 90, 181, 261, 268, 269, 271, 349, 396], "geometri": [207, 216, 349], "geq": [44, 47, 51, 86, 138, 167, 253, 254, 255, 300], "get": [12, 19, 86, 113, 162, 250, 251, 267, 282, 283, 284, 285, 286, 303, 311, 343, 344, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 365, 369, 376], "get_alpha": 343, "get_alpha_beta": 251, "get_alpha_prod": [86, 251], "get_beta": 344, "get_chain": 253, "get_cov": 162, "get_cov_inv_reg": 162, "get_data_hom": [16, 25, 303, 318, 319, 348, 349, 350, 351, 352, 353, 354, 355, 356, 361, 362, 376, 391], "get_degradation_url": [300, 376], "get_dpir_param": 334, "get_freer_gpu": [249, 251, 303, 307, 308, 309, 311, 312, 313, 314, 316, 317, 319, 320, 325, 326, 327, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 376], "get_gspnp_param": 337, "get_image_url": [16, 65, 70, 286, 300, 306, 314, 316, 317, 319, 321, 330, 335, 336, 338, 343, 344, 349, 376], "get_item": 19, "get_model": 303, "get_noise_schedul": [251, 343], "get_output": [113, 337, 363], "get_overlap_img": [195, 317], "get_param": 267, "get_pdf": [236, 244], "get_sampl": 12, "get_samples_offlin": [12, 395], "get_samples_onlin": [12, 319, 395], "get_structur": 205, "get_timestamp": 376, "get_weight": 162, "get_weights_url": [303, 312, 318, 319, 348, 349, 350, 351, 352, 353, 354, 355], "gfp": 313, "gfz": [196, 300], "gif": 296, "git": [324, 372], "github": [102, 103, 324, 363, 369, 371, 372, 390], "give": [19, 20, 24, 26, 232, 234, 261, 342], "given": [12, 34, 37, 47, 113, 122, 136, 143, 150, 151, 152, 153, 154, 155, 156, 157, 161, 177, 178, 182, 183, 198, 199, 207, 216, 230, 231, 232, 233, 234, 235, 237, 238, 240, 244, 267, 303, 307, 313, 314, 317, 318, 325, 330, 331, 343, 374, 384, 387], "global": [63, 160, 260, 306, 307, 308, 309, 313, 314, 316, 317, 320, 325, 326, 327, 334, 335, 336, 337, 338, 345, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365, 393], "gmm": [88, 121, 162, 330, 331], "gmm_bsds_color2": 330, "gmm_lodopab_smal": [88, 121], "gmm_lodopab_small2": 331, "go": [16, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "goal": [326, 327], "good": [99, 207, 309, 314, 320, 364, 381, 384], "goodfellowliu": 17, "googl": [324, 331], "gopro": 19, "gp": 239, "gpu": [27, 76, 83, 87, 91, 99, 100, 104, 105, 108, 109, 162, 174, 177, 181, 182, 185, 187, 194, 195, 198, 199, 207, 215, 216, 246, 249, 256, 260, 283, 288, 289, 307, 308, 317, 320, 334, 335, 337, 338, 350, 351, 352, 353, 355, 356, 360, 361, 362, 364, 365, 376], "gpu_numb": 394, "gr2r": [44, 353], "grad": [92, 107, 112, 114, 115, 117, 119, 127, 129, 130, 133, 139, 140, 141, 142, 143, 144, 146, 300, 317, 341, 344, 386], "grad_clip": 12, "grad_conj": [115, 117, 133, 140], "grad_d": [119, 144], "grad_f": 165, "grad_ll": 344, "gradient": [12, 33, 40, 42, 51, 52, 79, 91, 92, 102, 103, 112, 114, 115, 117, 119, 120, 122, 127, 129, 130, 133, 139, 140, 141, 142, 144, 146, 148, 153, 156, 163, 164, 165, 166, 176, 183, 189, 191, 250, 258, 259, 272, 273, 274, 275, 307, 326, 327, 331, 335, 337, 338, 344, 345, 352, 356, 363, 365, 385, 386, 389, 390, 395], "gradient_desc": [191, 386], "gradientstep": [337, 390], "grai": [88, 121, 249, 251, 291, 293, 294, 307, 308, 314, 316, 320, 326, 327, 334, 335, 336, 337, 338, 360, 363, 364, 365], "grayscal": [172, 189, 288, 289, 306, 313, 314, 315, 316, 317, 330, 335, 338, 372, 379, 383, 385, 390], "great": 303, "greater": [47, 152, 234], "green": 174, "grid": [196, 199, 243, 264, 291, 294, 300, 330, 331], "grid_siz": 300, "ground": [12, 15, 16, 18, 19, 31, 32, 43, 50, 58, 59, 71, 113, 122, 229, 241, 256, 259, 272, 273, 303, 309, 318, 319, 320, 326, 327, 330, 331, 335, 336, 338, 341, 342, 343, 344, 345, 348, 349, 354, 360, 361, 362, 364, 365, 381, 384, 392, 395], "groundtruth": [325, 344, 348], "group": [33, 40, 90, 262, 267, 321, 349, 350, 383, 396], "grow": 325, "gsdrunet": [337, 383, 390], "gsdrunet_grayscale_torch": 390, "gsdrunet_torch": 337, "gspnp": 337, "gstep": [363, 386], "gstepcv": 335, "gstephq": 334, "gsteppdnet": 363, "gsteppgd": [337, 338], "gt": [15, 300, 318, 326, 327, 335, 336, 338, 361, 362], "gu": [118, 313, 334], "guess": [79, 161, 163, 164, 167, 191, 251, 300, 314, 356, 386], "guid": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 47, 318, 372, 379], "gz": [21, 26], "h": [16, 29, 30, 31, 43, 44, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 84, 92, 96, 99, 101, 104, 105, 114, 115, 117, 122, 136, 140, 155, 163, 168, 169, 170, 171, 172, 174, 176, 177, 181, 182, 185, 186, 187, 189, 196, 197, 198, 199, 200, 201, 204, 205, 206, 210, 217, 218, 219, 220, 221, 222, 228, 229, 230, 231, 233, 235, 236, 237, 241, 243, 244, 267, 291, 294, 296, 300, 311, 313, 316, 319, 325, 331, 348, 362, 383, 386, 393, 396], "h5": [16, 303, 307, 308, 319, 320, 334, 337, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 364, 365, 391], "h5py": [18, 27, 391], "h_": [140, 313], "h_k": [201, 228], "ha": [13, 14, 15, 17, 21, 24, 26, 42, 47, 83, 86, 108, 113, 122, 140, 164, 168, 169, 170, 171, 176, 177, 182, 185, 186, 189, 198, 200, 201, 207, 211, 212, 217, 219, 220, 221, 222, 228, 231, 249, 250, 291, 293, 294, 300, 303, 307, 308, 309, 311, 315, 318, 319, 320, 334, 336, 337, 342, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 379, 381, 395], "haar": 325, "hackathon": 368, "hadamard": [200, 201, 228, 316, 335], "hal": 150, "half": [88, 118, 121, 148, 154, 225, 251, 273, 274, 275, 279, 330, 331, 334, 348, 350, 360, 386], "hammernik": 107, "hand": [383, 384], "handl": [85, 86, 196, 237, 249, 250, 267], "hard": [108, 109], "hard_threshold_topk": 108, "has_cost": [113, 134, 335], "hat": [33, 40, 41, 44, 47, 54, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 160, 303, 344, 351, 374, 381, 384, 393], "hauptmann": 363, "have": [12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 37, 47, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79, 86, 90, 99, 120, 173, 177, 183, 185, 186, 187, 191, 196, 198, 199, 200, 210, 223, 249, 258, 259, 273, 296, 300, 307, 309, 310, 311, 314, 318, 319, 324, 330, 338, 342, 343, 344, 348, 349, 350, 351, 354, 370, 379, 383, 384, 390, 392, 393, 395, 396], "haze": 380, "hazi": 180, "hd5": 27, "hd5dataset": 27, "hdf5": [18, 334, 337, 360, 361, 362, 391], "hdf5dataset": [27, 303, 307, 308, 319, 320, 334, 337, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 364, 365, 391], "head": [99, 101], "head_dim": 101, "height": [23, 28, 86, 94, 95, 121, 171, 177, 185, 186, 195, 198, 207, 232, 234, 265, 291, 294, 325], "help": [300, 317, 345, 369], "helper": [96, 148, 173, 183, 186, 217, 218, 219, 220, 221, 222, 274, 275, 360, 365], "henc": 262, "hendriksen": 47, "here": [20, 73, 109, 115, 184, 190, 300, 303, 306, 307, 308, 309, 310, 312, 313, 315, 316, 318, 319, 324, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 350, 351, 353, 354, 360, 361, 364, 365, 386, 391], "hereaft": 344, "hessian": 102, "hf": 13, "hf_dataset": 310, "hf_train_dataset": 310, "hfdataset": 310, "hh": 217, "hidden": [81, 82, 86, 92, 97, 101, 135, 331, 390], "high": [24, 26, 73, 96, 99, 171, 181, 189, 230, 235, 236, 244, 300, 303, 316, 318, 390, 391], "higher": [69, 73, 74, 178, 232, 233, 234, 300, 314, 393], "highest": 300, "highli": [168, 361, 362], "highpass_kernel_s": 96, "histogram": [199, 225, 378], "histogramdd": [224, 378], "histori": [12, 113, 122, 272], "history_s": [113, 122, 360], "history_size_backward": [272, 360], "ho": [86, 343, 390], "hold": 113, "home": [281, 300, 303, 311, 312, 314, 316, 318, 319, 330, 331, 334, 335, 337, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355], "homographi": [268, 269, 270, 271, 349, 396], "hood": [86, 313, 321], "horizont": [14, 54, 90, 293, 348], "host": [21, 390], "hostedtoolcach": [321, 348], "how": [12, 47, 79, 81, 82, 89, 97, 113, 118, 122, 201, 202, 296, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 320, 325, 326, 327, 330, 334, 335, 336, 338, 341, 342, 343, 344, 345, 348, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 365, 374, 379, 381, 395], "howev": [31, 33, 39, 40, 41, 42, 43, 47, 50, 84, 189, 267, 309, 325, 348, 363, 377, 383, 393, 394], "hp": 122, "hq": [118, 148, 154, 251, 272, 273, 274, 275, 334, 360, 372, 386], "hqsiter": 334, "hr": [17, 21, 96], "hr_shape": 96, "hrm": [73, 96, 318], "hrms_shape": [96, 318], "hspace": 122, "html": [74, 81, 82, 102, 103, 187, 291, 294, 296, 369], "http": [12, 13, 16, 17, 20, 21, 26, 33, 34, 37, 40, 41, 44, 46, 51, 52, 53, 66, 74, 76, 81, 82, 87, 90, 94, 95, 102, 103, 117, 150, 163, 164, 170, 174, 176, 178, 180, 187, 199, 207, 216, 233, 239, 249, 250, 251, 254, 255, 261, 270, 291, 294, 296, 303, 306, 309, 310, 312, 313, 314, 318, 319, 324, 325, 330, 331, 335, 336, 337, 341, 342, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 372, 385, 390], "hu": 181, "hub": [99, 303, 312, 314, 318, 319, 330, 331, 334, 335, 337, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355], "hue": 321, "hug": 310, "hugginfacehub": 390, "huggingfac": [13, 17, 26, 99, 282, 284, 286, 287, 291, 303, 312, 313, 314, 318, 319, 322, 323, 324, 325, 330, 331, 335, 337, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 372, 373, 376, 385, 390], "human": 344, "hurault": [337, 371], "hv110_p0500510000": 15, "hv110_p0500510049": 15, "hybrid": 383, "hyperparamet": [51, 108, 109, 118, 173, 183, 249, 250, 251, 330, 341, 344, 345, 361, 362, 375, 379, 381, 386], "hyperspectr": [171, 181, 318], "hyperspectralunmix": [318, 380], "i": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 249, 250, 251, 253, 254, 255, 256, 257, 259, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 281, 288, 289, 291, 293, 294, 296, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 354, 355, 356, 360, 361, 362, 363, 364, 365, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396], "ib": [308, 320, 326, 334, 364, 365], "iccv": [96, 121], "icm": 368, "icnn": [116, 383], "id": [34, 117, 325, 331, 336], "idea": 369, "ideal": 56, "ident": [34, 51, 113, 122, 157, 161, 173, 175, 183, 191, 253, 254, 255, 267, 316, 330, 335], "identif": 379, "identifi": [15, 16, 20], "idri": 20, "idx": 343, "ie": [204, 238, 379], "ieee": [51, 52, 53, 66, 78, 103, 118, 180, 199, 334, 363], "ieeexplor": [51, 52, 53, 66, 180, 199], "ifft": [107, 186], "ignor": [18, 27, 40, 41, 47, 90, 177, 181, 185, 187, 188, 198, 230, 231, 235, 236, 244, 267, 300, 308, 321, 383], "ii": 300, "iid": [170, 200], "ikono": 22, "ill": [313, 392], "illumin": [232, 313], "illustr": [306, 386], "ilvr_adm": 86, "im": [300, 344], "im_siz": 300, "im_to_kspac": 186, "im_width": 207, "imag": [6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 38, 39, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 118, 119, 121, 123, 126, 129, 135, 136, 137, 140, 141, 144, 145, 147, 148, 160, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 233, 234, 236, 237, 239, 240, 241, 242, 243, 246, 247, 249, 251, 252, 253, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 296, 301, 302, 304, 305, 306, 310, 312, 313, 319, 322, 323, 324, 328, 329, 336, 339, 340, 343, 344, 346, 347, 348, 354, 357, 358, 363, 366, 367, 368, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 387, 390, 391, 392, 393, 396], "image_gdth": 300, "image_srf_2": 24, "image_srf_3": 24, "image_srf_4": 24, "imagefold": [286, 303, 308, 349, 376, 391], "imagenet128": [86, 390], "imageri": [22, 318], "images_contours_and_field": [291, 294], "imagin": 181, "imaginari": [25, 30, 110, 177, 185, 186, 187, 198, 316, 319, 391], "imbalanc": 259, "img": [15, 23, 195, 291, 294, 296, 300, 314, 326, 327, 331, 335, 336, 338, 341, 342, 343, 344, 345], "img1": 291, "img2": 291, "img3": 291, "img_001": 26, "img_001_srf_2_bicub": 24, "img_014_srf_2_srcnn": 24, "img_100": 26, "img_list": [291, 293, 294], "img_rang": 101, "img_shap": [80, 170, 197, 200, 309, 314, 316, 319, 335, 361, 362, 379, 391], "img_siz": [65, 70, 101, 169, 171, 174, 176, 177, 183, 185, 186, 187, 189, 194, 195, 196, 198, 201, 230, 235, 236, 243, 244, 246, 247, 288, 289, 300, 306, 307, 308, 309, 312, 314, 316, 317, 319, 320, 326, 327, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 350, 360, 361, 362, 363, 364, 365, 372, 379, 385], "img_transform": 310, "img_typ": 15, "img_width": [207, 316, 331, 338, 354, 363], "immers": [232, 234, 313], "implement": [19, 31, 43, 44, 47, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 82, 85, 86, 87, 89, 90, 92, 97, 101, 103, 105, 107, 118, 119, 122, 129, 130, 134, 138, 140, 141, 150, 162, 166, 167, 168, 171, 173, 179, 182, 183, 188, 191, 196, 201, 206, 224, 225, 226, 227, 230, 235, 244, 249, 250, 251, 260, 267, 283, 284, 289, 291, 300, 303, 306, 313, 315, 316, 317, 319, 321, 324, 325, 335, 346, 347, 348, 349, 354, 361, 362, 363, 373, 374, 378, 381, 386, 392, 393, 395, 396], "implicit": [141, 272, 309, 386, 389], "implicitli": [102, 103, 338, 385, 386], "import": [13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 31, 35, 36, 37, 43, 44, 45, 46, 47, 48, 49, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 104, 105, 113, 122, 126, 129, 144, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 187, 189, 192, 193, 198, 200, 201, 207, 208, 209, 210, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 249, 251, 259, 261, 267, 268, 269, 270, 271, 275, 291, 294, 296, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 372, 376, 378, 379, 383, 385, 386, 389, 391, 392, 393, 394, 396], "importlib": 312, "impos": 349, "improv": [43, 51, 76, 241, 303, 309, 314, 319, 354, 363, 374], "impuls": [199, 201, 306, 311], "in_chan": 101, "in_channel": [83, 86, 87, 91, 92, 94, 95, 99, 106, 275, 303, 314, 319, 320, 335, 338, 349, 351, 352, 353, 354, 355, 356], "in_nc": 100, "in_shap": [194, 317], "in_siz": [80, 207, 215, 216, 309], "includ": [7, 12, 16, 18, 27, 31, 33, 43, 44, 47, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 87, 98, 162, 172, 190, 204, 205, 219, 222, 225, 229, 231, 241, 256, 261, 267, 268, 269, 271, 314, 317, 318, 330, 343, 349, 353, 368, 379, 381, 385, 387, 391, 393], "incom": [272, 389], "incomplet": [12, 18, 27, 33, 38, 39, 40, 41, 76, 85, 98, 106, 166, 173, 182, 183, 191, 281, 283, 309, 324, 342, 345, 357, 358, 373, 392], "incorpor": [177, 182, 183, 191, 196, 300, 314], "increas": [47, 88, 106, 121, 300, 303, 306, 325, 348], "inde": [183, 338], "independ": [16, 25, 104, 170, 197, 200, 239, 264, 383, 392], "index": [12, 16, 19, 48, 73, 74, 162, 203, 232, 234, 267, 283, 287, 296, 313, 321, 326, 334, 337, 360, 379], "index_select": 344, "indic": [16, 19, 108, 122, 123, 124, 147, 233, 253, 316, 364, 386], "indicatorl2": [312, 364, 386], "individu": [12, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 291, 296], "induc": [19, 300, 327], "induct": 381, "inexact": 52, "inf_lr": 79, "inf_max_it": 79, "inf_progress_bar": 79, "inf_tol": [79, 303], "inf_z": [143, 387], "infer": [12, 46, 76, 79, 107, 215, 216, 225, 303, 381], "inferno": 300, "infinit": [272, 389], "info": [260, 334, 383], "inform": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 27, 74, 98, 113, 160, 161, 162, 163, 164, 167, 183, 191, 202, 203, 256, 300, 314, 317, 318, 320, 350, 351, 352, 353, 355, 356, 364, 383, 392], "infti": [123, 124, 147, 364], "inherit": [69, 85, 98, 177, 185, 198, 306, 307, 315, 337, 341, 363, 377, 379, 384, 386, 387, 392, 393, 394, 396], "init": [41, 163, 164, 166, 296, 312, 356], "init_anderson_acceler": 122, "init_iterate_fn": [113, 122], "init_metrics_fn": [113, 122], "init_param": [295, 361, 362, 365], "initi": [12, 51, 52, 79, 83, 84, 86, 87, 91, 100, 101, 113, 121, 122, 135, 161, 162, 163, 164, 167, 188, 190, 191, 242, 251, 295, 312, 317, 325, 331, 337, 338, 343, 344, 348, 350, 351, 352, 353, 355, 356, 361, 362, 364, 365, 380, 386], "initialis": [16, 47, 122, 172, 177, 183, 185, 198], "inner": [145, 254], "inner_it": 254, "inpaint": [12, 18, 27, 38, 47, 50, 85, 108, 113, 119, 121, 123, 129, 137, 140, 141, 147, 148, 173, 174, 175, 179, 183, 188, 191, 231, 237, 249, 251, 256, 273, 275, 283, 284, 286, 289, 291, 292, 309, 312, 320, 321, 324, 328, 329, 332, 333, 342, 343, 344, 345, 348, 349, 351, 366, 367, 371, 372, 373, 379, 380, 385, 386, 389], "input": [9, 12, 31, 32, 34, 37, 38, 43, 44, 47, 51, 52, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 110, 117, 122, 133, 134, 135, 143, 148, 149, 150, 151, 152, 153, 155, 157, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 181, 182, 183, 185, 186, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 210, 215, 216, 223, 229, 231, 237, 241, 246, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 303, 307, 309, 311, 316, 318, 325, 326, 327, 334, 335, 336, 337, 338, 343, 344, 354, 363, 365, 378, 379, 380, 381, 383, 386, 396], "input_mask": [229, 231, 237, 241, 348], "input_nc": 97, "input_resolut": 100, "input_s": [84, 210, 309], "input_shap": [89, 204, 205], "inria": 368, "inscrib": 207, "inset": [293, 376], "inset_loc": [293, 300], "inset_s": [293, 300], "insid": [3, 12, 99, 124, 207, 253, 313, 319, 356, 393], "inspir": [76, 122, 251], "instal": [20, 78, 108, 109, 187, 260, 296, 300, 324, 348, 369, 372, 396], "instanc": [113, 122, 134, 141, 148, 149, 150, 151, 152, 153, 155, 157, 161, 257, 273, 274, 275, 306, 307, 313, 335, 343, 362, 363, 386, 394, 395], "instanti": [13, 14, 15, 16, 17, 20, 21, 22, 24, 26, 113, 201, 238, 300, 306, 307, 313, 314, 326, 327, 334, 335, 337, 338, 379], "instead": [19, 34, 44, 47, 76, 103, 154, 168, 170, 187, 197, 224, 225, 229, 241, 257, 260, 300, 303, 325, 363, 381, 394], "institut": 368, "instruct": 99, "int": [12, 15, 16, 19, 23, 25, 27, 28, 31, 32, 34, 35, 36, 37, 43, 44, 45, 46, 47, 49, 63, 66, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 106, 107, 108, 109, 113, 121, 122, 123, 125, 126, 135, 136, 140, 145, 147, 148, 161, 162, 163, 164, 165, 166, 167, 170, 172, 176, 179, 181, 183, 184, 187, 188, 189, 191, 192, 193, 195, 196, 197, 199, 200, 203, 206, 207, 208, 209, 211, 212, 214, 215, 216, 224, 225, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 279, 287, 288, 289, 291, 293, 294, 296, 300, 314, 316, 320, 341, 343, 345, 350, 351, 352, 353, 355, 360, 363, 364, 365, 395], "intanc": 155, "integ": [187, 253, 254, 255, 263, 265, 319, 349], "integr": [14, 21, 207, 228, 356, 396], "intend": [186, 348], "intens": [180, 195, 199, 311, 313, 378], "interact": 296, "interest": [113, 267, 300, 335, 343], "interfac": [19, 341, 386], "interferometr": [113, 119, 129, 140, 141, 147, 148, 183, 191, 196, 280, 282, 284, 291, 292, 293, 301, 302, 324, 373, 380], "interferometri": [196, 300], "interleavedepochlossschedul": 392, "interleavedlossschedul": 392, "intermedi": [77, 106, 337], "intern": [140, 162, 311, 321, 337, 368], "internet": [13, 14, 15, 17, 21, 22, 24, 25, 26], "interp_point": [196, 300], "interpol": [34, 196, 207, 243, 261, 263, 264, 267, 268, 269, 270, 271, 291, 294, 300, 306, 313, 316, 318, 337, 344, 378, 396], "interpolation_method": [291, 294], "interpolation_mod": 263, "interpolationmod": 263, "interpret": [99, 106, 108, 184], "interv": [147, 205, 245, 255], "intial": 314, "intiliaz": 150, "intract": 344, "introduc": [44, 51, 52, 78, 80, 87, 100, 101, 229, 254, 300, 344, 348, 356], "introduct": [4, 6, 374], "inv": 331, "invari": [33, 40, 123, 349, 392], "invers": [12, 18, 26, 27, 33, 38, 39, 40, 41, 46, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 81, 82, 85, 87, 89, 97, 98, 106, 113, 114, 117, 119, 135, 138, 140, 141, 142, 148, 162, 166, 168, 169, 173, 177, 180, 181, 182, 183, 185, 186, 188, 190, 191, 193, 197, 198, 204, 205, 207, 213, 215, 239, 240, 242, 249, 258, 259, 260, 267, 272, 281, 283, 284, 289, 291, 292, 296, 300, 304, 305, 306, 308, 309, 315, 316, 318, 319, 320, 321, 324, 330, 331, 337, 339, 340, 341, 342, 345, 350, 351, 354, 355, 356, 360, 369, 371, 373, 374, 375, 376, 378, 379, 381, 382, 384, 385, 388, 389, 392, 393, 396], "inversef": [12, 47, 76, 98, 250, 354, 382, 384], "invert": [69, 73, 74, 135, 149, 150, 151, 267, 321, 331, 396], "invert_metr": [69, 73, 74], "invert_param": 267, "investig": 300, "involv": [102, 103, 349, 361], "io": [102, 103, 363], "iota_": [123, 124, 147, 364], "ip": [307, 314, 334, 335, 337, 338], "ipynb": [300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "ipython": [296, 348], "iradon": 378, "irf": 311, "irf_sigma": 311, "is_avail": [249, 251, 283, 300, 303, 307, 308, 309, 311, 312, 313, 314, 316, 317, 319, 320, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "is_standard_deblurring_network": 99, "is_standard_denoising_network": 99, "is_standard_deraining_network": 99, "is_valid_fil": 391, "isn": 21, "isola": 97, "isomorph": 270, "isotrop": [103, 213, 264], "issu": [267, 341, 369, 370], "itakura": 117, "itali": 368, "item": [19, 31, 43, 44, 46, 47, 200, 203, 300, 309, 313, 314, 325, 326, 327, 330, 331, 335, 336, 338, 341, 342, 345, 356, 386, 395], "iter": [12, 18, 20, 27, 31, 34, 37, 38, 50, 79, 84, 102, 103, 107, 109, 113, 118, 119, 122, 123, 125, 129, 134, 140, 141, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 170, 183, 191, 250, 251, 252, 253, 254, 255, 256, 259, 272, 273, 274, 275, 281, 283, 291, 295, 300, 307, 308, 309, 310, 312, 314, 315, 317, 319, 324, 326, 327, 334, 335, 336, 337, 338, 342, 343, 344, 345, 348, 349, 354, 360, 364, 365, 366, 367, 372, 373, 374, 376, 384, 389, 391, 395], "iterable_dataset": 310, "iterabledataset": 310, "iteratbl": 310, "iterator_param": 253, "ith": [88, 121], "its": [12, 14, 15, 19, 47, 92, 102, 103, 113, 114, 135, 140, 162, 169, 170, 172, 173, 185, 188, 200, 205, 225, 231, 239, 242, 267, 296, 312, 314, 315, 326, 327, 335, 343, 354, 361, 362, 363, 364, 374, 379, 386, 392, 396], "itself": 300, "iwt": 108, "j": [47, 102, 103, 113, 147, 163, 170, 197, 199, 311, 344, 361, 363], "jac_inv": 331, "jacobian": [34, 37, 102, 119, 135, 144, 183, 190, 191, 272, 360, 392], "jacobian_fre": [272, 360], "jacobianspectralnorm": [34, 392], "jbhuang0604": 24, "jingyunliang": 101, "jitter": 321, "jmo": 313, "join": [370, 396], "joint": 172, "jointli": [107, 259, 318, 365, 392], "jona": 363, "journal": 228, "jpeg": [21, 306, 335], "jpg": [65, 70, 309, 321, 341, 342, 345, 349], "json": 13, "julian": 371, "june": 368, "jupyt": [300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "just": [12, 22, 175, 183, 300, 306, 318, 331], "jychoi118": 86, "k": [16, 31, 43, 102, 107, 108, 109, 113, 118, 122, 134, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 196, 198, 201, 206, 228, 230, 235, 236, 239, 244, 254, 255, 273, 300, 312, 316, 319, 334, 335, 336, 341, 345, 348, 361, 362, 363, 364, 380, 385, 386, 389, 395], "k_adjoint": [312, 363, 364], "k_oversampl": [196, 300], "kaiser": [196, 214], "kappa": 379, "kargs_model": 34, "kb": [234, 313], "kbnufft": 300, "kbnufftadjoint": 300, "keep": [16, 108, 170, 182, 183, 188, 191, 200, 253, 254, 255, 267, 276, 320, 344, 360, 364, 376, 393], "keep_time_dim": [198, 348], "kei": [12, 101, 113, 207, 216, 230, 231, 232, 233, 234, 238, 239, 242, 243, 245, 256, 258, 273, 275, 306, 310, 313, 335, 344, 379, 386], "kept": [103, 108, 109, 231, 237], "kernel": [92, 93, 96, 143, 168, 196, 217, 218, 219, 220, 221, 222, 233, 234, 253, 306, 307, 311, 313, 316, 326, 334, 337, 341, 343, 360, 378, 379, 387], "kernel_dim": 92, "kernel_index": [326, 334, 337, 360], "kernel_s": [93, 239, 240], "kernel_torch": [326, 334, 337, 360], "kernels_12": 337, "keyword": [34, 113, 122, 158, 159, 166, 224, 257, 267, 273, 296], "kindli": 300, "kl": 331, "knee": [16, 25, 319, 348, 391], "knee_dataset": 319, "knowledg": [27, 73, 353, 355, 374, 385], "known": [127, 131, 132, 267, 342], "kohler": 391, "kornia": [261, 268, 269, 270, 271, 396], "kr": 17, "kspace": [16, 107, 177, 185, 186, 187], "kspace_shap": 319, "kspace_to_im": 186, "kullback": [133, 139, 331], "kunisch": 102, "kupyn": [58, 59, 97, 303], "kutta": [254, 387], "kwarg": [12, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 84, 85, 90, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 112, 113, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 224, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 272, 273, 274, 275, 296, 300, 307, 315, 319, 321, 335, 337, 362, 363], "kwargs_model": 34, "kx": 150, "k\u00f6hler": 19, "l": [31, 35, 36, 43, 44, 45, 46, 47, 48, 49, 58, 59, 60, 61, 62, 83, 91, 93, 102, 103, 118, 178, 195, 214, 239, 254, 255, 303, 306, 325, 331, 334, 351, 353, 381, 392, 393, 395], "l1": [64, 99, 128, 317, 386], "l12prior": 386, "l1l2": 393, "l1loss": [67, 362, 393], "l1prior": [122, 386], "l2": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 88, 99, 113, 115, 122, 126, 140, 144, 251, 274, 275, 300, 307, 314, 326, 327, 334, 335, 337, 338, 341, 343, 344, 345, 360, 361, 362, 365, 372, 385, 386, 389], "l2_axi": 126, "l2_loss": 344, "l2_prior": 307, "l2prior": 307, "l3": [66, 99], "l4": 99, "l_1": 64, "l_2": 64, "l_p": 66, "label": [55, 56, 57, 86, 113, 293, 303, 308, 331, 385, 386, 391], "label_loc": 293, "lam": 331, "lam_epl": 331, "lam_patchnr": 331, "lamb": [140, 157, 161, 300, 312, 326, 327, 337, 361, 362], "lambd": 386, "lambda": [51, 108, 109, 113, 122, 134, 140, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 173, 183, 191, 210, 242, 251, 252, 253, 254, 255, 267, 273, 274, 275, 300, 303, 307, 312, 313, 314, 318, 319, 321, 325, 326, 327, 331, 335, 337, 338, 348, 350, 351, 352, 353, 354, 355, 361, 362, 365, 375, 381, 385, 386, 393, 396], "lambda_": [251, 313, 325, 343, 361], "lambda_1": 102, "lambda_2": 102, "lambda_col": [232, 313], "lambda_i": 325, "lambda_il": [232, 313], "langevin": [254, 255, 341, 345, 371, 387], "langl": [114, 115, 140], "larg": [21, 22, 51, 84, 86, 88, 102, 121, 147, 168, 170, 300, 303, 314, 315, 318, 371, 374, 378, 379, 384, 391], "large_model": [86, 343, 344], "larger": [27, 86, 166, 184, 242, 254, 255, 348, 349, 350, 360, 365], "largest": [37, 108, 113], "laser": 232, "last": [12, 19, 52, 122, 182, 185, 187, 223, 225, 306, 343], "last_batch": 12, "latent": [77, 79, 82, 303, 331, 381], "later": [44, 232, 314, 343, 344], "latest": 372, "latter": [27, 344], "laurent": [102, 103], "law": 170, "layer": [77, 80, 81, 82, 83, 86, 87, 92, 94, 95, 97, 99, 100, 101, 106, 204, 205, 279, 309, 319, 363, 365, 389, 390], "layernorm": [99, 101], "layernorm_typ": 99, "layout": [291, 294], "lcondat": [102, 103], "ldot": [198, 211, 212, 325], "lead": [207, 216, 270, 371], "leaki": 193, "leakyrelu": [83, 91], "learn": [4, 12, 16, 18, 25, 27, 31, 33, 38, 39, 41, 43, 46, 47, 50, 51, 52, 65, 76, 79, 81, 82, 84, 85, 94, 95, 98, 106, 107, 118, 119, 121, 129, 134, 140, 141, 147, 150, 156, 158, 159, 170, 172, 173, 179, 182, 183, 185, 186, 188, 191, 206, 207, 229, 231, 237, 241, 256, 259, 263, 264, 267, 273, 275, 279, 281, 283, 287, 291, 295, 303, 305, 307, 309, 318, 319, 320, 321, 330, 331, 334, 337, 348, 349, 352, 353, 355, 358, 360, 364, 365, 366, 367, 368, 369, 373, 374, 381, 382, 384, 390, 396], "learnabl": [101, 106, 273, 361, 362, 364, 389], "learning_r": [84, 309, 320, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365], "learning_std": [303, 307, 318, 320, 334, 337, 348, 350, 351, 352, 353, 354, 355, 356, 363, 364], "learnt": 27, "least": [12, 56, 166, 167, 170, 183, 191, 207, 320, 348, 364, 386], "least_squar": [170, 183, 191, 207], "leclair": 337, "left": [44, 51, 52, 53, 58, 59, 60, 61, 62, 114, 119, 123, 124, 143, 144, 147, 163, 170, 183, 191, 194, 195, 197, 213, 239, 251, 255, 272, 293, 303, 313, 341, 343, 345, 351, 355, 356, 361, 381, 386, 387, 389, 393], "left_precon": 163, "leftarrow": 113, "legendr": [150, 335], "leibler": [133, 139, 331], "len": [13, 14, 15, 16, 17, 21, 22, 24, 25, 26, 232, 233, 234, 262, 267, 300, 306, 313, 325, 343, 379], "lenght": 365, "length": [31, 79, 113, 172, 214, 229, 239, 291, 293, 294, 296, 306, 311, 312, 361, 362, 363, 364, 365], "leq": [123, 124, 150, 152, 156, 157, 166, 211, 212, 214, 343, 386], "lesion": 20, "less": [232, 237, 267, 392], "let": [90, 198, 206, 263, 306, 310, 313, 319, 321, 325, 343, 344, 348], "level": [15, 46, 51, 52, 77, 78, 83, 85, 86, 87, 90, 93, 99, 100, 101, 106, 108, 109, 118, 129, 137, 138, 139, 143, 147, 178, 179, 184, 191, 193, 199, 209, 242, 245, 249, 250, 251, 254, 255, 300, 309, 311, 312, 316, 325, 327, 330, 335, 336, 338, 341, 342, 343, 344, 345, 360, 361, 364, 365, 383, 386, 387, 390], "leverag": [37, 173, 177, 272, 374, 384, 387, 389, 392], "levin": [307, 326, 334, 337], "levin09": [326, 334, 360], "lexicograph": 19, "lhood": 341, "lib": [321, 348], "libcpab": 260, "librari": [12, 78, 135, 187, 256, 257, 303, 313, 317, 318, 343, 360, 362, 363, 368, 369, 374, 383, 384, 396], "licenc": 20, "lidar": [191, 199, 283, 322, 323, 324, 373, 380], "lidc": 20, "lidcidrislicedataset": 391, "light": [19, 180, 181, 232, 234, 313], "lightn": 74, "lightweight": 319, "like": [83, 102, 162, 181, 237, 267, 300, 303, 317, 348, 378, 391, 393], "likelihood": [88, 117, 121, 129, 131, 132, 135, 136, 138, 139, 162, 173, 175, 179, 182, 183, 188, 191, 253, 254, 255, 284, 289, 291, 324, 331, 332, 333, 336, 341, 344, 373, 375, 385, 387], "limit": [12, 23, 88, 99, 119, 121, 131, 135, 136, 140, 141, 173, 175, 183, 184, 188, 191, 207, 209, 233, 234, 263, 291, 310, 324, 325, 330, 332, 333, 349, 373, 387, 390], "linalg": 325, "line": [182, 198, 207, 230, 235, 236, 244, 324, 348, 379, 385, 386, 396], "linear": [12, 51, 54, 88, 102, 103, 111, 121, 122, 145, 157, 161, 163, 164, 166, 167, 170, 171, 173, 175, 177, 180, 181, 182, 183, 185, 187, 190, 191, 194, 195, 200, 202, 203, 204, 205, 207, 210, 243, 255, 300, 309, 316, 318, 320, 321, 326, 327, 331, 335, 336, 338, 341, 342, 343, 344, 345, 360, 361, 362, 364, 365, 374, 377, 382, 386, 387], "linearli": [291, 294], "linearphys": [51, 88, 113, 121, 122, 168, 170, 171, 173, 176, 181, 182, 187, 190, 195, 196, 201, 202, 204, 207, 251, 255, 259, 300, 315, 377, 379], "linefmt": 311, "linewidth": 300, "link": [86, 253, 254, 255, 309, 324, 343, 375], "linspac": [207, 249, 331, 342, 343, 344], "lionel": [309, 341, 342, 345], "lip": [152, 156, 157], "lipschitz": [102, 103, 138, 139, 183, 254, 255, 335, 390, 392], "lipschitzian": [102, 103], "list": [12, 15, 19, 27, 32, 35, 36, 40, 41, 45, 48, 49, 83, 84, 88, 90, 91, 99, 100, 108, 109, 113, 121, 144, 147, 148, 163, 164, 166, 167, 170, 172, 180, 189, 190, 191, 202, 203, 204, 207, 225, 232, 233, 234, 238, 249, 256, 257, 259, 262, 264, 273, 274, 275, 278, 291, 293, 294, 296, 312, 316, 321, 343, 344, 349, 350, 351, 361, 362, 364, 365, 376, 380, 381, 383, 386, 387, 394], "list_denois": 343, "list_imag": 325, "list_noisi": 343, "list_param": [232, 233, 234, 306, 313], "list_prox": [325, 343], "list_rhos_algo": 343, "list_sigmas_algo": 343, "list_wv": [109, 325], "lista": [12, 18, 27, 38, 50, 119, 129, 140, 141, 147, 156, 170, 183, 191, 273, 275, 281, 283, 291, 295, 324, 362, 364, 366, 367, 373], "listtensor": 180, "literatur": 388, "liu": 348, "live": [207, 296, 338], "liver": [43, 241], "ll": [300, 325, 344], "lmm": 181, "load": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 85, 99, 108, 119, 123, 137, 140, 141, 170, 173, 182, 183, 185, 187, 190, 191, 197, 200, 258, 273, 275, 283, 286, 287, 288, 289, 300, 303, 306, 313, 321, 322, 323, 324, 343, 354, 373, 374, 376, 379, 385, 391, 395], "load_dataset": [307, 308, 310, 320, 326, 327, 334, 337, 360, 364, 365, 376], "load_dataset_hf": 310, "load_degrad": [326, 327, 334, 337, 350, 360, 376], "load_imag": [374, 376], "load_metadata_from_cach": 16, "load_model": 12, "load_np_url": [300, 313, 319, 325], "load_physics_generator_param": [18, 319, 391], "load_state_dict": [162, 170, 182, 190, 197, 200, 258, 303, 312, 318, 319, 348, 349, 350, 351, 352, 353, 354, 355, 364], "load_state_dict_from_url": [303, 312, 318, 319, 348, 349, 350, 351, 352, 353, 354, 355], "load_torch_url": 331, "load_url_imag": [65, 70, 306, 309, 314, 316, 317, 321, 330, 335, 336, 338, 341, 342, 343, 344, 345, 349, 372, 376, 385], "loader": [12, 256, 257, 361, 362, 391], "loc": [293, 312, 318, 319, 348, 350, 351, 352, 353, 354, 355], "local": [16, 25, 99, 309, 352, 369, 376, 391], "locat": [177, 185, 196, 198, 219, 291, 293, 300, 311], "lodopab": [184, 331], "log": [12, 46, 88, 117, 121, 129, 131, 132, 133, 135, 136, 138, 139, 143, 161, 162, 173, 175, 179, 182, 183, 184, 188, 191, 200, 250, 253, 254, 255, 259, 284, 289, 291, 300, 307, 314, 317, 324, 326, 327, 331, 332, 333, 336, 338, 341, 344, 345, 360, 361, 362, 363, 365, 373, 380, 385, 386, 387, 390, 395], "log10": 300, "log_": [72, 393], "log_metr": 161, "log_metrics_wandb": 12, "log_train_batch": 12, "logan": 314, "logarithm": 300, "logpoisson": 184, "logpoissonlikelihood": [331, 386], "logpoissonnois": [131, 132, 331, 380], "logs_total_loss_ev": [331, 395], "logs_total_loss_train": [331, 395], "logscal": 300, "long": [12, 308, 344], "longer": 303, "look": [381, 389], "loop": [122, 394, 395], "loop_random_online_phys": [12, 319, 395], "loos": 107, "loss": [0, 3, 9, 12, 18, 27, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 84, 85, 98, 106, 111, 112, 129, 173, 175, 178, 179, 183, 188, 191, 193, 229, 231, 237, 241, 256, 257, 259, 281, 283, 303, 309, 314, 317, 318, 319, 320, 321, 324, 330, 331, 345, 349, 350, 351, 357, 358, 360, 361, 362, 363, 364, 365, 371, 373, 374, 379, 381, 384, 393, 395, 396], "loss1": 48, "loss2": 48, "loss_d": 303, "loss_g": 303, "loss_hist": [314, 317], "loss_tot": [331, 395], "losses_d": [259, 303], "lossi": [61, 62, 79, 303], "lot": 19, "low": [73, 96, 143, 176, 184, 189, 224, 225, 230, 235, 236, 244, 300, 316, 318, 335, 384, 387], "lower": [69, 184, 210, 224, 225, 348], "lower_bett": 69, "lp": 66, "lpip": [334, 393], "lpips_std": 334, "lpips_v0": 334, "lpnorm": 393, "lprior": 341, "lr": [17, 96, 99, 303, 309, 317, 320, 331, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "lr_d": 303, "lr_g": 303, "lr_schedul": [12, 303, 320, 350, 351, 352, 353, 355, 360, 363, 364, 365], "lr_variational_problem": 331, "lrm": [73, 318], "lrschedul": 12, "lsdir": 21, "lsdirhr": 391, "lsgan": [56, 392], "lsqr": [166, 170, 183, 191, 207], "lung": [20, 391], "luxembourg": 368, "lvert": [60, 303, 381], "lyon": 368, "m": [22, 47, 51, 52, 53, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 96, 103, 111, 112, 157, 161, 167, 170, 171, 173, 181, 182, 183, 185, 189, 191, 196, 197, 198, 200, 231, 237, 254, 300, 313, 314, 316, 318, 335, 348, 354, 355, 356, 361, 362, 369, 375, 379, 386, 391, 393], "m1": 348, "m2": 348, "m_": 47, "m_1": 47, "m_2": [47, 354], "m_i": 47, "m_t": [177, 198], "machin": [368, 369], "made": 396, "mae": [64, 393], "mag": [177, 185], "magnet": [43, 177, 185, 198, 241, 319, 380], "magnitud": [16, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 160, 177, 185, 186, 291, 294, 319], "mai": [47, 84, 106, 113, 134, 193, 260, 267, 303, 309, 311, 314, 343, 381, 386], "main": [17, 26, 303, 312, 313, 314, 315, 318, 319, 325, 330, 331, 335, 337, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 369, 372, 376, 385, 390, 392], "maintain": [162, 260, 396], "make": [12, 108, 168, 314, 321, 345, 369, 383, 396], "manag": 273, "mandatori": [46, 85], "mani": [90, 176, 259, 309, 354, 371, 374, 379, 385, 389], "manifest": 20, "manner": [12, 173, 177, 256], "manual": [309, 338], "manual_se": [37, 126, 170, 173, 175, 177, 182, 185, 187, 197, 200, 207, 238, 242, 249, 300, 306, 307, 308, 309, 313, 314, 316, 319, 320, 325, 326, 327, 334, 335, 336, 337, 338, 343, 345, 348, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 378], "map": [42, 51, 79, 86, 102, 103, 107, 143, 166, 175, 183, 187, 191, 250, 251, 314, 317, 319, 352, 363, 375, 378, 379, 381, 382, 387], "map_loc": [303, 312, 318, 319, 348, 349, 350, 351, 352, 353, 354, 355], "mapper": 75, "mapsto": [113, 183, 191, 196, 375, 379, 385, 386], "marcenko": 170, "mark": 20, "markerfmt": 311, "markov": [253, 254, 255, 341, 384], "marseil": 368, "mask": [16, 31, 42, 43, 47, 105, 129, 169, 171, 173, 177, 182, 185, 186, 187, 198, 200, 204, 206, 229, 230, 231, 233, 234, 235, 236, 237, 241, 244, 249, 251, 309, 312, 315, 316, 319, 320, 321, 327, 330, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 354, 364, 372, 378, 379, 385, 386, 392, 395], "mask0": 319, "mask1": 319, "mask_ful": 348, "mask_gaussian": 316, "mask_gener": [47, 354, 379], "mask_random": 316, "mask_svd": 173, "mask_uniform": 316, "mat": [22, 326, 334, 360], "match": [182, 185, 186, 187, 199, 205, 267, 317, 318, 319, 361, 369, 381], "materi": 181, "matern_kernel": 239, "math": [50, 140, 167, 204, 219, 335, 337, 343, 362, 363], "mathbb": [34, 37, 47, 58, 59, 60, 61, 62, 113, 140, 170, 173, 182, 196, 300, 303, 325, 331, 349, 381, 385, 386], "mathbf": [181, 250, 251, 303, 343, 344], "mathcal": [48, 51, 52, 53, 58, 59, 60, 61, 62, 90, 123, 124, 143, 170, 178, 179, 184, 192, 193, 197, 199, 208, 209, 239, 250, 251, 255, 303, 311, 330, 331, 343, 344, 345, 351, 356, 364, 380, 381, 387, 392], "mathemat": [228, 368], "mathrm": [170, 197, 331], "matlab": [102, 103], "matplotlib": [291, 294, 296, 311, 314, 317, 325, 343, 348], "matric": [47, 162, 170, 204, 205, 226, 227, 341], "matrix": [37, 157, 161, 170, 181, 182, 183, 196, 197, 200, 204, 205, 207, 300, 316, 318, 341, 361, 362, 392], "matter": 206, "matthieu": 371, "mat\u00e9rn": 239, "max": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 83, 91, 126, 128, 147, 161, 208, 224, 225, 291, 294, 300, 313, 314, 316, 317, 325, 342, 344, 345, 391, 393], "max_": 356, "max_img": [291, 294], "max_it": [34, 37, 109, 113, 122, 123, 125, 148, 162, 163, 164, 165, 166, 167, 183, 191, 250, 251, 252, 253, 254, 255, 273, 275, 300, 307, 312, 314, 325, 326, 327, 331, 334, 335, 336, 337, 338, 341, 342, 343, 345, 360, 361, 362, 363, 364, 365, 386], "max_iter_backward": [272, 360], "max_iter_int": 140, "max_pixel": [72, 74], "max_zernike_amplitud": [232, 233, 234], "maxim": [140, 145, 162, 307, 320, 331, 334, 337, 360, 361, 362, 364, 365, 390], "maximis": [58, 61], "maximum": [34, 37, 46, 72, 74, 79, 90, 102, 103, 113, 122, 123, 125, 143, 147, 148, 162, 163, 164, 165, 166, 167, 183, 191, 208, 232, 234, 245, 252, 261, 265, 268, 269, 270, 271, 272, 291, 294, 307, 331, 342, 343, 387, 393], "maxpool": [83, 91], "mb": [86, 302, 305, 323, 329, 333, 340, 347, 358, 359, 367, 373], "mc": [47, 90, 350, 351, 354], "mc_physic": 319, "mcloss": [318, 349, 350, 351, 392, 393], "mcmc": [7, 374], "md": [336, 386], "md5": 14, "md_step": 114, "mea": [315, 318], "mean": [12, 31, 39, 41, 42, 43, 47, 50, 51, 52, 53, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 86, 178, 202, 252, 253, 254, 255, 257, 267, 320, 325, 331, 341, 342, 343, 344, 345, 348, 361, 364, 375, 381, 386, 387, 393, 395], "mean_has_converg": 253, "meaning": 343, "meaningless": [79, 303], "measplit": [348, 354], "measur": [12, 13, 16, 18, 22, 27, 31, 32, 33, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 51, 52, 53, 55, 57, 60, 61, 62, 73, 76, 79, 84, 85, 94, 96, 98, 104, 105, 106, 107, 111, 112, 113, 118, 122, 123, 125, 138, 139, 144, 157, 161, 170, 171, 172, 173, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 202, 203, 205, 207, 208, 209, 231, 237, 248, 249, 250, 251, 253, 256, 257, 259, 273, 281, 283, 303, 306, 307, 308, 312, 313, 315, 316, 319, 320, 324, 325, 326, 327, 331, 334, 335, 336, 337, 338, 343, 344, 348, 349, 350, 352, 353, 355, 356, 357, 358, 360, 363, 364, 365, 372, 373, 374, 375, 379, 381, 382, 384, 385, 386, 387, 392, 393, 395], "measurement_dir": [307, 308, 320, 334, 337, 350, 351, 352, 353, 355, 356, 360, 361, 362, 364, 365], "measurementsa": 395, "mechan": [31, 43, 44, 47], "med": [16, 348], "median": [93, 321, 341, 385], "medianfilt": [44, 47, 48, 321, 341, 372, 383, 385], "medic": [363, 378, 391], "medium": [180, 232, 234, 313], "meet": [308, 345], "mem": [302, 305, 323, 329, 333, 340, 347, 358, 359, 367, 373], "memori": [16, 25, 88, 101, 103, 121, 207, 215, 216, 267, 283, 310, 319, 376, 391], "mention": 147, "merg": 348, "meshgrid": 321, "messi": [309, 341, 342, 345], "metadata": [16, 20], "metadata_cach": 16, "metadata_cache_fil": 16, "meter": [276, 277], "method": [7, 12, 14, 16, 18, 19, 27, 31, 34, 37, 38, 43, 44, 46, 47, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 83, 84, 85, 87, 88, 102, 103, 105, 113, 114, 118, 119, 120, 121, 123, 129, 134, 135, 137, 140, 141, 144, 148, 149, 153, 157, 160, 161, 162, 166, 168, 169, 172, 173, 179, 182, 183, 185, 186, 188, 189, 190, 191, 197, 199, 200, 206, 249, 252, 254, 256, 267, 283, 284, 286, 287, 289, 291, 303, 306, 307, 309, 313, 315, 318, 321, 322, 323, 324, 326, 327, 335, 337, 338, 339, 340, 341, 342, 345, 354, 363, 364, 371, 373, 374, 377, 379, 381, 382, 383, 386, 391, 395, 396], "metric": [0, 12, 31, 33, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 56, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 113, 122, 161, 183, 249, 251, 256, 259, 272, 273, 292, 300, 303, 307, 309, 314, 318, 319, 320, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 345, 348, 360, 361, 362, 363, 364, 365, 374, 376, 392, 395], "metric_nam": 113, "mfx": 185, "microscop": 15, "microscopi": [15, 313, 391], "microsop": 232, "middl": [16, 19, 25, 168, 169, 176, 183, 207, 216, 319, 378], "might": [38, 55, 57, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 88, 121, 170, 251, 296, 315, 384, 393], "min": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 88, 102, 103, 108, 109, 113, 121, 147, 150, 183, 186, 191, 208, 224, 225, 261, 268, 291, 294, 300, 314, 316, 326, 327, 331, 344, 364, 385, 386, 391], "min_": [84, 307, 309, 325, 356], "min_max": [29, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 291, 294, 296], "min_prob": [113, 331, 385, 386], "min_x": [113, 122, 166, 167, 361, 362], "mind": 344, "mini": [25, 319, 348, 350], "minim": [84, 88, 102, 113, 114, 121, 134, 151, 152, 154, 156, 165, 250, 309, 317, 326, 327, 331, 351, 361, 364, 385, 386], "minimax": [303, 381, 392], "minimis": [59, 60, 62, 113, 149, 150, 153, 154, 155, 362], "minimiza": 84, "minimize_variational_problem": 331, "minimum": [46, 147, 208, 245, 261, 268, 271], "minu": [63, 73, 74, 75], "minut": [300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "mio": [330, 390], "mirror": [85, 87, 92, 113, 114, 117, 119, 136, 138, 140, 141, 142, 148, 155, 169, 173, 183, 188, 191, 193, 213, 274, 275, 283, 284, 289, 291, 292, 324, 339, 340, 373, 386], "miss": [312, 327], "mix": [160, 181, 238, 242, 316, 318, 355, 356, 379], "mixin": [186, 377], "mixtur": [88, 121, 162, 181, 238, 330, 331], "mlp": 101, "mlp_ratio": 101, "mm": 12, "mmse": 143, "mn": [170, 200], "mnist": [27, 351, 352, 353, 354, 355, 356, 361, 362, 391], "mnist_train": [361, 362], "mo": 40, "modal": 6, "mode": [12, 14, 21, 29, 76, 83, 86, 91, 99, 100, 107, 110, 171, 200, 261, 264, 268, 269, 270, 271, 291, 294, 296, 310, 314, 318, 319, 334, 337, 338, 382], "model": [0, 3, 12, 26, 31, 32, 33, 34, 38, 40, 41, 42, 43, 44, 46, 47, 48, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 118, 119, 121, 122, 123, 125, 129, 134, 135, 137, 140, 141, 143, 144, 149, 150, 151, 152, 161, 162, 170, 171, 173, 178, 179, 180, 181, 182, 183, 184, 188, 189, 191, 195, 199, 202, 203, 204, 205, 206, 207, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 268, 269, 271, 273, 275, 279, 283, 289, 291, 295, 300, 307, 314, 318, 319, 321, 322, 323, 324, 325, 343, 346, 347, 349, 350, 351, 352, 353, 355, 356, 360, 361, 362, 365, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396], "model_epl": 331, "model_eq": 321, "model_infer": [12, 395], "model_nam": [312, 318, 319, 348, 350, 351, 352, 353, 354, 355], "model_new": [312, 364], "model_nontrain": 312, "model_patchnr": 331, "model_spec": 364, "modifi": [43, 44, 47, 160, 256, 260, 319, 341, 378, 394], "modl": [279, 319, 348, 350, 388], "modul": [4, 5, 6, 8, 9, 10, 11, 12, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 69, 76, 78, 79, 80, 81, 82, 84, 85, 89, 92, 94, 95, 96, 97, 98, 99, 101, 104, 105, 107, 110, 113, 114, 115, 116, 117, 121, 122, 133, 134, 135, 140, 158, 159, 162, 170, 175, 182, 183, 188, 189, 190, 191, 197, 200, 215, 216, 242, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 267, 273, 275, 279, 295, 300, 307, 310, 315, 317, 321, 325, 326, 327, 334, 338, 341, 342, 353, 360, 361, 362, 363, 365, 374, 379, 383, 385, 389, 392, 393, 394], "modulelist": 325, "modulu": 190, "moeiloss": 392, "mohan": 106, "moi": [41, 351], "moiloss": [40, 351, 392], "momentum": [51, 52, 113, 122, 272, 356], "monitor": 318, "monoton": 390, "mont": [31, 44, 47, 51, 52, 53, 90, 252, 253, 254, 255, 267, 321, 341, 345, 383, 384], "montecarlo": [252, 254, 255, 341, 387], "more": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 31, 43, 44, 47, 69, 74, 79, 83, 86, 87, 88, 90, 91, 100, 101, 109, 113, 118, 121, 126, 128, 148, 163, 164, 170, 171, 178, 181, 183, 184, 191, 202, 203, 207, 215, 216, 232, 233, 234, 239, 243, 254, 255, 256, 260, 264, 268, 269, 270, 271, 272, 273, 274, 275, 291, 294, 300, 303, 306, 309, 312, 318, 319, 325, 331, 341, 348, 350, 356, 362, 364, 377, 379, 383, 385, 386, 389, 392, 393], "moreau": [140, 143, 154, 335, 387], "moreov": [113, 314, 315, 331, 344], "most": [85, 162, 267, 283, 348, 376, 383, 386], "mostli": 184, "mother": [108, 109], "motion": [19, 43, 58, 59, 97, 239, 241, 303, 307, 326, 334, 337, 360, 379], "motion_gener": 306, "motionblurgener": [238, 242, 303, 306, 379, 380], "mous": 15, "move": [19, 27, 349], "movement": 19, "mr": [16, 236], "mri": [12, 16, 18, 25, 27, 31, 33, 38, 39, 43, 47, 50, 76, 80, 85, 87, 98, 105, 106, 107, 173, 177, 182, 183, 186, 187, 191, 198, 206, 229, 230, 231, 235, 236, 237, 241, 242, 244, 260, 263, 267, 273, 279, 281, 283, 284, 287, 291, 294, 296, 321, 322, 323, 324, 325, 354, 357, 358, 371, 373, 380, 388, 391, 395, 396], "mri_mask_128x128": 350, "mrimixin": [107, 185, 187, 377, 380], "mriquest": 187, "mse": [31, 33, 39, 40, 41, 42, 43, 44, 47, 50, 64, 71, 303, 319, 320, 360, 361, 362, 363, 364, 365, 381, 393], "mse_loss": 362, "mseloss": [31, 33, 39, 40, 41, 42, 43, 44, 47, 50, 56, 60, 68, 303, 393], "msx": 171, "mu": [131, 132, 162, 184, 331, 380, 386, 393], "mu_": 393, "mu_x": 393, "much": [16, 348], "mul": [182, 188, 191], "mult": [226, 227], "multi": [40, 41, 107, 187, 319, 351, 363, 378, 392, 394], "multicoil": [16, 25, 107, 186, 187, 319, 354], "multicoil_train": 16, "multicoilmri": [16, 319, 380], "multidimension": 225, "multipl": [12, 18, 27, 32, 35, 36, 38, 39, 40, 41, 44, 45, 47, 48, 49, 52, 53, 66, 76, 85, 90, 98, 106, 119, 144, 173, 180, 182, 183, 191, 195, 202, 203, 238, 248, 252, 259, 262, 263, 267, 281, 283, 306, 321, 324, 334, 335, 342, 349, 354, 355, 356, 357, 358, 368, 373, 376, 379, 387, 391, 392, 396], "multipli": [138, 139, 149, 172, 182, 183, 193, 195, 201, 214, 227, 228, 243, 267, 378, 379, 386, 396], "multiplier_adjoint": [226, 378], "multiscal": 74, "multispectr": [22, 63, 73, 75, 96, 189, 261, 270, 318, 349, 380, 388, 391, 393], "must": [16, 31, 37, 38, 40, 41, 43, 47, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79, 83, 105, 117, 133, 171, 172, 181, 182, 189, 229, 230, 234, 235, 244, 247, 249, 251, 258, 259, 267, 293, 296, 315, 316, 318, 326, 327, 335, 336, 338, 354, 383, 393, 395], "my_dataset_nam": [320, 350, 351, 352, 360, 361, 362, 364, 365], "mykernel": 253, "mysampl": 253, "n": [16, 28, 34, 37, 44, 46, 47, 51, 52, 86, 143, 170, 172, 173, 177, 179, 181, 182, 183, 186, 187, 188, 190, 191, 192, 195, 196, 197, 200, 202, 204, 205, 208, 235, 236, 250, 251, 255, 267, 276, 300, 303, 312, 319, 321, 325, 330, 331, 337, 343, 344, 345, 351, 356, 359, 374, 375, 379, 380, 383, 387, 393], "n0": [131, 132, 184, 331], "n_": 195, "n_0": [131, 132, 184, 380, 386], "n_1": [86, 188], "n_2": [86, 188], "n_channel": [307, 308, 312, 314, 320, 326, 327, 334, 335, 336, 337, 338, 360, 361, 362, 363, 364, 365], "n_coeff": 108, "n_coil": [187, 319], "n_compon": [88, 121, 162, 331], "n_data": 363, "n_detector_pixel": [207, 216], "n_dual": 363, "n_eigen_psf": [243, 306], "n_eigenpsf": 306, "n_images_max": [307, 320, 334, 337, 350, 351, 352, 353, 355, 356, 360, 361, 362, 364, 365], "n_img": [194, 195, 247, 317], "n_it_max": [102, 103, 145, 326], "n_iter": [157, 161, 314, 317], "n_iter_train": 363, "n_layer": [97, 204, 205, 303], "n_level": [108, 361], "n_patch": 136, "n_primal": 363, "n_shard": 310, "n_step": 239, "n_tessel": 260, "n_tran": [90, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 321, 350], "n_wavelet_subband": 361, "n_zernik": [232, 234, 306, 313], "na": [232, 233, 234, 313], "nabla": [46, 102, 103, 114, 115, 117, 133, 141, 142, 143, 145, 152, 153, 155, 156, 157, 255, 336, 341, 345, 362, 385, 386, 387], "nabla_": [112, 130, 250, 344], "nabla_adjoint": [102, 103, 145], "nabla_u": [119, 144], "nabla_x": [115, 117, 119, 133, 140, 142, 144], "name": [15, 18, 22, 25, 109, 147, 148, 256, 273, 274, 275, 276, 286, 287, 344, 364], "namedtupl": [15, 16, 20], "nan": 106, "nativ": [311, 321, 374, 380], "natur": [44, 70, 86, 121, 308, 314, 330, 331, 349, 352, 391, 393], "nb": [83, 91], "nbia": 20, "nbu": [22, 318], "nbudataset": [318, 391], "nc": [81, 82, 83, 91], "ndarrai": [247, 276], "ndf": [81, 97, 303], "nearest": [83, 86, 91, 101, 251, 263, 294, 313], "necessari": [12, 86, 107, 250, 251, 259, 317, 351, 361, 369], "necessarili": [134, 337], "need": [12, 19, 20, 99, 108, 150, 162, 193, 230, 235, 244, 306, 308, 312, 314, 319, 325, 330, 341, 343, 364, 369, 377, 384, 386, 394, 395, 396], "neg": [117, 121, 131, 132, 133, 135, 136, 138, 139, 162, 193, 253, 254, 255, 267, 331, 345, 385, 387], "negat": 267, "negative_log_likelihood": [121, 331], "negative_patch_log_likelihood": 136, "negentropi": 386, "neighbor": [42, 196, 300, 352], "neighbor2neighbor": [12, 18, 27, 38, 76, 85, 98, 106, 173, 175, 183, 188, 191, 193, 281, 283, 324, 357, 358, 373, 392], "neighbour": [83, 91], "net": [20, 46, 83, 106, 303, 320, 343, 351, 352, 353, 354, 355, 356], "network": [10, 12, 18, 26, 27, 31, 34, 38, 42, 43, 44, 46, 47, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 65, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 135, 168, 170, 173, 182, 183, 191, 207, 236, 239, 240, 242, 250, 251, 256, 257, 258, 259, 279, 281, 283, 286, 304, 305, 309, 312, 322, 323, 324, 331, 334, 343, 344, 345, 348, 373, 374, 375, 382, 384, 389, 393, 395], "neural": [34, 47, 65, 79, 80, 92, 96, 99, 106, 135, 236, 309, 320, 331, 344, 345, 363, 384], "neurip": 46, "neuro": 16, "neuron": [135, 331], "never": 349, "nevertheless": 344, "new": [12, 27, 40, 41, 69, 157, 162, 168, 169, 177, 181, 185, 198, 201, 206, 238, 242, 253, 267, 291, 306, 313, 315, 319, 341, 364, 374, 379], "new_demo_ei_ckp_150_v3": 350, "new_mask": 348, "new_x": 253, "next": [20, 35, 36, 122, 303, 306, 310, 313, 319, 341, 343, 348, 349, 360, 361, 362, 365, 390, 391, 395], "next_phys": 41, "next_sigma": 343, "next_t": 344, "nf": [83, 87, 94, 95], "nfe": 344, "nftrainer": 331, "ngf": [82, 303], "ni": [232, 234, 313], "nice": [311, 343], "nichol": 390, "niqe": 393, "nll": 136, "nmse": 393, "nn": [12, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 68, 76, 79, 84, 85, 96, 98, 101, 104, 105, 106, 107, 110, 135, 168, 169, 170, 173, 175, 177, 182, 185, 186, 187, 189, 190, 193, 197, 198, 200, 217, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 279, 295, 303, 311, 316, 325, 341, 362, 374, 379, 386, 392, 393, 394], "no_grad": [33, 40, 56, 113, 173, 175, 273, 330, 336, 343, 360, 361, 362, 365], "no_learning_infer": [12, 256], "no_learning_method": [12, 256, 318, 354], "nois": [12, 15, 33, 40, 41, 44, 46, 47, 48, 51, 52, 53, 72, 77, 78, 83, 84, 85, 86, 87, 90, 93, 96, 98, 99, 100, 101, 106, 109, 113, 114, 117, 118, 119, 129, 137, 138, 140, 141, 142, 143, 144, 148, 169, 170, 173, 175, 177, 178, 179, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 199, 203, 207, 208, 209, 213, 242, 245, 249, 250, 251, 253, 254, 255, 283, 284, 289, 291, 292, 300, 307, 308, 311, 314, 316, 318, 321, 324, 325, 326, 327, 330, 334, 335, 337, 338, 339, 340, 344, 352, 353, 354, 355, 360, 365, 373, 374, 375, 379, 383, 385, 386, 387, 390, 392, 395], "noise2invers": [47, 354], "noise2noisi": 44, "noise2scor": 46, "noise_color": 189, "noise_dirnam": 15, "noise_gain": 96, "noise_grai": 189, "noise_level": [15, 86, 191], "noise_level_img": [307, 325, 326, 327, 334, 335, 336, 337, 338, 360, 363, 365], "noise_model": [44, 46, 175, 179, 183, 184, 188, 191, 192, 193, 203, 208, 209, 249, 251, 307, 309, 315, 316, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 345, 353, 354, 360, 363, 365, 372, 379, 385, 391], "noise_nam": 353, "noise_std": 341, "noiseless": [51, 52, 53, 86], "noisemodel": [44, 178, 179, 184, 191, 192, 193, 203, 208, 209], "noisi": [15, 42, 44, 46, 48, 51, 52, 53, 73, 77, 78, 83, 85, 86, 87, 88, 93, 99, 100, 101, 102, 103, 106, 108, 109, 144, 177, 178, 179, 182, 184, 190, 191, 192, 193, 203, 208, 209, 309, 325, 326, 327, 330, 331, 341, 342, 343, 344, 345, 349, 354, 379, 383], "noisy_imag": 383, "noisysampleidentifi": 15, "noll": [233, 313], "nomenclatur": [306, 313], "non": [31, 43, 162, 170, 180, 183, 190, 191, 196, 198, 203, 206, 207, 235, 236, 267, 300, 309, 321, 345, 348, 374, 377, 379, 382, 384, 390, 392], "non_linear": [108, 109, 325], "none": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 35, 40, 41, 43, 44, 45, 46, 47, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 86, 87, 88, 90, 91, 93, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 116, 119, 120, 121, 122, 123, 124, 125, 134, 135, 140, 141, 147, 148, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 215, 216, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 279, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 303, 306, 307, 308, 310, 313, 315, 318, 319, 331, 334, 335, 337, 348, 349, 351, 352, 353, 354, 355, 356, 365, 379, 386, 394, 395], "nonexpans": [34, 345, 390], "nonstandard": 19, "nonsymmetr": 163, "norm": [12, 34, 37, 54, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 97, 102, 103, 106, 108, 109, 113, 115, 125, 126, 127, 129, 130, 145, 147, 170, 183, 186, 205, 207, 259, 300, 307, 314, 315, 325, 326, 338, 341, 344, 364, 379, 386, 392], "norm_a2": 386, "norm_grad": 344, "norm_input": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75], "norm_lay": 101, "normal": [54, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 86, 87, 101, 102, 103, 129, 130, 131, 132, 135, 143, 166, 183, 184, 193, 195, 196, 207, 300, 314, 331, 344, 361, 362, 386], "normalis": [16, 22, 25, 69, 71, 129, 181, 393], "normalizing_flow": [135, 331], "normliz": 207, "note": [12, 31, 63, 73, 75, 90, 119, 124, 144, 150, 154, 171, 186, 187, 188, 190, 207, 216, 242, 256, 259, 264, 296, 300, 303, 306, 307, 318, 319, 321, 336, 341, 343, 344, 348, 349, 353, 354, 360, 361, 362, 365, 377, 391, 393, 394, 396], "notebook": [291, 296, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "noth": [69, 73, 267], "notic": [123, 306, 313, 319, 343], "nov": 368, "now": [21, 272, 274, 300, 303, 306, 313, 318, 319, 320, 325, 330, 331, 342, 343, 344, 348, 349, 360, 361, 362, 364, 365, 372, 379], "np": [170, 247, 249, 300, 303, 307, 313, 317, 318, 320, 325, 334, 337, 341, 342, 343, 344, 348, 350, 351, 352, 353, 354, 355, 356, 363, 364], "npy": [300, 313, 319, 325, 326, 334, 337, 350, 360], "nsgan": 56, "nth": 187, "nufft": [196, 300], "nufftobj": 300, "null": [306, 313], "num_angl": 331, "num_block": 99, "num_cascad": [107, 319], "num_channel": [232, 233, 234, 238, 239, 240, 242], "num_epoch": 277, "num_filt": 92, "num_head": 101, "num_it": [279, 314, 319], "num_lay": [92, 135], "num_refinement_block": 99, "num_step": 344, "num_train_timestep": [86, 251, 343, 344], "num_work": [27, 307, 308, 310, 320, 334, 335, 337, 338, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365], "number": [12, 15, 16, 18, 19, 20, 27, 28, 32, 35, 36, 40, 41, 44, 45, 46, 47, 49, 51, 52, 53, 77, 80, 81, 82, 83, 84, 87, 88, 90, 91, 92, 94, 95, 97, 99, 100, 101, 102, 103, 106, 107, 108, 109, 111, 112, 113, 121, 122, 123, 125, 131, 132, 135, 136, 140, 145, 148, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 178, 179, 181, 182, 183, 184, 186, 187, 188, 191, 192, 193, 196, 197, 199, 200, 204, 205, 207, 208, 209, 216, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 247, 249, 250, 251, 252, 253, 254, 255, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 279, 291, 294, 297, 298, 300, 303, 306, 307, 309, 310, 312, 313, 314, 315, 320, 325, 326, 327, 331, 334, 336, 337, 341, 342, 343, 344, 345, 348, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 371, 379, 386, 391, 393, 394], "number_of_oper": 351, "numer": [34, 37, 164, 183, 207, 232, 234, 253, 254, 255, 313, 325, 341, 396], "numpi": [217, 218, 220, 221, 224, 225, 226, 227, 276, 300, 311, 313, 317, 325, 341, 342, 343, 344], "numpoint": 300, "nutshel": 361, "nvidia": 283, "nwimag": 300, "nyquist": 233, "nyu": [16, 348], "nz": [79, 82, 303], "o": [170, 180, 200, 363, 369], "object": [12, 23, 56, 134, 153, 155, 162, 183, 186, 190, 191, 194, 202, 203, 206, 232, 234, 248, 258, 267, 272, 276, 277, 291, 293, 294, 296, 307, 309, 316, 325, 326, 327, 342, 345, 361, 378, 379, 386], "observ": [40, 41, 47, 48, 113, 119, 120, 121, 124, 127, 130, 132, 134, 139, 144, 149, 151, 152, 183, 191, 330, 331, 336, 374, 375, 381, 392], "obtain": [15, 25, 44, 47, 90, 99, 190, 213, 249, 251, 253, 254, 264, 306, 309, 313, 316, 341, 345, 368, 382, 387, 389], "oct": 368, "od": 384, "odd": [43, 186, 217, 241, 311], "odl": 363, "odlgroup": 363, "odot": [52, 53, 180, 201, 228, 355, 356], "off": [235, 267, 381, 384, 385, 388], "offer": [314, 315, 321, 378, 385, 396], "offici": [21, 101], "offlin": [12, 303, 395], "offset": [180, 195, 235], "often": [374, 375, 378, 379, 381, 386, 391, 395], "oil": [232, 313], "omega_": 325, "onc": [88, 113, 121, 267, 315, 319, 320, 344, 364, 372, 381, 396], "one": [15, 16, 18, 19, 20, 25, 31, 34, 36, 37, 41, 44, 45, 46, 47, 48, 55, 57, 63, 66, 73, 74, 75, 108, 110, 144, 162, 168, 169, 170, 174, 176, 180, 183, 186, 207, 210, 229, 231, 236, 237, 241, 244, 253, 254, 255, 258, 266, 267, 303, 310, 313, 317, 318, 325, 344, 351, 369, 378, 381, 382, 386, 391, 392, 394, 395], "ones": [44, 46, 47, 48, 49, 63, 64, 66, 67, 68, 69, 71, 72, 74, 75, 129, 144, 168, 169, 172, 174, 177, 183, 185, 187, 198, 207, 231, 237, 249, 251, 290, 306, 311, 312, 315, 316, 319, 338, 341, 344, 361, 364, 374, 376, 378, 379, 383, 386, 392, 393], "ones_lik": [129, 311, 327, 343], "onesid": 66, "onli": [12, 16, 17, 25, 27, 31, 40, 43, 44, 46, 47, 49, 69, 71, 83, 84, 86, 87, 91, 96, 100, 101, 104, 105, 108, 109, 140, 147, 168, 171, 182, 183, 191, 207, 213, 216, 218, 221, 229, 231, 237, 241, 250, 253, 256, 258, 263, 267, 272, 274, 291, 294, 303, 306, 309, 310, 313, 315, 317, 318, 319, 320, 326, 327, 331, 335, 341, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 363, 364, 377, 379, 384, 386, 387, 393, 396], "onlin": [12, 83, 86, 87, 91, 100, 101, 256, 319, 349, 395], "online_measur": [12, 256, 318, 319, 331, 348, 349, 363, 395], "onto": 12, "open": [20, 225, 368, 369, 370], "oper": [9, 12, 16, 18, 27, 31, 32, 33, 38, 39, 40, 41, 42, 44, 46, 47, 48, 51, 52, 53, 54, 55, 57, 76, 85, 88, 96, 98, 99, 102, 103, 104, 105, 106, 111, 113, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 137, 139, 140, 141, 144, 145, 146, 147, 157, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 226, 227, 228, 230, 233, 235, 236, 238, 239, 240, 242, 243, 244, 248, 249, 250, 251, 253, 255, 256, 257, 259, 267, 281, 283, 284, 289, 291, 308, 313, 314, 317, 318, 319, 322, 323, 324, 330, 336, 343, 344, 352, 353, 354, 355, 356, 357, 358, 371, 373, 375, 376, 378, 381, 382, 384, 386, 387, 390, 391, 392, 393, 396], "operatornam": [34, 90, 113, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 137, 140, 141, 142, 143, 144, 149, 150, 151, 152, 154, 156, 157, 186, 251, 272, 273, 300, 303, 325, 326, 327, 335, 343, 362, 364, 381, 385, 386, 389], "opnorm": 300, "opposit": [171, 206], "opt": [321, 348], "optic": 233, "optician": 313, "optim": [0, 10, 12, 79, 84, 85, 87, 88, 102, 103, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 173, 179, 183, 188, 190, 191, 200, 207, 250, 251, 253, 254, 255, 257, 258, 259, 272, 273, 274, 275, 283, 284, 289, 291, 292, 295, 300, 303, 309, 312, 314, 317, 318, 319, 320, 329, 330, 331, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 372, 373, 374, 376, 379, 384, 385, 387, 389, 395], "optim_build": [113, 300, 307, 314, 326, 327, 334, 335, 336, 337, 338, 372, 385, 386], "optim_iter": [113, 122, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 314, 335, 361, 362, 363, 364, 386], "optim_param": 314, "optim_step": 331, "optimalgo": 113, "optimis": [79, 303, 384], "optimiter": [113, 122, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 273, 274, 275, 335], "optimize_z": 79, "optimizer_d": 258, "optimizer_g": 258, "optin": 12, "option": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 32, 33, 35, 36, 40, 44, 45, 46, 49, 51, 52, 53, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 106, 113, 122, 138, 163, 164, 166, 167, 168, 170, 176, 177, 179, 181, 183, 184, 185, 187, 188, 189, 191, 192, 193, 197, 199, 200, 201, 207, 208, 209, 217, 220, 228, 229, 230, 231, 237, 241, 242, 243, 256, 258, 259, 272, 273, 286, 288, 289, 306, 315, 343, 344, 354, 356, 376, 379, 382, 385, 386, 395], "order": [16, 19, 33, 35, 36, 54, 66, 73, 102, 160, 183, 200, 232, 233, 234, 249, 306, 310, 321, 341, 342, 343, 344, 374, 392, 395], "org": [33, 34, 37, 40, 41, 44, 51, 52, 53, 66, 74, 76, 81, 82, 87, 90, 94, 95, 163, 164, 170, 174, 176, 178, 180, 199, 207, 216, 233, 239, 249, 250, 251, 254, 255, 261, 270, 291, 294, 296, 306, 309, 313, 341, 342, 345, 348, 356], "organ": 368, "orginal_data_dir": 303, "orig": [321, 348, 349], "origin": [19, 25, 47, 51, 55, 57, 59, 60, 81, 82, 84, 86, 87, 89, 97, 107, 160, 183, 185, 186, 187, 205, 213, 249, 251, 260, 264, 267, 303, 314, 317, 319, 325, 326, 327, 331, 343, 344, 348, 361, 363, 390, 393], "original_data_dir": [336, 349, 351, 352, 353, 355, 356, 361, 362], "original_data_hom": 354, "ortho": [186, 300], "orthogon": [108, 170, 186, 223, 254, 294, 383], "orthograph": 376, "orthonorm": [108, 147, 173, 196], "osa": 306, "other": [12, 15, 22, 31, 33, 39, 40, 41, 42, 44, 47, 50, 78, 99, 108, 174, 182, 183, 188, 191, 242, 256, 257, 259, 267, 300, 306, 308, 310, 318, 343, 363, 374, 382, 384, 386, 391, 394, 396], "otherwis": [12, 33, 34, 37, 40, 41, 49, 51, 66, 86, 90, 113, 122, 166, 168, 170, 176, 177, 182, 183, 185, 186, 189, 198, 200, 201, 211, 212, 214, 217, 218, 219, 220, 221, 222, 228, 259, 307, 308, 317, 320, 334, 335, 337, 338, 350, 351, 352, 353, 355, 356, 360, 361, 362, 364, 365], "otimes_": 313, "our": [63, 67, 68, 69, 75, 99, 150, 260, 300, 303, 312, 318, 319, 321, 326, 327, 335, 341, 344, 348, 354, 361, 362, 364, 369, 370, 372, 383, 391, 393], "ourselv": 316, "out": [19, 37, 170, 225, 253, 254, 255, 267, 303, 310, 313, 343, 344, 348, 351, 372], "out_channel": [83, 86, 87, 91, 94, 95, 99, 106, 275, 303, 314, 319, 320, 335, 338, 349, 351, 352, 353, 354, 355, 356], "out_siz": 215, "outer": 254, "output": [12, 22, 27, 31, 32, 37, 43, 47, 56, 77, 79, 80, 82, 83, 86, 87, 88, 91, 94, 95, 99, 104, 105, 106, 107, 108, 113, 120, 121, 122, 124, 135, 162, 163, 164, 167, 168, 169, 171, 173, 176, 177, 185, 186, 189, 193, 196, 198, 199, 201, 202, 204, 205, 206, 207, 215, 216, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 256, 263, 264, 267, 272, 273, 319, 325, 326, 327, 335, 336, 337, 338, 343, 344, 348, 354, 361, 362, 376, 379], "output_s": [82, 303], "output_shap": [204, 205], "outsid": [291, 313], "over": [12, 22, 29, 44, 47, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 90, 93, 102, 103, 107, 122, 126, 147, 171, 186, 207, 223, 267, 300, 308, 343, 344, 348, 354, 376, 383, 391, 393], "overal": 181, "overcomplet": [109, 166, 383], "overfit": [84, 309], "overlaid": 293, "overlap": [31, 43, 88, 121, 136, 195, 198, 206, 348], "overlap2prob": 317, "overlap_img": 317, "overlin": [190, 250, 251, 343, 344], "overload": 310, "overrid": [12, 18, 25, 43, 55, 57, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 93, 101, 162, 181, 259, 260, 267, 319, 395], "overridden": [69, 79], "overriden": 56, "oversampl": [196, 204, 205, 300, 314], "oversampling_ratio": 314, "overview": 181, "overwrit": [27, 141, 178, 179, 184, 192, 193, 209, 256, 355], "overwrite_exist": [27, 319], "overwritten": [141, 169, 170, 172, 173, 183, 185, 191, 200, 207], "own": [15, 18, 25, 27, 47, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 83, 86, 87, 91, 100, 101, 173, 175, 179, 183, 188, 191, 231, 257, 283, 286, 291, 303, 315, 322, 323, 324, 335, 363, 373, 374, 391, 396], "ozan": 363, "p": [44, 46, 52, 53, 66, 73, 88, 113, 121, 143, 147, 184, 187, 192, 193, 195, 199, 228, 250, 255, 267, 300, 307, 311, 325, 327, 334, 337, 341, 344, 345, 375, 380, 385, 386, 387, 393], "p_": [58, 59, 60, 61, 62, 143, 303, 331, 341, 345, 381, 387], "p_i": [88, 121, 136, 331, 386], "p_ix": [88, 121], "p_p": 325, "p_x": [58, 59, 303, 331, 381], "p_y": [60, 61, 62], "p_z": [331, 381], "packag": [2, 7, 78, 196, 260, 321, 344, 348, 374, 379, 386, 387, 389, 392, 393, 396], "pad": [16, 25, 93, 106, 108, 136, 168, 169, 171, 176, 183, 189, 195, 196, 201, 204, 205, 217, 218, 219, 220, 221, 222, 228, 243, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 300, 303, 306, 311, 313, 378], "pad_input": 108, "pad_to_s": 16, "pad_zero": 195, "padding_mod": 264, "page": [16, 386, 390], "paig": 167, "paint": 181, "pair": [12, 16, 18, 22, 27, 28, 44, 47, 185, 187, 242, 256, 257, 303, 308, 318, 319, 320, 351, 364, 391, 392], "pajot": [60, 303], "pan": [22, 63, 73, 96, 189, 261, 270, 349, 388, 393, 396], "pan_lr": 73, "panchromat": [22, 73, 96, 318, 391], "pannet": [318, 388], "pansharpen": [22, 63, 73, 96, 261, 270, 316, 318, 349, 380], "pantiltrot": [321, 349, 396], "papadaki": 337, "paper": [19, 44, 46, 59, 60, 83, 84, 87, 92, 99, 107, 149, 171, 184, 189, 228, 251, 260, 264, 303, 307, 309, 311, 318, 331, 334, 342, 345, 349, 363], "paper_fil": 46, "parallel": [78, 207, 215, 216, 307, 308, 310, 320, 334, 335, 337, 338, 350, 351, 352, 353, 355, 356, 360, 361, 362, 364, 365, 394, 396], "parallel_comput": [207, 215, 216], "parallel_dim": [163, 164, 166, 167], "param": [12, 18, 27, 40, 41, 99, 160, 170, 173, 177, 182, 183, 207, 235, 236, 243, 244, 253, 260, 267, 296, 319, 335, 337, 341, 363, 379, 391, 395], "param_nam": [238, 242], "param_valu": [238, 242], "paramat": 44, "paramet": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 300, 303, 307, 309, 312, 314, 315, 317, 318, 319, 320, 325, 326, 327, 330, 334, 335, 336, 337, 341, 343, 344, 345, 348, 349, 354, 364, 376, 380, 389, 390, 393, 395, 396], "parameter": 178, "parameteris": 261, "parametris": [107, 268, 269, 271], "params_algo": [113, 122, 148, 273, 274, 275, 295, 300, 307, 312, 314, 326, 327, 334, 335, 336, 337, 338, 360, 361, 362, 363, 364, 365, 372, 385, 386, 389], "params_algo_new": [312, 364], "params_dict": [238, 242], "params_pc": [201, 306], "parent": [16, 173, 183, 191, 273], "pari": 368, "part": [13, 25, 83, 110, 177, 185, 198, 316, 319, 389], "partial": [17, 69, 119, 127, 144, 183, 191, 272, 349, 389], "particular": [103, 150, 196, 207, 300, 306, 313, 336, 389, 395], "pass": [12, 31, 32, 35, 36, 38, 40, 41, 43, 44, 45, 47, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 89, 90, 92, 94, 95, 97, 105, 107, 148, 152, 166, 168, 172, 176, 182, 185, 187, 205, 224, 229, 231, 237, 241, 257, 259, 267, 272, 273, 274, 275, 286, 296, 303, 306, 319, 321, 354, 369, 379, 383, 389, 394, 396], "pastur": 170, "patch": [12, 23, 65, 88, 97, 101, 119, 121, 131, 135, 136, 140, 141, 173, 175, 179, 182, 183, 184, 188, 191, 207, 209, 284, 289, 291, 333, 373, 383, 385, 386, 390], "patch_dimens": 121, "patch_norm": 101, "patch_siz": [23, 88, 101, 121, 135, 136, 330, 331], "patchdataset": 331, "patchgan": [97, 303, 381], "patchgandiscrimin": [259, 303, 381], "patchnr": 386, "patchnr_batch_s": 331, "patchnr_dataload": 331, "patchnr_epoch": 331, "patchnr_learning_r": 331, "patchnr_lodopab_smal": [135, 331], "patchnr_lodopab_small2": 331, "patchnr_prior": 331, "patchnr_subnets": 331, "patchprior": [331, 386], "path": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 83, 86, 87, 88, 91, 100, 101, 121, 135, 281, 286, 287, 288, 291, 292, 294, 295, 303, 314, 348, 354, 369, 376, 391], "pathlib": [16, 19, 22, 25, 281, 286, 287, 291, 294, 295, 303, 307, 308, 312, 314, 320, 325, 326, 327, 334, 335, 336, 337, 338, 348, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "patient": 20, "patient_id": 20, "pattern": [118, 174, 198, 200, 306, 313, 316, 317, 334, 369, 392], "pc_gener": [201, 243, 306], "pd": [134, 150], "pdf": [33, 46, 76, 117, 236, 239, 244, 336, 342], "pdnet": 389, "pdnet_dualblock": [363, 389], "pdnet_primalblock": [363, 389], "pdnetdatafid": 363, "pdnetiter": 363, "pdnetprior": 363, "peak": [72, 199, 300, 311, 314], "penal": [113, 307, 386], "per": [12, 16, 18, 19, 20, 25, 31, 46, 83, 86, 87, 90, 100, 107, 108, 121, 144, 160, 174, 183, 199, 200, 203, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 296, 309, 311, 319, 321, 342, 345, 350, 351, 361, 387, 390, 395], "percentag": [25, 253, 254, 255, 261, 268, 269, 271], "percept": [381, 393], "perceptu": [65, 303, 374, 384, 393], "pereyra": 254, "perfect": 247, "perform": [3, 12, 13, 19, 22, 24, 26, 27, 29, 31, 43, 44, 47, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 84, 86, 99, 107, 113, 114, 117, 122, 134, 141, 148, 162, 168, 169, 171, 172, 177, 185, 186, 187, 195, 196, 201, 207, 215, 216, 217, 218, 219, 220, 221, 222, 223, 228, 251, 259, 263, 264, 266, 267, 272, 273, 274, 275, 300, 307, 309, 318, 319, 320, 325, 326, 327, 334, 338, 343, 344, 348, 354, 360, 363, 364, 374, 376, 378, 381, 383, 384, 386, 389, 392, 393, 396], "period": [253, 254, 255, 264], "permut": 300, "persist": 306, "persist_prev": 229, "perspect": [261, 270, 318, 349, 396], "pf": 233, "pgd": [113, 122, 134, 148, 156, 272, 273, 274, 275, 312, 314, 326, 327, 337, 338, 360, 361, 362, 364, 385, 386, 389], "pgditer": [113, 122, 337, 338, 361, 362], "pgl": 349, "phantom": 314, "phase": [31, 43, 83, 85, 110, 111, 113, 119, 125, 129, 134, 137, 140, 141, 148, 153, 157, 160, 161, 190, 191, 194, 195, 197, 205, 233, 234, 241, 246, 247, 283, 284, 289, 291, 306, 322, 323, 324, 348, 373, 380, 383, 386], "phase2phas": [43, 241, 348], "phase2phaseloss": [31, 47, 241, 348, 392], "phase2phasesplittingmaskgener": [229, 380], "phase_retriev": [160, 161, 190, 194, 195, 246, 247, 314, 317], "phaseless": [314, 317], "phaseretriev": [111, 112, 157, 194, 197, 205, 380], "phenomenon": 309, "phi": [44, 76, 114, 115, 116, 117, 133, 140, 160, 336, 351, 382, 386], "phi_": [320, 351], "photograph": 19, "photon": [15, 131, 132, 184, 191, 199, 283, 322, 323, 324, 373, 380], "phyic": 335, "physic": [0, 12, 16, 18, 27, 31, 32, 33, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 51, 52, 53, 55, 57, 60, 73, 76, 79, 84, 88, 96, 98, 104, 105, 107, 111, 112, 113, 119, 121, 122, 123, 125, 129, 134, 139, 144, 149, 150, 151, 152, 153, 155, 157, 161, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 259, 272, 273, 275, 300, 303, 306, 308, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 372, 374, 375, 377, 378, 380, 385, 386, 387, 389, 391, 392, 395], "physicist": 313, "physics1": [48, 144, 183, 379], "physics2": [48, 144, 183, 315, 379], "physics3": 379, "physics4": 379, "physics_gener": [12, 27, 40, 41, 256, 303, 319, 391, 395], "physics_i": 48, "physics_list": [202, 203], "physicsgener": [12, 27, 40, 41, 47, 230, 231, 238, 240, 243, 245, 256, 379], "pi": [205, 207, 213, 300, 314, 317, 338], "pi_": 255, "pick": [263, 310], "pickl": 16, "piecewis": [260, 392, 396], "pil": [13, 14, 15, 17, 21, 24, 26, 261, 268, 269, 270, 271, 310], "pinhol": [232, 268, 269, 271, 313, 396], "pinhole_radiu": 232, "pinv": [76, 354, 382], "pip": [78, 108, 109, 260, 324, 369, 372], "pixel": [14, 24, 43, 72, 74, 77, 83, 91, 99, 168, 169, 171, 174, 176, 181, 182, 183, 186, 191, 199, 200, 207, 210, 216, 229, 231, 232, 234, 237, 241, 263, 267, 300, 303, 311, 312, 314, 317, 320, 321, 327, 335, 342, 344, 345, 349, 354, 355, 356, 361, 362, 364, 378, 379, 391, 392, 393], "pixel_s": [233, 234, 313], "pixel_spac": [207, 216], "pixelshuffl": 101, "pixelshuffledirect": 101, "pixelsize_xi": [232, 313], "pixelsize_z": [232, 313], "pixelsuffl": [83, 91], "pixelwis": [47, 182, 231, 237, 267, 344, 348, 380], "pkl": 16, "place": 160, "placehold": [28, 73], "placeholderdataset": 259, "plai": [83, 85, 87, 103, 113, 114, 117, 118, 119, 137, 138, 140, 141, 142, 148, 169, 173, 183, 188, 191, 193, 213, 251, 254, 255, 256, 283, 284, 289, 291, 292, 314, 337, 340, 341, 345, 365, 371, 373, 374, 383, 384, 385, 386, 389], "plain": [249, 251], "plan": 318, "plane": [171, 207, 234, 306, 313, 396], "plausibl": 375, "playback": 19, "pleas": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 181, 257, 267, 300, 369, 370], "plot": [12, 113, 201, 256, 259, 272, 273, 292, 293, 294, 295, 296, 300, 303, 306, 307, 308, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 330, 337, 343, 344, 348, 349, 350, 351, 352, 353, 355, 360, 363, 364, 372, 374, 385, 386], "plot_convergence_metr": [12, 256, 300, 307, 326, 327, 334, 337, 338, 363], "plot_curv": [300, 326, 327, 335, 336, 338, 376], "plot_imag": [12, 256, 303, 307, 318, 319, 334, 337, 348, 350, 351, 352, 353, 354, 355, 356, 363, 364], "plot_inset": [300, 376], "plot_interv": 12, "plot_kwarg": 296, "plot_measur": [12, 256], "plot_ortho3d": [313, 319, 376], "plot_paramet": [361, 362, 365, 376], "plot_video": [348, 376], "plt": [291, 311, 314, 317, 325, 343, 348], "plu": 348, "plug": [83, 85, 87, 103, 113, 114, 117, 118, 119, 137, 138, 140, 141, 142, 148, 169, 173, 183, 188, 191, 193, 213, 251, 254, 255, 256, 283, 284, 289, 291, 292, 314, 337, 340, 341, 344, 345, 365, 371, 373, 374, 383, 384, 385, 386, 389], "pm": 263, "png": [14, 15, 17, 21, 24, 26, 291, 306, 310, 314, 316, 317, 330, 336, 338, 343, 344, 372, 385], "pnp": [12, 18, 27, 34, 83, 85, 87, 113, 118, 119, 129, 134, 140, 141, 143, 148, 158, 159, 169, 173, 179, 182, 183, 188, 191, 200, 207, 251, 253, 255, 256, 257, 275, 283, 284, 286, 287, 289, 291, 292, 312, 324, 339, 340, 346, 347, 360, 364, 372, 373, 374, 384, 386, 387, 389, 390], "pock": [12, 18, 27, 38, 50, 85, 102, 103, 108, 119, 123, 137, 140, 141, 148, 150, 173, 182, 183, 191, 256, 273, 274, 275, 283, 286, 312, 324, 363, 366, 367, 373, 386], "poential": 141, "point": [34, 113, 122, 124, 134, 162, 183, 232, 239, 240, 272, 273, 300, 345, 360, 369, 386, 389, 394], "poisson": [15, 44, 46, 48, 52, 53, 85, 87, 113, 114, 117, 119, 131, 132, 138, 139, 140, 141, 142, 144, 148, 169, 173, 183, 184, 188, 191, 192, 193, 199, 213, 283, 284, 289, 291, 292, 311, 316, 324, 331, 339, 340, 352, 353, 355, 356, 373, 387, 392], "poissongaussiannois": [316, 380], "poissonlikelihood": [117, 144, 336, 343, 386], "poissonnois": [44, 46, 48, 139, 144, 199, 316, 336, 352, 353, 355, 380], "polynomi": [233, 306, 313], "pool": [83, 91, 93], "poor": 314, "popular": [44, 63, 90, 171, 318, 391, 392, 393], "pos_weight": 92, "posed": 392, "posit": [52, 53, 90, 92, 101, 138, 193, 195, 257, 263, 267, 321, 343, 355, 356, 385, 386], "possibl": [72, 86, 87, 113, 168, 189, 204, 205, 272, 274, 300, 306, 313, 314, 319, 360, 369, 379, 384, 385, 386, 393, 394], "possibli": [40, 41, 52, 98, 180, 253, 331, 341, 381, 384, 392], "post": [320, 342, 345, 393], "posterior": [7, 249, 250, 251, 253, 254, 255, 341, 342, 344, 345, 387], "posteriori": [143, 387], "postiv": [117, 133], "potenti": [92, 105, 114, 115, 116, 117, 119, 120, 133, 136, 141, 144, 148, 155, 274, 275, 309, 336, 337, 362, 395], "pow": 341, "power": [34, 37, 73, 86, 161, 183, 200, 315, 338, 343], "pp": [102, 103, 118, 167, 334], "pr": 369, "practic": [100, 147, 183, 300, 349, 361], "pre": [65, 99, 300, 314, 344, 385, 389, 393], "precis": [90, 113, 126, 128, 183, 232, 233, 234, 300, 325, 331, 386], "precondition": 163, "preconula": 341, "predefin": [1, 122, 183, 191, 353, 371], "predefined_noise_model": 353, "prefer": [19, 107, 369, 395], "prefix": 277, "pregener": 25, "prepar": [310, 369, 391], "preprocess": [69, 157, 161], "present": [319, 350, 351, 352], "preserv": [300, 396], "pretrain": [12, 46, 59, 60, 62, 83, 86, 87, 88, 91, 99, 100, 101, 118, 121, 135, 249, 251, 303, 314, 318, 319, 330, 331, 334, 335, 336, 337, 338, 342, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 360, 365, 371, 374, 383, 384, 385, 387, 393, 394], "pretrained_noise_level": 101, "prevent": [313, 348], "previou": [113, 122, 149, 150, 151, 229, 253, 341, 343, 355, 379, 394], "previous": [27, 325], "primal": [12, 38, 50, 85, 87, 94, 95, 102, 103, 113, 119, 122, 129, 134, 137, 140, 141, 148, 150, 158, 159, 173, 179, 183, 188, 191, 200, 207, 273, 275, 283, 284, 289, 291, 292, 324, 339, 340, 364, 366, 367, 373, 385, 386, 389], "primari": [102, 103], "princip": [157, 161], "print": [12, 13, 14, 15, 17, 19, 20, 21, 22, 24, 26, 31, 34, 37, 43, 44, 46, 47, 84, 102, 103, 113, 160, 161, 181, 183, 232, 233, 234, 238, 239, 242, 243, 245, 249, 250, 251, 252, 253, 254, 255, 259, 276, 283, 300, 306, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 326, 327, 330, 331, 335, 336, 338, 341, 342, 345, 348, 350, 351, 352, 353, 355, 356, 364, 378, 379, 386, 391], "printout": 19, "printout_first": 19, "printout_index": 19, "prior": [12, 18, 23, 27, 31, 38, 50, 80, 83, 84, 88, 98, 103, 113, 118, 119, 121, 122, 126, 128, 129, 131, 134, 135, 136, 137, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 159, 169, 170, 171, 173, 175, 179, 182, 183, 184, 188, 191, 207, 209, 213, 229, 253, 254, 255, 256, 273, 274, 275, 279, 281, 283, 286, 287, 289, 291, 292, 295, 312, 314, 322, 323, 325, 328, 329, 330, 333, 334, 335, 336, 338, 348, 350, 360, 361, 364, 365, 366, 367, 372, 373, 374, 375, 383, 384, 385, 387, 389, 390], "prior_new": [312, 364], "priori": 331, "priviledg": 19, "prob": [238, 306], "probability_mask": [320, 364], "probabl": [52, 53, 170, 182, 200, 236, 238, 244, 320, 331, 355, 364], "probail": 331, "probe": [194, 195, 246, 247], "probe_radiu": [246, 317], "problem": [12, 18, 22, 26, 27, 33, 38, 40, 46, 50, 55, 57, 58, 59, 60, 61, 62, 79, 81, 82, 84, 85, 87, 88, 89, 97, 98, 102, 103, 106, 108, 109, 113, 114, 117, 118, 119, 121, 122, 134, 138, 140, 141, 142, 148, 166, 168, 169, 170, 173, 175, 176, 180, 181, 183, 188, 191, 193, 206, 207, 213, 239, 240, 242, 249, 251, 258, 259, 273, 281, 283, 284, 289, 291, 292, 296, 304, 305, 308, 309, 314, 315, 318, 320, 321, 324, 330, 331, 339, 340, 342, 348, 350, 351, 356, 360, 361, 364, 369, 371, 373, 374, 376, 379, 381, 382, 383, 384, 385, 386, 388, 389, 392, 393], "proce": 122, "procedur": [106, 312, 341, 364], "proceed": [46, 118, 334], "process": [12, 22, 25, 27, 31, 43, 78, 103, 104, 110, 123, 147, 170, 183, 191, 197, 205, 206, 239, 251, 320, 356, 374, 378, 383, 391, 392, 393], "prod": [170, 314], "prod_": [204, 205, 344], "produc": [28, 105, 172, 183, 189, 191, 202, 203, 248, 267, 387], "product": [37, 173, 183, 190, 191, 201, 228, 267, 321, 341, 378, 396], "product_convolution2d": [306, 378], "productconvolutionblurgener": [201, 306, 380], "progress": [12, 27, 79, 84, 162, 163, 164, 167, 249, 250, 251, 252, 253, 254, 255, 256, 259, 320, 344, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365], "progress_bar": [12, 331], "prohibit": 170, "proj": 124, "project": [76, 94, 123, 124, 125, 196, 207, 215, 216, 253, 254, 255, 261, 267, 268, 269, 270, 271, 300, 321, 349, 361, 362, 369, 376, 378, 390, 396], "promot": [375, 392], "propag": [33, 40, 42, 313, 352], "properli": [46, 300, 310], "properti": [321, 379, 396], "proport": [16, 51, 52, 53, 108, 235, 396], "propos": [34, 37, 46, 73, 79, 81, 82, 89, 90, 97, 99, 121, 152, 300, 325, 330, 331, 344, 349, 362], "propto": [143, 345, 385, 387], "protocol": 96, "prototyp": 77, "provid": [2, 5, 6, 10, 11, 12, 16, 19, 20, 22, 25, 27, 46, 55, 56, 57, 58, 59, 60, 61, 62, 85, 90, 98, 108, 135, 147, 166, 168, 169, 171, 172, 173, 177, 179, 184, 185, 186, 187, 188, 189, 192, 193, 198, 206, 207, 208, 209, 210, 225, 242, 256, 257, 259, 267, 291, 296, 300, 306, 309, 313, 314, 315, 316, 318, 319, 326, 327, 334, 335, 336, 337, 338, 341, 348, 350, 374, 376, 377, 379, 381, 383, 384, 385, 386, 387, 388, 389, 391, 393, 395, 396], "prox": [119, 123, 124, 125, 126, 127, 128, 129, 130, 132, 137, 139, 140, 141, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 169, 177, 183, 185, 198, 251, 300, 325, 326, 327, 335, 343, 361, 362, 363, 364, 385, 386], "prox_conjug": [119, 140, 144, 335], "prox_d": [119, 144], "prox_d_conjug": [119, 144], "prox_l0": 108, "prox_l1": 108, "prox_l2": [12, 51, 173, 176, 183, 256, 315, 379], "prox_tau_fx": 103, "proxim": [102, 103, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 137, 139, 140, 141, 144, 145, 146, 147, 148, 156, 173, 176, 182, 183, 254, 273, 274, 275, 307, 315, 325, 326, 327, 335, 337, 338, 343, 363, 365, 385, 386, 389], "pseudo": [12, 51, 76, 169, 177, 182, 185, 190, 197, 198, 205, 207, 300, 303, 306, 315, 318, 354, 379, 384], "pseudoinvers": [76, 170, 173, 177, 181, 183, 191, 207, 382], "pseudorandom": [170, 179, 182, 184, 188, 192, 193, 197, 199, 200, 208, 209, 242], "psf": [168, 183, 191, 232, 233, 234, 239, 240, 242, 243, 283, 291, 294, 300, 306, 322, 323, 324, 373], "psf_coll": 313, "psf_confoc": 313, "psf_gener": [201, 243, 306], "psf_grid": [201, 306], "psf_log": 300, "psf_size": [201, 232, 233, 234, 238, 239, 240, 242, 243, 306, 313, 379], "psf_size_xi": 313, "psf_size_z": 313, "psfgener": [232, 233, 234, 239, 243, 306, 313], "psi": [108, 109, 147, 325, 327, 386], "psi_": 325, "psi_1": 109, "psi_2": 109, "psi_i": 300, "psi_l": 109, "psnr": [79, 113, 183, 249, 251, 256, 272, 273, 300, 303, 307, 309, 314, 319, 320, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 393], "psnr_epll": 331, "psnr_fbp": 331, "psnr_ob": 330, "psnr_patchnr": 331, "psnr_recon": 330, "psnr_std": [303, 307, 320, 334, 337, 348, 350, 351, 352, 353, 354, 355, 356, 363, 364], "pt": [16, 88, 121, 135, 330, 331, 344], "pth": [12, 99, 170, 182, 190, 197, 200, 303, 312, 314, 318, 319, 334, 335, 345, 348, 349, 350, 351, 352, 353, 354, 355, 364], "ptwt": [108, 109, 312], "ptychographi": [119, 125, 140, 160, 190, 191, 195, 246, 247, 283, 284, 289, 291, 322, 323, 324, 373, 380], "ptychographylinearoper": [194, 380], "public": [117, 336, 369], "pula": 341, "pula_mean": 341, "pula_var": 341, "pulaiter": 341, "pull": 369, "pupil": [232, 233, 234, 306, 313], "pupil_s": [232, 233, 234], "pure": [86, 181, 251, 261, 267, 318, 349], "purpos": [28, 312, 318], "push": 331, "put": [13, 14, 15, 17, 21, 24, 25, 26, 229], "py": [300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 360, 361, 362, 363, 364, 365, 367, 373], "pyiqa": [65, 70, 334], "pyplot": [311, 314, 317, 325, 343], "pytest": 369, "python": [78, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 369], "python3": [321, 348], "pytorch": [81, 82, 83, 86, 87, 91, 93, 100, 101, 108, 109, 170, 197, 200, 242, 306, 307, 308, 309, 311, 312, 313, 316, 320, 321, 325, 326, 327, 334, 335, 336, 337, 338, 344, 345, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365, 378, 391, 394], "pywavelet": 108, "pywt": 147, "q": [58, 59, 60, 61, 62, 73, 122, 303, 344, 381], "qk": 101, "qk_scale": 101, "qkv_bia": 101, "qnr": [318, 393], "qquad": [113, 122, 134, 386], "qr": 166, "quad": [51, 53, 60, 113, 191, 195, 303, 325, 331, 381, 385, 386], "quadrat": [88, 118, 121, 148, 154, 251, 273, 274, 275, 279, 330, 331, 334, 348, 350, 360, 386], "qualit": 384, "qualiti": [70, 73, 171, 303, 320, 363, 364, 381, 384], "quantif": [34, 85, 87, 119, 129, 140, 141, 143, 173, 179, 182, 183, 188, 191, 253, 255, 283, 289, 291, 324, 346, 347, 371, 373], "quantifi": 345, "quantiti": [55, 57, 183, 313], "quantiz": [183, 191], "queri": [19, 101], "question": [369, 370], "quick": [25, 303, 310, 319], "quickbird": 22, "quickli": [376, 384], "quickstart": 12, "quit": 300, "r": [34, 37, 42, 44, 46, 47, 51, 52, 53, 76, 83, 91, 93, 96, 102, 113, 123, 124, 138, 139, 140, 170, 173, 182, 196, 199, 256, 300, 310, 311, 313, 315, 335, 337, 341, 343, 344, 352, 355, 356, 363, 364, 374, 381, 382, 385, 386], "r2": 102, "r2d2": 300, "r2r": [12, 18, 27, 38, 44, 76, 85, 98, 106, 173, 175, 178, 179, 183, 188, 191, 193, 281, 283, 324, 357, 358, 373], "r2rloss": [353, 392], "r_": [199, 311, 341, 351], "rachford": [148, 151, 273, 274, 275, 365, 386], "radford": [81, 82], "radio": [113, 119, 129, 140, 141, 147, 148, 183, 191, 196, 280, 282, 284, 291, 292, 293, 301, 302, 324, 373, 380], "radiointerferometri": [300, 380], "radiu": [123, 124, 125, 195, 207, 216, 232, 246, 247, 312, 364], "radon": [207, 215, 316, 331, 378], "rai": [207, 216], "rais": [65, 70, 141], "ramp": [207, 215], "rand": [31, 43, 73, 104, 105, 171, 179, 181, 184, 192, 193, 208, 209, 232, 234, 267, 291, 294, 296, 313, 316, 376, 379, 396], "rand_lik": [177, 188], "randn": [126, 170, 173, 175, 177, 182, 183, 185, 187, 189, 197, 198, 200, 207, 210, 261, 268, 269, 270, 271, 275, 379, 383, 389], "randn_lik": [37, 188, 300, 314, 317, 341, 343, 344, 378], "random": [12, 16, 27, 28, 31, 32, 33, 40, 41, 43, 45, 47, 51, 52, 53, 83, 84, 85, 86, 87, 90, 91, 100, 101, 113, 119, 126, 129, 134, 135, 137, 140, 141, 148, 153, 160, 161, 170, 171, 172, 173, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 204, 205, 207, 208, 209, 229, 230, 231, 233, 235, 236, 237, 238, 239, 242, 243, 244, 245, 249, 251, 253, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 283, 284, 289, 291, 297, 300, 303, 306, 307, 308, 309, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 334, 335, 336, 337, 338, 344, 345, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 364, 365, 373, 379, 380, 381, 383, 392, 395, 396], "random_lat": 79, "random_phantom": 363, "random_split": [303, 349], "randomappli": 267, "randomcrop": [13, 14, 15, 17, 21, 24, 26, 320, 360, 364, 365], "randomeras": 321, "randomli": [12, 16, 27, 31, 40, 41, 45, 47, 90, 136, 229, 230, 235, 236, 237, 238, 242, 244, 256, 260, 262, 263, 265, 266, 267, 306, 310, 313, 319, 320, 344, 348, 354, 364, 391, 396], "randomlossschedul": 392, "randommaskgener": [177, 185, 187, 198, 236, 316, 379, 380], "randomphantomdataset": 363, "randomphaseretriev": [314, 380], "randon": [40, 41], "rang": [12, 15, 24, 37, 65, 70, 86, 99, 101, 122, 191, 199, 251, 252, 263, 267, 283, 300, 306, 312, 314, 315, 317, 319, 321, 322, 323, 324, 325, 327, 331, 343, 344, 348, 349, 350, 351, 361, 363, 364, 373, 386, 394, 396], "rangl": [114, 140], "rapidli": 334, "rare": [31, 229, 348], "rate": [12, 79, 84, 100, 101, 235, 303, 309], "rather": [143, 196, 312, 316, 343, 344, 387, 393], "ratio": [47, 72, 96, 101, 171, 189, 231, 234, 237, 252, 300, 311, 314, 316, 354], "raw": [13, 14, 15, 16, 17, 20, 21, 22, 24, 26, 186, 310, 348, 350], "raw_hf_train_dataset": 310, "rawfastmritrain": 319, "rcparam": 343, "re": [44, 60, 61, 62, 73, 84, 314, 316, 318], "re_init": 84, "reach": [113, 122, 166, 235, 307, 335, 337], "read": [300, 310, 385], "reader": [300, 394], "readi": [300, 303, 306, 313, 325, 344, 372], "readili": [300, 325, 343, 344], "readm": 16, "real": [15, 18, 19, 21, 30, 55, 56, 57, 97, 110, 177, 185, 186, 187, 196, 198, 219, 222, 300, 314, 316, 319, 383, 391], "real_fft": [218, 219, 221, 222], "real_imag": 110, "real_label": 56, "real_project": [196, 300], "realis": [47, 354], "realist": 390, "realiz": [12, 44, 47, 232, 233, 234, 300, 326, 327, 343], "reason": [19, 300, 325], "rec": [315, 360, 361, 362, 365, 381], "rec601": 172, "recal": [90, 273, 364, 389], "receiv": [201, 351], "reciproc": 267, "recognit": [118, 334], "recommend": [84, 99, 103, 147, 170, 183, 200, 309, 315, 316, 320, 343, 344, 349, 352, 353, 354, 355, 356, 364, 386, 394], "recomposit": 108, "recon": [16, 300, 326, 327, 335, 336, 338, 344, 361, 362], "recon_epl": 331, "recon_patchnr": 331, "reconstruct": [1, 2, 4, 5, 12, 16, 18, 24, 25, 27, 31, 32, 33, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 98, 101, 104, 105, 106, 107, 112, 113, 119, 121, 129, 134, 137, 140, 141, 148, 153, 160, 161, 170, 171, 173, 177, 179, 182, 183, 184, 185, 186, 187, 188, 190, 191, 195, 196, 197, 198, 205, 206, 207, 216, 229, 230, 231, 236, 241, 242, 244, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 279, 281, 283, 284, 286, 289, 291, 296, 300, 303, 319, 321, 322, 323, 324, 326, 327, 330, 335, 336, 337, 338, 341, 343, 345, 346, 347, 349, 354, 357, 358, 360, 361, 362, 363, 365, 373, 375, 378, 381, 382, 383, 387, 388, 389, 391, 392, 393, 395], "reconstructor": [43, 46, 47, 76, 79, 84, 85, 104, 113, 249, 250, 251, 279, 382, 384], "reconstrunct": 111, "record": 19, "recorrupt": 44, "recorrupted2recorrupt": [44, 353], "recov": [181, 261, 300, 314, 318, 321, 326, 327, 348, 374, 384], "recoveri": 318, "recreat": 173, "rectangular": 166, "red": [18, 27, 91, 113, 119, 129, 140, 141, 143, 148, 176, 179, 183, 188, 191, 256, 283, 286, 287, 311, 324, 336, 339, 340, 373, 374, 386], "redefin": [300, 326, 327, 363], "reduc": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 88, 96, 121, 147, 177, 186, 300, 309, 343, 344, 350, 351, 352, 353, 354, 355, 356, 362, 393], "reduced_alpha_cumprod": 343, "reduct": [12, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 101, 202, 362, 393], "redund": [19, 325], "refer": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 31, 33, 38, 40, 43, 47, 55, 57, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 160, 184, 204, 205, 303, 318, 331, 343, 375, 381, 390], "refin": 99, "reflect": [90, 168, 176, 189, 201, 217, 220, 228, 243, 261, 264, 266, 268, 269, 270, 271, 306, 321, 325, 349, 383, 396], "reformul": [361, 364], "refract": [232, 234, 313], "reg": [113, 126, 128, 141, 142, 143, 145, 146, 147, 162, 375, 385, 386, 387, 389], "reg_l2": 37, "region": [195, 300, 317, 343, 392], "regnam": [113, 128, 134, 137, 140, 141, 142, 146, 147, 149, 150, 151, 152, 153, 154, 156, 159, 327, 364, 385, 386], "regress": 181, "regular": [18, 27, 42, 87, 91, 102, 103, 113, 119, 122, 126, 128, 129, 134, 140, 141, 142, 143, 145, 146, 147, 148, 157, 161, 162, 166, 176, 179, 181, 183, 188, 191, 254, 255, 256, 272, 273, 274, 275, 283, 286, 287, 306, 307, 309, 312, 314, 324, 325, 326, 327, 331, 338, 339, 340, 345, 352, 360, 361, 362, 365, 371, 373, 375, 379, 385, 386, 389, 393], "regularis": [37, 107, 113, 122, 148, 273, 274, 275, 300, 326, 327, 343, 364], "regularizi": 331, "regval": 37, "reimplement": [60, 267], "reinstal": 372, "rel": [63, 161, 166, 167, 183, 191, 303, 325, 377, 393], "rel_crit": 325, "relat": [16, 313, 319, 335, 348, 361, 362], "relationship": 300, "relax": [91, 102, 103, 134, 149, 150, 151, 365, 386], "relaxation_step": 134, "releas": 321, "relev": [12, 113, 148, 273, 274, 275, 279, 344, 390], "reli": [141, 183, 196, 300, 303, 335, 383], "relu": [83, 87, 91, 193], "remain": [259, 315, 343], "remark": 344, "remot": [12, 22, 33, 38, 39, 48, 50, 51, 63, 75, 96, 171, 172, 176, 181, 183, 189, 191, 202, 203, 281, 291, 322, 323, 324, 373, 380], "remov": [12, 13, 14, 15, 19, 24, 26, 43, 44, 52, 76, 99, 105, 170, 177, 182, 206, 256, 257, 351, 374, 381, 383, 384], "remove_finish": 19, "render": 348, "renorm": [343, 344], "reparametr": 344, "repeat": [171, 206, 230, 235, 236, 244, 319, 325, 348, 363], "replac": [204, 205, 262, 263, 303, 360, 363, 365, 385, 389, 393], "replic": [168, 176, 189, 201, 217, 220, 228, 243, 306], "report": 348, "repositori": [42, 83, 86, 87, 91, 100, 101, 282, 284, 286, 287, 369, 371, 372, 376], "repres": [15, 20, 46, 88, 113, 121, 177, 181, 185, 186, 189, 194, 195, 198, 204, 236, 244, 246, 267, 278, 326, 327], "represent": [81, 82, 337], "reproduc": [19, 126, 170, 173, 175, 177, 182, 185, 187, 197, 200, 207, 249, 260, 306, 307, 308, 309, 313, 314, 316, 320, 325, 326, 327, 334, 335, 336, 337, 338, 345, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365], "request": 369, "requir": [12, 27, 32, 38, 73, 79, 108, 109, 113, 143, 150, 166, 187, 207, 215, 216, 249, 251, 253, 254, 255, 260, 267, 296, 303, 311, 315, 319, 321, 334, 335, 337, 338, 341, 342, 350, 364, 369, 377, 383, 384, 386, 387, 391, 392, 393, 394, 396], "requires_grad": [37, 49, 79, 172, 312], "requires_grad_": [37, 316, 331, 343, 344], "resampl": 264, "rescal": [12, 16, 86, 291, 294, 296, 300, 338, 343, 344, 391], "rescale_mod": [12, 29, 256, 291, 294, 296, 314, 372, 385, 386], "rese": 230, "research": [17, 368, 391], "reset": [12, 188, 230, 242, 253, 276, 395], "reset_metr": 12, "reset_rng": [188, 242], "reshap": [108, 300], "reshape_th": 108, "resi_connect": 101, "residu": [77, 101, 106, 113, 253, 343, 344], "resiz": [288, 289, 303, 310, 314, 317, 319, 321, 335, 338, 348, 349, 350], "resize_mod": [288, 289, 314, 335, 338], "resnet": 96, "resolut": [12, 14, 18, 21, 24, 26, 27, 33, 38, 40, 50, 85, 87, 89, 91, 96, 99, 100, 113, 119, 129, 137, 140, 141, 142, 148, 176, 179, 183, 188, 189, 191, 256, 264, 273, 275, 283, 286, 287, 291, 295, 300, 318, 324, 339, 340, 349, 366, 367, 373, 380, 381, 390, 391], "resolv": [17, 26, 43, 232, 233, 234, 241, 303, 312, 313, 314, 318, 319, 325, 330, 331, 335, 337, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 372, 385], "reson": [43, 177, 185, 198, 241, 319, 380], "resp": 365, "respect": [25, 90, 120, 134, 233, 234, 258, 267, 306, 313, 321, 356, 363, 383, 388, 389], "respiratori": [43, 241], "respons": [172, 189, 199, 201, 306, 311, 318], "rest": [22, 118, 229, 318], "restart": 103, "restor": [13, 21, 83, 99, 101, 118, 121, 249, 251, 300, 307, 318, 330, 331, 334, 336, 337, 360, 361, 362, 365, 371, 374, 383, 387, 390, 391], "restorm": [383, 390], "restrict": [207, 250, 316], "result": [12, 47, 181, 183, 187, 188, 191, 202, 203, 248, 251, 252, 254, 255, 267, 296, 303, 314, 316, 317, 318, 319, 321, 331, 343, 344, 348, 349, 354, 379, 389], "results_dir": [307, 312, 314, 325, 326, 327, 334, 335, 336, 337, 338, 360, 361, 362, 363, 365], "retain": [47, 183, 383], "retrain": 331, "retriev": [20, 83, 85, 111, 113, 119, 125, 129, 134, 137, 140, 141, 148, 153, 157, 160, 161, 190, 191, 194, 195, 197, 205, 246, 247, 261, 283, 284, 289, 291, 322, 323, 324, 344, 373, 380, 383, 386], "retrun": 167, "return": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 85, 86, 90, 93, 95, 96, 98, 100, 102, 103, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 136, 137, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 173, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 203, 205, 206, 207, 208, 209, 210, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 250, 253, 256, 257, 258, 259, 267, 272, 273, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 298, 299, 300, 303, 306, 307, 308, 312, 313, 314, 315, 319, 321, 326, 327, 331, 335, 336, 337, 338, 341, 342, 343, 344, 345, 351, 362, 363, 364, 383, 386, 395], "return_anim": 296, "return_ax": 291, "return_fig": [291, 293, 294], "return_pan": [22, 318], "rev": 135, "revers": [343, 344, 378], "review": [189, 199], "revisit": 343, "rewrit": 395, "reynold": [267, 396], "rgb": [88, 121, 172, 180, 181, 189, 306, 315, 316, 318, 383, 391], "rho": [103, 343, 344], "rho_t": [251, 343], "right": [44, 51, 52, 53, 58, 59, 60, 61, 62, 114, 119, 123, 124, 140, 143, 144, 163, 170, 171, 183, 191, 194, 195, 197, 213, 239, 251, 255, 272, 293, 303, 313, 336, 341, 343, 345, 351, 355, 356, 361, 377, 381, 386, 387, 389, 393], "right_precon": 163, "rightarrow": 267, "rigid": 396, "risk": 318, "rm": [313, 344], "rmtree": [13, 14, 15, 16, 24, 26], "rng": [16, 40, 41, 51, 52, 53, 170, 171, 179, 182, 184, 188, 192, 193, 197, 199, 200, 204, 208, 209, 229, 230, 231, 233, 235, 236, 237, 238, 239, 241, 242, 244, 245, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 319], "rng_manual_se": [188, 242], "robust": [99, 106, 207, 306, 321], "role": 345, "roll": [183, 210, 266], "roll_reflect_1d": 266, "root": [13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 186, 187, 286, 287, 303, 319, 349, 351, 352, 353, 354, 355, 356, 361, 362, 369, 391], "root_dir": [22, 25], "rotat": [33, 90, 207, 213, 216, 261, 267, 268, 269, 270, 271, 321, 349, 350, 351, 383, 392, 396], "roto": 321, "rotoreflect": 321, "rotoshift": [267, 396], "roughli": [331, 392], "round": 200, "routin": [386, 389], "row": [111, 236, 291, 294], "rss": [16, 25, 186, 187, 319], "rtol": 161, "rule": [113, 119, 144, 344], "run": [12, 78, 79, 83, 84, 87, 99, 101, 106, 108, 109, 113, 118, 148, 161, 249, 250, 251, 252, 253, 255, 273, 274, 275, 300, 303, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 330, 334, 335, 336, 337, 338, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 369], "rung": [254, 387], "runner": [300, 303, 311, 312, 314, 316, 318, 319, 330, 331, 334, 335, 337, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355], "runtim": [168, 309], "rvert": [60, 303, 381], "rx": 207, "s_": 341, "s_i": 40, "s_n": 187, "s_sequential_indic": 313, "s_t": 198, "safer": 12, "saito": 117, "sake": 319, "sam": [75, 318], "same": [12, 15, 16, 19, 20, 27, 47, 67, 68, 86, 93, 99, 102, 103, 108, 113, 119, 123, 124, 125, 127, 131, 132, 144, 145, 148, 168, 170, 176, 188, 189, 197, 201, 205, 215, 217, 218, 219, 220, 221, 222, 226, 227, 228, 234, 259, 260, 267, 273, 274, 275, 280, 290, 291, 293, 294, 296, 297, 298, 299, 303, 306, 311, 312, 319, 321, 341, 350, 351, 352, 355, 363, 364, 379, 386, 390, 395], "sampl": [0, 12, 15, 16, 18, 20, 25, 27, 28, 31, 33, 40, 41, 43, 44, 46, 47, 79, 82, 85, 90, 93, 100, 107, 119, 129, 139, 140, 141, 143, 169, 170, 173, 177, 179, 181, 182, 183, 185, 187, 188, 191, 196, 197, 198, 205, 207, 225, 230, 232, 233, 234, 235, 236, 237, 238, 239, 242, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 264, 283, 289, 291, 303, 306, 310, 313, 315, 316, 317, 318, 319, 321, 337, 344, 347, 348, 349, 351, 361, 362, 373, 374, 379, 380, 383, 384, 387, 391, 395], "sample_index": 25, "sample_mask": [230, 235, 244], "sampler": [96, 252, 253, 254, 255, 344, 348, 387], "samples_loc": [196, 300], "samuel": 371, "saniti": 267, "sar": 178, "sara": 300, "satellit": [12, 22, 33, 38, 39, 48, 50, 51, 63, 75, 96, 171, 172, 176, 181, 183, 189, 191, 202, 203, 281, 291, 322, 323, 324, 373, 391], "satisfi": [150, 152, 156, 157], "satur": [183, 191], "saunder": 167, "save": [12, 13, 14, 15, 16, 17, 20, 21, 24, 25, 26, 27, 31, 43, 44, 46, 47, 85, 101, 108, 119, 123, 137, 140, 141, 170, 173, 182, 183, 190, 191, 197, 200, 252, 256, 259, 273, 275, 283, 291, 292, 293, 294, 295, 296, 303, 307, 308, 310, 319, 320, 322, 323, 324, 326, 327, 334, 336, 337, 338, 343, 348, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 365, 373, 391, 395], "save_chain": [252, 253, 254, 255], "save_dir": [27, 291, 292, 294, 295, 303, 307, 308, 314, 319, 320, 334, 335, 336, 337, 338, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 364, 365, 391], "save_fn": [291, 293, 296], "save_fold": [256, 307, 334, 337, 363], "save_iter": 250, "save_metadata_to_cach": 16, "save_model": [12, 259], "save_path": [12, 170, 182, 190, 197, 200, 303, 319, 320, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "save_physics_generator_param": [27, 319], "save_simple_dataset": [16, 25], "save_step": 343, "sbr": 311, "scalar": [12, 54, 166, 180, 225, 259, 313, 385, 386], "scale": [21, 22, 44, 80, 86, 99, 101, 104, 105, 106, 123, 171, 178, 237, 239, 259, 261, 267, 271, 300, 303, 307, 308, 314, 318, 319, 320, 321, 326, 327, 334, 335, 336, 337, 338, 349, 351, 352, 353, 354, 355, 356, 360, 363, 364, 365, 378, 391, 396], "scale_factor": 96, "scale_out": 80, "scan": [12, 16, 20, 38, 50, 94, 95, 119, 134, 140, 141, 150, 158, 159, 179, 183, 188, 191, 207, 216, 232, 273, 275, 283, 324, 366, 367, 373, 378, 391], "scan_fold": 20, "scanvic": 349, "scatter": [300, 306], "scatter_plot": 300, "scene": [22, 26, 180, 181, 199, 311, 349, 391], "schedul": [12, 32, 35, 36, 45, 49, 251, 303, 320, 342, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365], "scheme": [300, 350, 351], "schlemper": 236, "school": 368, "sci": [102, 163], "scienc": [150, 368], "scipi": 167, "score": [46, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 143, 314, 341, 344, 345], "scoreloss": 392, "scoremodel": 46, "scoreprior": [253, 254, 255, 341, 345, 386, 387], "scratch": [303, 318, 348, 350, 351, 352, 355, 395], "screen": [19, 20], "script": [300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "scunet": [383, 390], "sd": [171, 318], "sde": 384, "seamlessli": [278, 306, 356, 394, 396], "search": [310, 330, 331], "second": [52, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 86, 88, 113, 121, 134, 177, 182, 183, 185, 189, 198, 199, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 379, 386], "second_deriv": 52, "secondli": 343, "section": [6, 343], "see": [12, 16, 31, 33, 40, 41, 42, 43, 44, 46, 47, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 97, 100, 101, 102, 103, 109, 113, 118, 121, 122, 148, 149, 163, 164, 170, 171, 174, 177, 178, 181, 182, 183, 185, 186, 187, 189, 191, 198, 199, 200, 202, 203, 207, 234, 235, 236, 239, 243, 244, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 291, 294, 296, 300, 309, 311, 313, 316, 318, 321, 335, 341, 344, 345, 348, 349, 350, 354, 355, 356, 361, 362, 364, 375, 377, 379, 381, 383, 385, 386, 389, 391, 392, 393, 395, 396], "seealso": 348, "seed": [126, 170, 173, 175, 177, 179, 182, 184, 185, 187, 188, 192, 193, 197, 200, 207, 208, 209, 230, 231, 233, 238, 239, 242, 243, 245, 249, 250, 251, 253, 260, 306, 307, 308, 309, 310, 313, 314, 316, 320, 325, 326, 327, 334, 335, 336, 337, 338, 345, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365], "seek": [318, 325], "segment": [13, 391], "select": [14, 16, 18, 19, 21, 31, 32, 35, 36, 40, 41, 45, 49, 113, 136, 229, 235, 236, 238, 242, 244, 262, 263, 267, 283, 300, 307, 312, 326, 327, 334, 335, 336, 337, 338, 353, 360, 361, 362, 364, 365, 396], "self": [12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 26, 27, 31, 33, 38, 39, 41, 42, 43, 44, 47, 51, 52, 53, 76, 85, 98, 106, 124, 141, 170, 173, 175, 177, 178, 179, 182, 183, 185, 186, 188, 190, 191, 193, 197, 198, 200, 206, 207, 230, 231, 236, 237, 242, 244, 249, 253, 263, 264, 267, 273, 279, 281, 283, 287, 291, 296, 300, 307, 310, 311, 315, 318, 319, 321, 331, 335, 337, 341, 349, 358, 363, 371, 373, 374, 379, 381, 384, 395, 396], "selfexsr": 24, "semigroup": 261, "send": 369, "sens": [12, 18, 22, 27, 33, 38, 39, 40, 41, 48, 50, 51, 58, 59, 63, 75, 79, 96, 119, 129, 140, 141, 147, 156, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 181, 182, 183, 185, 186, 188, 189, 191, 192, 193, 200, 202, 203, 207, 213, 230, 235, 236, 242, 244, 273, 275, 281, 283, 284, 289, 291, 295, 300, 303, 322, 323, 324, 344, 362, 366, 367, 368, 373, 380, 391], "sensit": [51, 52, 53, 107, 187, 313, 319], "sensitivity_model": [107, 319], "sensitv": 187, "sensor": [33, 40, 41, 170, 181, 183, 190, 191, 203, 207], "sensor_model": [183, 191], "separ": [22, 110, 181, 285, 330], "seq": [343, 344], "seq_next": 344, "sequenc": [31, 43, 86, 196, 198, 200, 250, 251, 296, 300, 319, 325, 343, 348, 376], "sequenti": [31, 35, 36, 43, 78, 198, 233, 310, 348, 392], "sequentialmri": [31, 43, 348, 380], "seri": [87, 348], "series_uid": 20, "serv": [19, 108, 382, 386], "server": [310, 369, 370], "set": [6, 12, 16, 18, 19, 22, 25, 26, 27, 31, 33, 34, 37, 38, 39, 40, 41, 42, 43, 47, 50, 55, 57, 69, 72, 74, 83, 84, 86, 87, 90, 91, 99, 100, 101, 108, 124, 129, 135, 143, 147, 149, 150, 151, 162, 171, 177, 179, 181, 182, 183, 184, 185, 187, 188, 191, 192, 193, 196, 198, 203, 208, 209, 238, 242, 243, 253, 255, 256, 258, 261, 262, 263, 267, 281, 300, 306, 308, 309, 312, 313, 314, 316, 318, 319, 325, 330, 336, 337, 341, 342, 345, 348, 349, 354, 360, 361, 362, 363, 365, 379, 380, 384, 385, 387, 393, 394], "set14": 24, "set14_sr": 24, "set14hr": 391, "set3": 308, "set3c": [307, 308, 320, 326, 327, 334, 335, 337, 360, 364, 365], "set_cov": 162, "set_cov_reg": 162, "set_descript": 331, "set_ls_solv": 191, "set_noise_model": [191, 203, 380], "set_to_non": 258, "set_weight": 162, "setup": [12, 259], "setup_train": [12, 259], "setweight": 300, "sever": [207, 216, 310, 318, 325], "shake": 19, "shannon": [233, 234, 306, 313], "shape": [16, 19, 20, 23, 25, 28, 29, 30, 31, 43, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 83, 88, 89, 92, 94, 95, 96, 99, 101, 102, 103, 104, 105, 108, 112, 121, 124, 145, 162, 163, 164, 166, 167, 170, 171, 177, 178, 181, 182, 185, 186, 187, 189, 194, 195, 197, 198, 200, 204, 205, 206, 218, 219, 221, 222, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 243, 244, 246, 263, 267, 278, 291, 294, 296, 300, 306, 307, 309, 314, 316, 317, 318, 319, 325, 327, 330, 331, 342, 343, 344, 345, 348, 361, 362, 379, 383, 386, 391, 396], "shard": 21, "share": [348, 362], "shared_weight": 205, "sharp": [19, 391], "sharp_fram": 19, "sharpen": [22, 63, 96, 189, 388, 393], "shear": [171, 235, 349, 396], "shear_dir": 171, "shelf": [384, 385, 388], "shepp": 314, "sheppard": 313, "shepplogan": [314, 338], "shepplogandataset": 363, "shift": [86, 160, 183, 194, 195, 210, 247, 261, 266, 267, 268, 269, 271, 314, 317, 321, 349, 396], "shift_max": [261, 265, 268, 269, 270, 271, 321], "shifttim": 396, "short": [319, 320, 364], "shot": [19, 391], "should": [12, 13, 17, 22, 24, 26, 27, 31, 43, 44, 46, 47, 51, 52, 53, 56, 69, 84, 99, 101, 108, 141, 148, 150, 152, 155, 156, 157, 169, 170, 172, 173, 177, 180, 183, 184, 185, 186, 187, 188, 196, 200, 207, 210, 216, 229, 231, 232, 233, 234, 239, 241, 242, 249, 251, 253, 255, 256, 257, 267, 273, 274, 275, 291, 294, 296, 300, 309, 310, 311, 313, 314, 335, 338, 350, 360, 386, 395], "show": [12, 19, 27, 113, 122, 201, 206, 256, 291, 292, 293, 294, 295, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 320, 325, 326, 327, 334, 335, 336, 338, 341, 342, 343, 345, 348, 349, 350, 351, 352, 353, 355, 356, 360, 361, 362, 365, 379], "show_progress_bar": [12, 27, 122, 256, 303, 318, 319, 320, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "showcas": 314, "shown": [117, 293, 300, 311, 336, 381, 385], "shrinkag": 386, "shuffl": [12, 16, 20, 83, 91, 303, 307, 308, 319, 320, 331, 334, 337, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 364, 365, 391, 395], "shutil": [13, 14, 15, 16, 24, 26], "siam": [87, 102, 163], "side": [66, 291, 296], "sigma": [44, 46, 51, 52, 77, 78, 83, 85, 86, 87, 88, 90, 93, 99, 100, 101, 106, 118, 121, 129, 130, 137, 142, 143, 150, 154, 175, 179, 189, 191, 192, 199, 208, 213, 239, 242, 245, 249, 250, 251, 254, 255, 273, 306, 307, 309, 311, 312, 315, 316, 321, 325, 326, 327, 330, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 353, 356, 360, 363, 364, 365, 372, 375, 379, 380, 383, 385, 386, 387, 391, 393], "sigma2": 356, "sigma2_nois": 341, "sigma_": [171, 208, 393], "sigma_cur": [343, 344], "sigma_d": 341, "sigma_denois": [137, 142, 143, 312, 334, 336, 337, 345, 360, 364, 365], "sigma_dict": 245, "sigma_i": [213, 344], "sigma_init": 356, "sigma_k": 343, "sigma_max": [208, 245], "sigma_min": [208, 245], "sigma_n": 251, "sigma_nois": 343, "sigma_sq": [88, 121], "sigma_t": [343, 344], "sigma_tild": 344, "sigma_x": [213, 393], "sigmagener": [242, 379, 391], "sigmat": 344, "sigmoid": 97, "sign": [16, 25, 127, 128, 170, 319, 348, 350], "signal": [12, 18, 27, 33, 39, 40, 41, 50, 72, 76, 98, 104, 123, 139, 143, 147, 161, 170, 173, 181, 183, 190, 191, 197, 199, 203, 204, 205, 207, 223, 237, 257, 306, 308, 313, 315, 316, 317, 348, 372, 374, 375, 381, 384, 385, 386, 392], "signific": [341, 369], "significantli": 363, "sigpi": 187, "sim": [33, 40, 44, 51, 52, 53, 58, 59, 60, 61, 62, 90, 170, 179, 192, 197, 208, 209, 239, 255, 303, 330, 331, 344, 345, 356, 380, 381], "simeq": 344, "similar": [47, 65, 74, 75, 161, 170, 182, 190, 197, 200, 225, 261, 267, 278, 314, 321, 349, 378, 393, 396], "similarli": [312, 364, 391], "simlarli": 300, "simpl": [16, 25, 59, 60, 62, 77, 79, 96, 177, 185, 198, 300, 303, 307, 308, 310, 312, 315, 316, 317, 319, 320, 321, 335, 336, 341, 342, 345, 351, 352, 353, 354, 355, 356, 363, 365, 377, 381, 395], "simple_set": 16, "simplefastmrislicedataset": [16, 319, 348, 350, 391], "simpler": 343, "simplest": 382, "simpli": [50, 107, 189, 206, 210, 272, 291, 303, 319, 331, 343, 344, 348, 362, 383, 394], "simplic": [300, 303, 343, 360, 365], "simul": [12, 181, 187, 198, 270, 313, 317, 319, 321, 348, 374, 378, 395, 396], "simulate_birdcage_csm": 187, "simultan": [47, 182, 231, 237], "sin": [213, 313], "sinc": [25, 44, 76, 108, 122, 123, 125, 160, 168, 170, 176, 200, 214, 303, 309, 318, 319, 341, 344, 345, 372, 394], "sinc_filt": 380, "sine": [170, 223], "singl": [16, 19, 27, 40, 41, 42, 99, 107, 108, 113, 134, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 168, 169, 171, 177, 183, 185, 191, 198, 199, 200, 202, 203, 233, 273, 274, 275, 276, 278, 283, 291, 293, 294, 300, 306, 312, 318, 319, 322, 323, 324, 325, 335, 342, 343, 348, 349, 350, 352, 361, 362, 363, 364, 365, 373, 379, 380, 385, 386, 387, 392, 393], "single_pixel": 335, "singlecoil": [16, 25, 107, 319], "singlephotonlidar": [311, 380], "singlepixelcamera": [316, 335, 380], "singular": [169, 173, 177, 185, 198, 200, 249, 315, 341, 342, 377, 379], "sinogram": 316, "site": [21, 319, 321, 348, 350], "situat": [306, 325], "size": [12, 14, 15, 16, 23, 24, 27, 31, 38, 43, 47, 51, 52, 53, 54, 55, 57, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 82, 84, 86, 88, 92, 93, 96, 97, 101, 105, 112, 113, 114, 120, 121, 122, 123, 124, 125, 127, 130, 132, 135, 136, 139, 147, 150, 154, 162, 165, 166, 168, 169, 170, 171, 173, 174, 176, 177, 181, 182, 183, 184, 185, 187, 189, 191, 195, 196, 198, 199, 200, 201, 206, 207, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 243, 244, 245, 247, 254, 255, 267, 272, 288, 289, 291, 293, 294, 296, 300, 306, 309, 311, 313, 314, 316, 317, 318, 319, 320, 321, 325, 331, 334, 337, 341, 343, 344, 345, 348, 350, 354, 356, 361, 362, 363, 364, 375, 378, 379, 383, 386, 389, 391, 393, 396], "skew": [261, 268], "skew_max": [261, 268, 269, 270, 271], "skip": [106, 344, 348], "skrock": 387, "slice": [16, 20, 25, 185, 187, 319, 383, 391], "slice_fnam": 20, "slice_ind": 16, "slice_index": [16, 319], "slicesamplefileidentifi": 16, "slicesampleidentifi": 20, "slide": 93, "slow": [84, 168, 176, 303, 387], "slower": 306, "sm": 386, "small": [47, 52, 53, 88, 102, 107, 112, 121, 147, 164, 207, 216, 309, 319, 325, 331, 349, 354, 355, 356, 360, 365, 386, 391, 392], "smaller": [47, 86, 140, 162, 168, 176, 178, 189, 201, 217, 220, 228, 254, 255, 300, 307, 326, 327, 337, 386], "smi": 283, "smolyakov": [102, 103], "smooth": [138, 139, 362, 392, 396], "smoothli": 163, "smx": 171, "snapshot": [171, 318], "snippet": 300, "snu": 17, "so": [12, 19, 177, 185, 198, 229, 235, 236, 270, 300, 306, 314, 315, 318, 343, 344, 356, 365, 395], "soft": [12, 13, 18, 27, 38, 50, 108, 109, 119, 127, 129, 140, 141, 147, 152, 156, 167, 170, 183, 191, 273, 275, 281, 283, 291, 295, 312, 324, 325, 362, 364, 366, 367, 373], "softplu": [83, 91], "softwar": [102, 103, 368], "solut": [12, 103, 108, 109, 113, 122, 134, 163, 170, 183, 189, 191, 207, 272, 300, 314, 315, 325, 326, 327, 386, 389], "solv": [84, 102, 103, 113, 122, 150, 163, 164, 166, 167, 303, 314, 319, 321, 336, 337, 343, 344, 348, 360, 364, 371, 381, 384, 385, 386, 389], "solver": [145, 166, 170, 183, 191, 207], "some": [16, 32, 38, 99, 136, 170, 183, 191, 207, 300, 306, 309, 313, 315, 316, 321, 326, 327, 341, 344, 376, 379, 380, 383, 384, 385, 386, 388, 389, 391, 393, 394, 396], "sometim": 389, "somewhat": 309, "soon": 369, "sor": 170, "sort": 379, "sota": 387, "sourc": [12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 368, 369], "source_radiu": [207, 216], "sourcetensor": [316, 343, 344], "space": [16, 31, 43, 77, 88, 107, 121, 136, 196, 198, 201, 206, 207, 216, 230, 235, 236, 243, 244, 300, 303, 316, 319, 321, 331, 348, 349, 350, 363, 386], "spacevaryingblur": [243, 306, 380], "spacial": 300, "spars": [78, 167, 181, 196, 215, 216, 225, 300, 316], "sparsiti": [300, 325, 327, 383], "spatial": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 171, 201, 237, 300, 306, 378, 393], "special": [31, 43, 268, 269, 270, 271, 348, 396], "specif": [9, 16, 19, 44, 55, 57, 113, 118, 119, 122, 144, 171, 195, 306, 307, 315, 319, 334, 337, 338, 374, 379, 380, 382, 384, 389, 396], "specifi": [14, 21, 25, 28, 49, 55, 57, 58, 59, 60, 61, 62, 87, 141, 155, 166, 174, 177, 185, 187, 198, 230, 231, 235, 244, 246, 259, 281, 296, 300, 306, 307, 313, 316, 326, 327, 334, 335, 337, 338, 353, 364, 365, 379, 392, 396], "speckl": 178, "spectra": 181, "spectral": [34, 37, 73, 75, 157, 161, 171, 172, 183, 189, 190, 318, 386, 392, 393], "spectral_method": [190, 314], "spectralanglemapp": [318, 393], "spectralanglemapper_std": 318, "spectrum": 181, "speed": [16, 27, 52, 103, 183, 303, 315, 318, 319, 348, 350, 363, 384], "sphinx": [300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "sphinx_gallery_multi_imag": [300, 343], "sphinx_gallery_thumbnail_numb": 343, "split": [12, 14, 16, 18, 21, 25, 27, 31, 38, 39, 42, 43, 47, 76, 85, 88, 98, 102, 103, 106, 118, 121, 123, 134, 148, 150, 151, 154, 179, 183, 188, 191, 207, 229, 231, 237, 241, 251, 273, 274, 275, 279, 281, 283, 310, 319, 324, 330, 331, 334, 348, 350, 357, 358, 360, 364, 365, 373, 386, 392], "split_ratio": [47, 182, 231, 237, 348, 354], "split_siz": [31, 229, 348], "splitter": 348, "splittingloss": [31, 43, 231, 237, 348, 354, 392], "splittingmodel": [43, 47], "spoke": [31, 43, 198], "spread": [232, 240], "sqrt": [72, 86, 102, 103, 111, 112, 170, 186, 200, 214, 239, 250, 251, 255, 300, 341, 342, 343, 344, 345, 356, 362, 386], "sqrt_1m_alphas_cumprod": 343, "sqrt_alphas_cumprod": 343, "sqrt_recip_alphas_cumprod": 343, "squar": [12, 16, 25, 31, 39, 41, 42, 43, 47, 50, 51, 52, 53, 56, 68, 71, 82, 96, 115, 160, 163, 164, 166, 167, 170, 183, 186, 187, 191, 207, 232, 233, 234, 237, 247, 257, 307, 319, 320, 343, 364, 381, 386], "sr": [21, 101], "src": [311, 321], "srf": [172, 189, 318], "sriram": 107, "ss": [12, 171], "ssdu": [47, 237, 354], "ssim": [35, 36, 45, 49, 348, 393], "ssim_std": 348, "stabil": [163, 164, 166, 345], "stabilis": 254, "stabl": [51, 74, 291, 294, 296, 372], "stack": [16, 48, 144, 183, 191, 202, 203, 267, 318, 319, 348, 379, 396], "stackedlinearphys": [48, 144, 189], "stackedphys": [48, 144, 183, 191, 202, 379], "stackedphysicsdatafidel": 379, "stackedphysicsloss": [318, 379], "stage": [99, 100], "stand": 140, "standalon": 383, "standard": [12, 19, 50, 51, 52, 60, 73, 86, 88, 99, 113, 118, 121, 129, 164, 165, 175, 179, 180, 189, 192, 199, 208, 213, 231, 239, 254, 255, 256, 273, 274, 275, 276, 298, 303, 307, 311, 312, 314, 316, 318, 325, 326, 327, 330, 331, 334, 335, 338, 342, 343, 344, 345, 364, 375, 381, 383, 385, 386, 387, 389, 391, 393], "standart": [148, 274, 275, 337, 338], "star": [201, 228, 272, 389], "start": [134, 158, 159, 300, 315, 350, 351, 352, 353, 355], "stat": 163, "state": [12, 13, 188, 242, 300, 319, 371], "state_dict": [12, 258, 303, 312, 318, 319, 348, 349, 350, 351, 352, 353, 354, 355, 364], "state_dict_d": 303, "static": [31, 43, 47, 102, 103, 104, 105, 108, 177, 186, 205, 206, 316, 344, 348], "statist": [44, 181, 253, 254, 255, 378, 387, 393], "std": [12, 342, 345, 376], "std_scale": 237, "stein": 318, "stem": 311, "step": [12, 31, 43, 44, 46, 47, 51, 52, 91, 106, 113, 114, 122, 123, 124, 125, 134, 139, 148, 150, 154, 155, 158, 159, 165, 177, 182, 198, 201, 207, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 251, 254, 255, 272, 273, 274, 275, 300, 306, 313, 316, 319, 325, 326, 327, 331, 334, 335, 337, 338, 341, 345, 348, 353, 356, 363, 379, 386, 389, 390, 395], "step_ratio_d": 259, "step_siz": [51, 52, 165, 253, 254, 255, 303, 320, 341, 345, 350, 351, 352, 353, 355, 356, 360, 364, 365], "steplossschedul": 392, "steplr": [303, 320, 350, 351, 352, 353, 355, 360, 363, 364, 365], "stepsiz": [103, 113, 122, 123, 125, 126, 127, 128, 129, 140, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 273, 274, 275, 300, 307, 312, 314, 326, 327, 334, 335, 336, 337, 338, 360, 361, 362, 364, 365, 372, 385, 386, 389], "stepsize_du": [364, 386], "stepsize_int": 140, "stepz_pixel": [234, 313], "still": [267, 379], "stochast": [100, 101, 183, 191, 250, 254, 356, 375, 387], "stop": [79, 84, 113, 118, 122, 161, 162, 163, 164, 165, 166, 167, 191, 307, 309, 334, 335, 337, 385], "stopping_criterion": 162, "storag": [312, 318, 319, 348, 350, 351, 352, 353, 354, 355], "store": [18, 20, 27, 113, 122, 134, 168, 169, 170, 173, 176, 177, 197, 198, 200, 201, 229, 231, 237, 241, 245, 253, 267, 276, 281, 310, 376, 379, 386], "str": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 31, 43, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 83, 86, 87, 88, 91, 92, 96, 99, 100, 101, 106, 107, 108, 109, 110, 113, 118, 121, 135, 147, 148, 162, 166, 168, 169, 170, 171, 172, 174, 176, 181, 183, 186, 187, 189, 191, 194, 195, 197, 199, 200, 201, 202, 204, 205, 207, 210, 215, 216, 217, 219, 220, 222, 228, 229, 231, 232, 233, 234, 237, 241, 242, 243, 245, 246, 250, 251, 256, 260, 261, 264, 266, 268, 269, 270, 271, 273, 274, 275, 276, 279, 282, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 320, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365], "strategi": [44, 113, 230, 235, 244, 316], "strength": [157, 161, 184, 341, 345], "stretch": [261, 268], "strictli": 152, "stride": [23, 83, 91], "strideconv": [83, 91], "strike": 381, "string": [148, 205, 273, 274, 275, 285, 376], "strong_convex": 92, "strongli": 92, "structur": [13, 14, 15, 16, 17, 20, 21, 22, 24, 26, 73, 74, 83, 177, 185, 198, 204, 205, 315, 378, 379, 391], "structural_similar": 74, "structural_similarity_index_measur": 69, "structuredrandom": [170, 380], "structuredrandomphaseretriev": 380, "study_uid": 20, "style": [29, 30, 31, 369, 391], "sub": [32, 35, 36, 45, 49, 147, 343, 361], "sub_net_s": [135, 331], "subband": 108, "subclass": [335, 363, 381], "subfold": 15, "subgroup": [261, 268, 269, 270, 271, 396], "subject": [19, 325], "submit": 369, "subnetwork": [135, 331], "suboptim": 343, "subpackag": [1, 391], "subplot": [311, 343], "subsampl": [16, 47, 170, 176, 177, 185, 186, 187, 198, 200, 231, 237, 316], "subsample_volum": 16, "subselect": [32, 262], "subsequ": 16, "subset": [16, 22, 25, 47, 182, 231, 238, 319, 348, 350, 352, 353, 354, 355, 356, 391], "subsubfold": 15, "success": 381, "successfulli": [13, 14, 16, 24, 26, 303, 318, 349], "suffic": [306, 313], "suffici": [113, 344, 351], "suggest": [99, 123, 331, 343, 344, 370], "suit": [80, 386], "suitabl": [378, 393], "sum": [16, 25, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 107, 134, 136, 147, 172, 177, 186, 187, 200, 202, 206, 242, 267, 278, 317, 319, 331, 342, 344, 345, 348, 362, 376, 378, 379, 386, 393, 396], "sum_": [44, 47, 90, 111, 112, 186, 201, 202, 228, 267, 325, 331, 351, 361, 386, 393], "sum_i": [48, 88, 117, 121, 126, 133, 136, 139, 144, 300, 321, 386], "summar": [375, 390], "summari": [374, 384], "summat": 162, "summer": 368, "sup": [35, 36, 45, 303], "sup_": 140, "supadversarialdiscriminatorloss": [55, 259, 303, 392], "supadversarialgeneratorloss": [57, 259, 303, 392], "super": [12, 14, 18, 21, 26, 27, 33, 38, 40, 50, 85, 87, 89, 91, 113, 119, 129, 137, 140, 141, 142, 148, 176, 179, 183, 188, 191, 232, 233, 234, 253, 256, 264, 273, 275, 283, 286, 287, 291, 295, 300, 307, 315, 318, 319, 324, 335, 339, 340, 341, 349, 363, 366, 367, 373, 380, 381, 391], "supervis": [12, 16, 18, 25, 27, 31, 33, 38, 39, 41, 42, 43, 44, 47, 50, 51, 52, 53, 58, 59, 76, 85, 98, 106, 173, 175, 177, 178, 179, 182, 183, 185, 186, 188, 191, 193, 198, 206, 207, 230, 231, 236, 237, 242, 244, 257, 263, 264, 267, 273, 279, 281, 283, 287, 291, 296, 303, 318, 319, 320, 321, 349, 358, 360, 361, 362, 363, 364, 365, 371, 373, 374, 379, 381, 384, 396], "suploss": [35, 36, 45, 257, 303, 318, 319, 320, 360, 361, 362, 363, 364, 365, 392, 393], "support": [18, 27, 46, 71, 78, 135, 147, 178, 188, 217, 218, 220, 221, 226, 227, 235, 236, 244, 259, 325, 374, 380, 391], "suppos": [321, 395], "suptitl": [291, 294, 306, 313, 325, 343, 360, 361, 362, 365], "sure": [12, 18, 27, 38, 51, 52, 53, 76, 85, 98, 106, 173, 175, 183, 188, 191, 193, 281, 283, 324, 345, 356, 357, 358, 369, 373], "suregaussianloss": [48, 318, 355, 356, 392], "surepgloss": [355, 356, 392], "surepoissonloss": [48, 355, 392], "surfix": 277, "surpris": 309, "survei": 181, "svd": [169, 172, 173, 182, 185, 200, 315, 387], "swin": [100, 101], "swinir": [383, 390], "switch": 267, "swz30": 390, "symmetr": [90, 267, 321, 383, 396], "symmetris": 267, "symposium": 368, "synchron": [12, 307, 308, 320, 334, 335, 337, 338, 350, 351, 352, 353, 355, 356, 360, 361, 362, 364, 365], "synthes": [19, 232, 233, 234, 306], "synthesi": [63, 100, 393], "synthet": 390, "system": [122, 163, 164, 166, 167, 285, 375, 379, 386], "t": [13, 21, 31, 43, 65, 70, 73, 86, 93, 102, 103, 104, 105, 122, 138, 139, 143, 157, 161, 177, 180, 183, 198, 199, 206, 210, 229, 230, 235, 236, 237, 239, 241, 244, 250, 251, 256, 267, 283, 293, 296, 303, 308, 311, 316, 319, 321, 331, 338, 343, 344, 348, 349, 361, 362, 380, 381, 383, 384, 386, 392, 396], "t1": [325, 376], "t2": 376, "t3": 376, "t_": 267, "t_g": [33, 40, 90, 267], "t_hist": 122, "t_i": [321, 343], "t_im1": 343, "t_ix": 321, "t_l": 195, "t_max": 363, "t_temp": 343, "tabl": [361, 362, 369, 375], "tachella": 371, "tag": [113, 361, 386], "tail": 236, "take": [12, 13, 14, 15, 17, 20, 21, 22, 24, 26, 52, 53, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 82, 83, 86, 96, 104, 105, 110, 121, 122, 134, 135, 136, 207, 235, 259, 267, 316, 317, 331, 341, 343, 344, 354, 355, 383, 386, 392, 393], "taken": [19, 40, 41, 81, 82, 89, 145, 236, 293, 300, 321, 369, 388], "tangent": 309, "taohuang2018": 42, "tar": [12, 15, 17, 21, 26], "target": [16, 50, 63, 69, 75, 196, 206, 300, 319], "target_transform": 15, "task": [21, 27, 99, 300, 381, 391], "tau": [51, 52, 53, 103, 113, 150, 300, 326, 327, 335, 336, 355, 356, 364, 386], "tau1": 52, "tau2": 52, "tau_1": 52, "tau_2": 52, "tcia": 20, "teboul": 103, "telescop": 300, "templat": [38, 85, 98, 206], "tempor": [43, 105, 206, 396], "tend": [170, 300], "tensor": [12, 16, 19, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 259, 266, 267, 272, 273, 278, 280, 287, 288, 289, 290, 291, 293, 294, 296, 297, 298, 299, 300, 306, 312, 313, 314, 315, 316, 317, 318, 321, 335, 337, 343, 344, 348, 361, 363, 376, 378, 379, 383, 386, 391, 393, 396], "tensor_in": [76, 107], "tensor_s": [31, 43, 47, 129, 173, 182, 229, 231, 237, 241, 249, 251, 309, 316, 320, 327, 330, 342, 343, 344, 345, 348, 351, 364, 379, 386], "tensorlist": [22, 48, 73, 96, 144, 183, 189, 191, 202, 203, 248, 280, 290, 297, 298, 299, 300, 318, 379], "tensorshap": 321, "term": [52, 88, 102, 103, 111, 113, 118, 119, 121, 122, 125, 128, 134, 140, 141, 142, 144, 146, 148, 150, 158, 159, 251, 273, 274, 275, 300, 307, 312, 326, 327, 334, 335, 336, 337, 338, 343, 344, 360, 361, 362, 364, 365, 375, 379, 385, 386, 389], "terminologi": 134, "terri": [300, 321, 371], "tessel": 260, "test": [8, 12, 16, 18, 19, 24, 25, 26, 27, 28, 31, 43, 44, 46, 47, 79, 84, 99, 100, 109, 183, 291, 303, 306, 307, 313, 314, 315, 318, 319, 334, 337, 369, 391, 395], "test_base_dataset": [351, 360, 361, 362, 364, 365], "test_batch_s": [320, 360, 361, 362, 363, 364, 365], "test_dataload": [12, 256, 303, 307, 320, 334, 337, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "test_datapoint": [27, 351, 352, 353, 354, 355, 356, 361, 362], "test_dataset": [27, 303, 307, 308, 319, 320, 334, 337, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 374, 391], "test_dataset_nam": [320, 360, 364, 365], "test_img": [330, 331], "test_psnr": [320, 364], "test_sampl": [360, 361, 362, 365], "test_transform": [320, 360, 364, 365], "text": [51, 53, 58, 59, 60, 61, 62, 65, 67, 68, 70, 71, 72, 73, 74, 90, 113, 123, 124, 125, 127, 129, 130, 140, 147, 157, 161, 166, 170, 171, 173, 182, 187, 190, 191, 195, 207, 208, 211, 212, 214, 245, 303, 321, 325, 326, 327, 349, 361, 362, 381, 386, 393], "tgv": 102, "tgvdenois": 383, "th": [102, 103, 108, 109, 111, 112, 128, 135, 255, 325, 331], "than": [22, 47, 140, 152, 162, 166, 168, 170, 176, 189, 196, 200, 201, 210, 217, 220, 228, 232, 234, 254, 255, 291, 294, 300, 307, 308, 312, 316, 337, 343, 344, 354, 364, 386, 392, 393], "thank": [306, 313], "thei": [12, 18, 19, 27, 113, 141, 249, 319, 341, 362, 365, 378, 379, 381, 383, 389, 392, 393, 394, 395], "them": [19, 20, 25, 32, 108, 183, 195, 242, 258, 296, 321, 324, 360, 361, 362, 383, 396], "themselv": [259, 303], "theorem": [233, 272, 306, 313, 344, 389], "theoret": [183, 321, 396], "theori": [102, 103, 233, 234, 306, 313, 386], "therefor": [107, 314, 374, 386], "therein": 313, "theta": [84, 213, 215, 216, 242, 250, 251, 267, 309, 315, 320, 331, 351, 379, 380], "theta2": 379, "theta_max": [261, 268, 269, 270, 271, 321, 349], "theta_z_max": [261, 268, 269, 270, 271, 321], "thi": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 56, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 81, 82, 84, 85, 86, 87, 89, 97, 99, 101, 102, 103, 106, 107, 108, 109, 111, 113, 118, 119, 120, 122, 123, 124, 125, 136, 141, 143, 144, 149, 154, 160, 161, 162, 168, 169, 170, 171, 172, 173, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 191, 193, 195, 196, 197, 198, 199, 200, 201, 206, 207, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 244, 249, 250, 251, 253, 256, 257, 259, 260, 267, 272, 273, 275, 281, 291, 295, 296, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 369, 379, 381, 382, 383, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396], "thin": [252, 253, 254, 255, 341], "third": [199, 311], "thorac": 20, "thorough": 321, "those": [147, 343], "three": [150, 181, 376], "three_d": [177, 185, 186, 187, 198, 319], "thres_conv": [113, 252, 307, 337], "thresh_conv": [253, 254, 255], "threshold": [12, 18, 27, 38, 49, 50, 108, 109, 113, 119, 127, 129, 130, 140, 141, 147, 152, 156, 160, 170, 183, 191, 252, 253, 255, 273, 275, 281, 283, 291, 295, 312, 324, 325, 362, 364, 366, 367, 373, 386], "threshold_3d": 108, "threshold_nd": 108, "thresold_2d": 108, "thresold_func": 108, "through": [31, 33, 34, 37, 40, 43, 47, 79, 80, 196, 262, 300, 306, 313, 315, 344, 379, 387, 392, 396], "thu": [16, 21, 84, 86, 92, 108, 109, 177, 185, 198, 207, 253, 254, 255, 310, 337, 363, 386], "ti": 275, "tight": [291, 294, 325], "tight_layout": [311, 343], "tikhonov": 386, "tild": [169, 170, 173, 177, 182, 183, 191, 193, 198, 207, 250, 344], "tilt": [261, 270, 349, 396], "time": [9, 12, 16, 31, 32, 35, 36, 43, 44, 45, 46, 47, 49, 79, 86, 88, 90, 104, 105, 113, 121, 166, 170, 173, 176, 177, 182, 196, 197, 198, 199, 206, 229, 230, 235, 236, 237, 244, 252, 256, 259, 262, 266, 267, 296, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 383, 385, 386, 392], "time_dim": 296, "time_pair": 344, "timeagnosticnet": [31, 43, 383], "timeaveragingnet": 383, "timemixin": [104, 105, 177, 267, 377], "timestamp": [285, 376], "timestep": [86, 250, 251, 343, 344], "tini": 318, "tip": [254, 255], "tissu": 15, "titl": [201, 291, 293, 294, 296, 300, 306, 309, 311, 313, 314, 315, 316, 317, 318, 319, 321, 326, 327, 335, 336, 338, 341, 342, 343, 344, 345, 348, 360, 361, 362, 365, 376], "tkbn": 300, "to_complex": 16, "to_complex_denois": [314, 383], "to_logimag": 300, "to_stat": [105, 177], "to_torch_complex": 186, "tocomplex": 391, "togeth": [9, 321, 396], "toi": [318, 360], "tol": [34, 37, 163, 164, 165, 166, 167, 183, 191, 300, 386], "tol_int": 140, "toler": [34, 37, 79, 161, 163, 164, 165, 166, 167, 183, 191, 303], "tomographi": [12, 20, 23, 85, 87, 113, 119, 121, 129, 131, 135, 136, 137, 140, 141, 148, 173, 175, 179, 183, 184, 188, 191, 209, 283, 284, 289, 291, 292, 324, 332, 333, 339, 340, 354, 363, 373, 378, 380, 390], "too": [22, 27, 47, 69, 98, 181, 186, 259], "tool": [19, 300, 374], "toolbox": [306, 313, 378], "top": [44, 51, 52, 53, 76, 108, 109, 113, 119, 131, 132, 138, 144, 150, 166, 169, 170, 172, 173, 183, 185, 190, 191, 198, 200, 202, 207, 210, 272, 293, 300, 320, 324, 335, 341, 351, 355, 356, 363, 364, 375, 379, 382, 386, 389], "topk": [108, 109], "torch": [12, 16, 18, 19, 20, 22, 23, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 278, 279, 280, 283, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 374, 376, 378, 379, 383, 386, 389, 391, 392, 393, 394, 396], "torchist": 225, "torchkbnufft": [196, 300], "torchmetr": [63, 67, 68, 69, 73, 74, 75], "torchmetric_kwarg": 74, "torchvis": [13, 14, 15, 16, 17, 18, 21, 24, 26, 29, 30, 33, 267, 286, 303, 307, 308, 310, 319, 320, 321, 326, 327, 334, 337, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 364, 365, 391, 396], "torso": 86, "total": [12, 19, 20, 25, 41, 46, 54, 77, 99, 102, 103, 108, 113, 119, 129, 140, 141, 145, 148, 169, 173, 179, 183, 188, 191, 235, 265, 283, 286, 287, 291, 292, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 367, 373, 381, 383, 385, 392, 395], "total_batch": 46, "totalloss": [303, 318, 319, 320, 331, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 395], "totensor": [303, 307, 308, 310, 320, 326, 327, 334, 337, 349, 351, 352, 353, 354, 355, 356, 360, 361, 362, 364, 365, 391], "toulous": 368, "tour": [12, 16, 18, 25, 27, 33, 38, 50, 76, 85, 87, 98, 106, 107, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 200, 201, 202, 203, 206, 207, 213, 230, 233, 235, 236, 238, 239, 240, 242, 243, 244, 260, 267, 279, 281, 283, 284, 289, 291, 294, 313, 322, 323, 324, 373], "toward": [225, 326, 327], "tqdm": [12, 331, 343, 344], "track": [276, 376, 393], "tracker": [369, 370], "trade": 381, "tradeoff": 393, "tradit": [86, 300], "train": [0, 2, 12, 14, 16, 18, 21, 25, 27, 31, 38, 43, 44, 46, 47, 50, 55, 57, 58, 59, 60, 61, 62, 63, 65, 69, 73, 74, 75, 76, 79, 80, 81, 82, 85, 86, 87, 89, 96, 97, 98, 99, 100, 106, 143, 173, 182, 183, 191, 253, 254, 255, 256, 258, 259, 273, 275, 283, 286, 295, 306, 307, 308, 310, 312, 314, 318, 322, 323, 324, 334, 335, 337, 338, 343, 344, 349, 371, 373, 381, 384, 387, 389, 390, 391, 393, 394, 395], "train_base_dataset": [351, 360, 361, 362, 364, 365], "train_batch_s": [320, 360, 361, 362, 363, 364, 365], "train_dataload": [12, 257, 259, 303, 310, 318, 319, 320, 331, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "train_datapoint": [27, 307, 320, 334, 337, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 364, 365], "train_dataset": [27, 303, 307, 308, 319, 320, 331, 334, 337, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 374, 391], "train_dataset_nam": [320, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365], "train_img": 331, "train_it": 12, "train_loss": [35, 36, 45, 49, 63, 67, 68, 69, 73, 74, 75, 393], "train_perc": [25, 348, 350], "train_test_transform": [361, 362], "train_transform": [320, 360, 364, 365], "trainabl": [42, 44, 47, 51, 52, 53, 106, 273, 275, 279, 303, 312, 318, 319, 320, 336, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 364, 365, 384, 389], "trainable_param": [273, 275, 312, 360, 361, 362, 364, 365, 389], "trainer": [73, 257, 259, 303, 318, 319, 320, 331, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 374, 381, 393, 394], "trajectori": [19, 239, 306], "trajectory_first": 19, "trajectory_index": 19, "tran": 167, "transact": [78, 363], "transform": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 33, 38, 39, 40, 46, 76, 78, 85, 90, 93, 99, 101, 106, 108, 109, 147, 170, 173, 177, 179, 182, 183, 185, 186, 187, 188, 191, 195, 196, 198, 200, 204, 205, 206, 207, 215, 216, 223, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 281, 283, 284, 286, 289, 291, 300, 303, 307, 308, 316, 319, 320, 322, 323, 324, 325, 326, 327, 331, 334, 335, 337, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 373, 374, 378, 383, 386, 390, 392], "transform2": 321, "transform3": 321, "transform_data": 391, "transform_func": 204, "transform_func_inv": 204, "transform_kspac": 16, "transform_m": 22, "transform_pan": 22, "transform_target": 16, "transformerblock": 99, "transformparam": 267, "translat": [33, 97, 261, 265, 268, 269, 271, 349, 350, 392, 396], "transmiss": 180, "transpos": [76, 83, 91, 113, 122, 170, 173, 181, 183, 207, 220, 221, 222, 315, 378], "treat": [76, 206], "trick": 344, "trigger": [242, 311, 321], "trim": 205, "trivial": [180, 182, 341], "true": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 31, 33, 34, 35, 36, 37, 40, 41, 43, 44, 45, 46, 47, 49, 51, 52, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 84, 86, 87, 90, 92, 93, 94, 95, 97, 99, 101, 104, 106, 112, 113, 122, 134, 135, 138, 139, 141, 147, 149, 150, 151, 158, 159, 160, 161, 162, 170, 171, 176, 182, 183, 185, 186, 187, 189, 193, 195, 196, 198, 200, 205, 207, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 231, 237, 249, 250, 251, 252, 253, 256, 258, 259, 260, 263, 267, 272, 283, 286, 287, 291, 292, 293, 294, 295, 296, 300, 303, 306, 307, 308, 309, 310, 312, 313, 314, 316, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 372, 385, 386, 391, 393, 395, 396], "true_sigma": 356, "truli": [51, 52, 53], "truth": [12, 15, 16, 18, 19, 31, 32, 43, 50, 58, 59, 71, 113, 122, 229, 241, 256, 259, 272, 273, 303, 309, 318, 319, 320, 326, 327, 330, 331, 335, 336, 338, 341, 342, 343, 344, 345, 348, 349, 354, 360, 361, 362, 364, 365, 381, 384, 392, 395], "try": [267, 300, 369, 372], "tun": 251, "tune": [157, 161, 303, 331, 338, 348], "tupl": [12, 16, 19, 23, 28, 31, 43, 46, 52, 80, 84, 89, 93, 96, 101, 113, 122, 169, 170, 171, 172, 174, 176, 177, 180, 182, 185, 186, 187, 189, 194, 195, 196, 197, 198, 200, 204, 205, 210, 213, 228, 229, 230, 231, 232, 233, 234, 237, 239, 240, 241, 243, 246, 252, 253, 254, 255, 256, 257, 259, 288, 289, 291, 293, 294, 296, 300, 395], "turn": [90, 252, 272, 273, 306, 321, 325, 330, 344, 383, 389, 393], "tutori": [81, 82, 122, 272, 343, 344, 368, 389], "tv": [54, 102, 103, 113, 119, 129, 140, 141, 145, 148, 169, 173, 179, 183, 188, 191, 283, 286, 287, 291, 292, 324, 328, 329, 362, 373], "tv_smooth": 362, "tvdenois": [145, 383], "tvloss": 392, "tvprior": [103, 326, 386], "tweedi": [46, 143, 344, 345, 387], "two": [15, 16, 42, 46, 47, 48, 65, 134, 140, 144, 171, 182, 183, 188, 191, 207, 216, 238, 242, 267, 303, 330, 331, 343, 344, 350, 351, 352, 381, 386, 393], "twophoton_bpae_b": 15, "twophoton_bpae_g": 15, "twophoton_bpae_r": 15, "twophoton_mic": 15, "tx_prev": 122, "type": [12, 15, 16, 19, 32, 35, 36, 38, 43, 45, 47, 49, 55, 57, 69, 76, 96, 107, 170, 171, 173, 177, 186, 190, 191, 196, 198, 203, 205, 206, 207, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 230, 231, 232, 233, 234, 235, 236, 238, 242, 244, 245, 246, 267, 279, 280, 281, 282, 284, 285, 286, 287, 290, 297, 298, 299, 303, 310, 313, 317, 321, 362, 381, 383, 391], "type_t": 86, "typic": [55, 57, 143, 177, 198, 378, 386, 387, 391], "u": [51, 52, 53, 83, 94, 106, 112, 119, 123, 124, 125, 127, 129, 130, 134, 140, 144, 169, 173, 183, 200, 208, 209, 272, 303, 310, 320, 335, 341, 343, 344, 351, 352, 353, 354, 355, 356, 363, 375, 380, 386, 389], "u0": 363, "u2": [102, 103], "u_": [122, 149, 150, 151, 152, 154, 156, 335, 364, 385, 386], "u_0": [113, 150], "u_adjoint": [169, 173, 200, 341], "u_init": [312, 364], "u_k": [122, 150, 152, 154, 156, 335, 364, 385, 386], "uair": 60, "uair_model": 303, "uairgeneratorloss": [303, 392], "uc": 331, "ucl": 368, "uk": 368, "ula": [34, 85, 87, 119, 129, 140, 141, 143, 173, 179, 182, 183, 188, 191, 253, 283, 289, 291, 324, 346, 347, 373, 387], "ula_mean": 341, "ula_var": 341, "ultim": 369, "ulyanov": [84, 309], "un": [80, 171, 356], "unadjust": [254, 255, 341, 345, 387], "unavail": 21, "unbias": [51, 52, 53, 318, 355], "uncertainti": [34, 85, 87, 119, 129, 140, 141, 143, 173, 179, 182, 183, 188, 191, 253, 255, 283, 289, 291, 324, 342, 346, 347, 371, 373], "uncondit": 374, "under": [86, 310, 313, 321, 331, 361, 362, 372], "underli": [12, 86, 135, 375], "undersampl": [177, 185, 187, 198, 204, 205, 230, 235, 236, 244, 316, 319, 348, 354, 392], "underset": [88, 102, 103, 108, 109, 113, 121, 123, 125, 127, 129, 130, 140, 150, 183, 191, 300, 326, 327, 331, 364, 385, 386], "understand": 379, "understood": 309, "undesir": [136, 291], "unet": [86, 100, 104, 105, 259, 303, 319, 320, 349, 351, 352, 353, 354, 355, 356, 383], "uneven": [12, 393], "unflatten": [104, 171, 206, 267], "unfold": [0, 12, 18, 27, 38, 50, 85, 87, 94, 95, 108, 119, 123, 129, 137, 140, 141, 173, 176, 179, 182, 183, 188, 191, 256, 272, 273, 274, 275, 279, 283, 286, 291, 295, 312, 336, 351, 360, 367, 371, 373, 374, 381, 384], "unfolded_build": [312, 361, 362, 363, 364, 365, 389], "unfolded_pgd": [361, 362, 365], "ungrid": 196, "unif": 79, "unifi": 375, "uniform": [63, 75, 181, 196, 205, 208, 209, 235, 236, 244, 271, 297, 300, 316], "uniform_phas": 205, "uniformgaussiannois": 46, "uniformli": [207, 245, 263, 383], "uniformnois": [331, 380], "union": [16, 19, 196, 296, 300], "uniqu": [102, 103], "unit": [92, 170, 183, 205, 232, 234, 314, 315, 343], "unitari": 197, "univ": 368, "unknown": [51, 52, 180, 181, 318, 349, 356, 374], "unless": 316, "unlik": [19, 78, 87, 252, 300], "unmix": [181, 318], "unnormalis": [236, 244], "unorgan": 44, "unrol": [12, 31, 43, 76, 107, 256, 257, 272, 279, 303, 312, 319, 348, 350, 360, 361, 362, 363, 364, 365, 383, 384, 389], "unshear": 171, "unsqueez": [173, 201, 300, 308, 313, 315, 316, 317, 318, 319, 325, 326, 327, 334, 337, 342, 345, 360, 363], "unsupadversarialdiscriminatorloss": [55, 303, 392], "unsupadversarialgeneratorloss": [57, 303, 392], "unsupervis": [44, 60, 61, 62, 81, 82, 261, 270, 303, 318, 349, 351, 392, 395], "unsur": [12, 18, 27, 38, 51, 52, 76, 85, 98, 106, 173, 175, 179, 183, 188, 191, 281, 283, 324, 357, 358, 373], "unti": 275, "until": 348, "untouch": 147, "untrain": 381, "unus": [69, 107, 241], "unwrap": 206, "up": [12, 14, 16, 20, 52, 86, 96, 103, 183, 261, 268, 271, 308, 312, 315, 331, 336, 360, 361, 363, 365, 391], "upcom": 321, "upconv": [83, 91], "updat": [12, 46, 103, 113, 114, 122, 134, 149, 150, 151, 152, 153, 155, 168, 169, 171, 173, 177, 178, 179, 181, 182, 184, 185, 186, 187, 191, 192, 193, 198, 201, 202, 203, 209, 276, 319, 331, 335, 337, 343, 344, 363, 364, 369, 372, 379, 386, 395], "update_data_fidelity_fn": [113, 122], "update_metrics_fn": [113, 122], "update_paramet": [31, 43, 44, 46, 47, 168, 169, 173, 178, 179, 181, 184, 185, 187, 192, 193, 201, 202, 203, 209], "update_params_fn": [113, 122], "update_prior_fn": [113, 122], "upgrad": 372, "upload": [309, 341, 342, 345], "upp": [224, 225], "upper": [224, 225], "upsampl": [83, 91, 96, 101, 378], "upsample_mod": [83, 91], "upscal": 101, "urban": [22, 26, 318, 349, 391], "urban100": [26, 303, 349], "urban100_hr": 26, "urban100_inpainting_homography_model": 349, "urban100hr": [303, 349, 391], "url": [16, 101, 282, 284, 286, 289, 306, 309, 312, 314, 316, 317, 318, 319, 330, 331, 335, 336, 338, 341, 342, 343, 344, 345, 348, 350, 351, 352, 353, 354, 355, 372, 376, 385], "us": [1, 3, 9, 13, 15, 19, 24, 32, 35, 36, 40, 45, 46, 49, 65, 69, 70, 72, 73, 74, 77, 88, 89, 92, 99, 100, 101, 103, 116, 122, 124, 133, 144, 155, 162, 163, 166, 167, 195, 204, 205, 216, 218, 219, 221, 222, 224, 225, 228, 229, 241, 254, 266, 300, 303, 306, 307, 308, 311, 312, 313, 314, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 395, 396], "usag": [47, 259, 291, 294, 379, 393, 396], "use_bicubic_init": 337, "use_brovei": 189, "use_checkpoint": 101, "use_fft": 176, "use_filt": 215, "use_fp16": 86, "use_sigmoid": 97, "user": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 27, 46, 83, 86, 87, 91, 100, 101, 126, 148, 169, 172, 173, 175, 185, 189, 200, 256, 274, 275, 296, 318, 341, 372, 379, 386, 389, 395], "userwarn": [300, 311, 316, 319, 321, 343, 344, 348, 355], "usual": [19, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 259, 300, 343, 344, 393], "usv": 341, "ut": [117, 336], "util": [0, 12, 16, 20, 22, 25, 27, 28, 29, 30, 48, 65, 70, 73, 88, 96, 121, 144, 161, 162, 163, 164, 165, 166, 167, 170, 180, 183, 189, 191, 201, 202, 203, 207, 248, 249, 251, 256, 257, 259, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 372, 379, 385, 388, 391, 393], "uv": 300, "uv_coordin": 300, "v": [113, 122, 134, 169, 172, 173, 181, 183, 185, 190, 191, 200, 272, 315, 335, 341, 354, 389, 393], "v_": [153, 155, 386], "v_adjoint": [169, 172, 173, 185, 200, 315, 341], "v_k": 335, "val": [14, 18, 21, 27, 276, 391], "val1": 21, "val_datapoint": 27, "val_dataset": [21, 27, 319], "val_transform": [307, 308, 326, 327, 334, 337], "valid": [14, 16, 27, 47, 107, 140, 168, 176, 189, 201, 217, 219, 220, 222, 228, 243, 306, 327, 349, 387, 390], "valu": [12, 15, 18, 19, 29, 46, 51, 52, 53, 56, 72, 74, 84, 86, 88, 93, 101, 102, 110, 112, 113, 120, 121, 122, 135, 136, 140, 143, 145, 147, 148, 162, 164, 167, 169, 173, 177, 178, 184, 185, 187, 193, 198, 200, 207, 216, 225, 230, 231, 237, 242, 249, 251, 254, 255, 267, 273, 274, 275, 276, 291, 294, 300, 309, 314, 315, 316, 317, 330, 341, 342, 343, 355, 361, 362, 365, 376, 377, 379, 383, 386, 387, 391, 393], "van": 163, "vanilla": [12, 18, 27, 38, 50, 85, 87, 113, 119, 129, 137, 140, 141, 148, 176, 179, 183, 188, 191, 207, 273, 275, 283, 284, 286, 289, 291, 292, 295, 324, 339, 340, 366, 367, 373], "var": [253, 342, 345], "var_has_converg": 253, "varepsilon": [250, 251, 343, 344], "varepsilon_t": 251, "varga": 254, "vari": [12, 14, 16, 31, 43, 104, 105, 177, 198, 201, 206, 230, 235, 236, 243, 244, 296, 348, 378, 383], "variabl": [52, 53, 79, 94, 95, 102, 103, 112, 113, 114, 115, 116, 117, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 136, 137, 139, 140, 142, 144, 145, 146, 147, 150, 267, 281, 307, 308, 312, 326, 327, 334, 335, 337, 338, 345, 348, 355, 356, 363, 364, 381, 386, 391], "varianc": [85, 178, 252, 253, 254, 255, 341, 342, 343, 345, 387, 393], "variant": [108, 109, 163], "variat": [54, 102, 103, 107, 113, 119, 129, 140, 141, 145, 148, 169, 173, 179, 183, 188, 191, 283, 286, 287, 291, 292, 324, 328, 329, 331, 373, 374, 383, 385, 392], "varieti": [374, 391], "variou": [6, 7, 11, 172, 177, 181, 185, 187, 198, 206, 303, 316, 318, 319, 342, 349, 353, 355, 356, 374, 387, 390, 392, 396], "varnet": [319, 388], "vdot": [195, 203, 248], "vector": [12, 37, 51, 52, 53, 79, 80, 82, 84, 102, 108, 113, 173, 177, 181, 183, 190, 191, 225, 236, 244, 255, 273, 341, 375], "veloc": 260, "verbos": [12, 27, 34, 37, 84, 102, 103, 113, 122, 160, 161, 162, 163, 164, 167, 183, 249, 250, 251, 252, 253, 254, 255, 256, 259, 283, 300, 303, 307, 309, 314, 320, 326, 327, 331, 334, 335, 336, 337, 338, 341, 342, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 386, 391], "verbose_individual_loss": 12, "veri": [259, 300, 303, 314, 319, 331, 344], "verif": 13, "verifi": [13, 14, 17, 21, 22, 24, 26, 164, 177, 183, 186, 253, 255, 356], "verify_split_dataset_integr": [14, 21], "version": [13, 14, 15, 17, 20, 21, 24, 26, 31, 44, 76, 90, 102, 103, 170, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 314, 343, 372], "vert": [44, 126, 313], "vert_2": 126, "vertic": [14, 54, 230, 235, 236, 244, 293, 348], "vgg": 303, "vi": [320, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365], "via": [25, 27, 40, 41, 83, 86, 87, 88, 99, 100, 106, 121, 135, 143, 169, 170, 173, 177, 182, 183, 188, 190, 191, 197, 200, 201, 207, 242, 267, 300, 307, 325, 330, 335, 341, 343, 344, 345, 352, 353, 355, 356, 372, 379, 382, 386, 387, 389, 391, 394, 396], "vid": 296, "vid_list": 296, "video": [19, 31, 43, 177, 235, 236, 244, 266, 267, 296, 348], "view": [15, 243, 247, 264, 294, 296, 307, 316, 331, 344, 345], "viridi": [300, 325], "virtual": [33, 40, 272, 389], "visibl": [267, 300], "vision": [21, 118, 228, 300, 334], "visit": 344, "visual": [12, 300, 343, 344, 360, 361, 362, 363, 365, 376, 378], "visualis": [12, 198, 348, 354, 396], "vjp": [183, 190, 191], "vol": [102, 103, 167], "volum": [16, 25, 185, 187, 319, 374], "volume_data": [313, 325], "volume_perserv": 260, "volumetr": 378, "vorst": 163, "voxel": [186, 234, 391], "vrv": 341, "vu": [85, 87, 113, 119, 129, 134, 137, 140, 141, 148, 158, 159, 173, 179, 183, 188, 191, 200, 283, 284, 289, 291, 292, 324, 339, 340, 373, 385], "w": [16, 29, 30, 31, 43, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 84, 92, 96, 99, 101, 104, 105, 118, 138, 139, 168, 169, 170, 171, 172, 174, 177, 181, 182, 183, 185, 186, 187, 189, 196, 197, 198, 199, 200, 201, 204, 205, 206, 210, 211, 212, 217, 218, 219, 220, 221, 222, 228, 229, 230, 231, 233, 235, 236, 237, 241, 243, 244, 256, 267, 291, 294, 296, 300, 311, 313, 316, 319, 325, 334, 344, 348, 362, 363, 383, 393, 396], "w_k": [201, 228], "wa": [18, 22, 44, 47, 58, 59, 61, 62, 73, 78, 79, 80, 81, 82, 87, 89, 97, 99, 100, 101, 229, 254, 312, 318, 331, 344, 348, 354], "wai": [172, 303, 310, 312, 321, 350, 351, 352, 353, 355, 356, 369, 379, 393, 395], "wald": 96, "walk": 315, "wandb": [12, 360, 365], "wandb_setup": 12, "wandb_vi": [12, 320, 348, 350, 351, 352, 353, 355, 360, 361, 362, 363, 364, 365], "wang": [89, 261, 270, 318, 349, 371], "want": [12, 19, 27, 34, 37, 187, 206, 217, 220, 306, 313, 315, 319, 321, 326, 327, 337, 374, 379, 393, 395], "warm": 103, "warn": [140, 319, 348, 355], "wavdict": 325, "wave": [234, 313], "wavelength": [232, 234, 313], "wavelet": [85, 108, 109, 113, 119, 129, 140, 141, 147, 148, 173, 179, 182, 183, 188, 191, 283, 286, 291, 292, 312, 324, 328, 329, 361, 364, 373, 383, 386], "waveletdenois": [109, 147, 312, 325, 364, 383], "waveletdictdenois": [325, 383], "waveletprior": [300, 325, 327, 361, 364, 386], "we": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 34, 44, 47, 73, 84, 86, 90, 108, 122, 123, 125, 134, 166, 170, 171, 172, 173, 177, 183, 184, 185, 187, 190, 198, 201, 205, 210, 223, 279, 291, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 368, 369, 374, 376, 379, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396], "weight": [12, 33, 40, 41, 54, 55, 57, 58, 59, 60, 61, 62, 64, 73, 83, 86, 87, 88, 91, 92, 99, 100, 101, 121, 135, 157, 161, 162, 181, 196, 225, 237, 273, 275, 276, 312, 314, 320, 325, 330, 331, 335, 338, 344, 348, 350, 351, 352, 353, 355, 360, 361, 363, 364, 374, 383], "weight_adv": [55, 57, 58, 59, 60, 61, 62], "weight_decai": [303, 320, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 362, 364, 365], "weight_mc": 60, "weiss": [121, 228, 331], "welcom": [368, 369], "welford": 253, "well": [31, 33, 39, 40, 41, 42, 43, 50, 80, 122, 134, 170, 183, 207, 256, 273, 309, 315, 326, 327, 344, 371, 379, 385, 386], "were": [19, 303, 349, 362, 365], "wgan": [56, 303, 381, 392], "what": [19, 321], "when": [12, 16, 18, 19, 27, 32, 41, 42, 44, 47, 49, 67, 68, 84, 86, 103, 106, 113, 122, 135, 140, 141, 162, 166, 183, 191, 193, 206, 229, 242, 251, 263, 267, 303, 306, 307, 313, 316, 319, 335, 337, 341, 344, 345, 352, 354, 362, 369, 381, 383, 391, 392, 394, 395], "where": [12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 26, 27, 31, 33, 34, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 84, 88, 96, 98, 102, 103, 108, 109, 111, 112, 113, 119, 121, 122, 124, 126, 128, 134, 135, 138, 140, 143, 144, 145, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 164, 168, 169, 170, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 216, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 235, 236, 237, 239, 241, 244, 245, 248, 250, 251, 255, 256, 261, 267, 268, 269, 271, 272, 273, 291, 294, 295, 300, 303, 307, 309, 311, 313, 314, 316, 318, 319, 320, 325, 326, 327, 330, 331, 334, 335, 336, 341, 343, 344, 345, 348, 351, 352, 355, 356, 361, 362, 363, 364, 374, 379, 380, 381, 385, 386, 387, 389, 391, 393, 395], "wherea": [12, 44, 47, 67, 68, 200, 213, 341, 343, 344, 384], "whether": [12, 16, 19, 22, 25, 34, 37, 56, 66, 79, 92, 94, 95, 97, 101, 102, 103, 113, 136, 148, 161, 162, 186, 225, 252, 258, 272, 273, 274, 275, 286, 287, 288, 289, 295, 392], "which": [9, 12, 18, 19, 22, 27, 31, 34, 39, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 56, 73, 79, 83, 87, 99, 104, 105, 110, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 136, 137, 139, 140, 142, 143, 144, 145, 146, 147, 155, 161, 167, 169, 170, 171, 172, 176, 181, 182, 183, 185, 187, 191, 196, 200, 207, 215, 216, 219, 221, 222, 225, 249, 250, 253, 256, 257, 258, 259, 260, 262, 267, 268, 269, 270, 271, 273, 275, 288, 289, 293, 307, 308, 310, 312, 313, 314, 316, 318, 319, 325, 326, 327, 330, 331, 334, 337, 341, 342, 343, 344, 345, 352, 353, 355, 356, 360, 361, 362, 364, 365, 371, 374, 376, 379, 380, 381, 383, 384, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396], "while": [9, 85, 113, 162, 166, 303, 309, 313, 314, 315, 350, 381, 385, 386, 396], "whilst": 259, "white": [168, 169, 176, 183, 330, 343, 344, 378], "whiten": 300, "whole": [22, 31, 43, 90, 106, 121, 253, 330, 331, 348, 351, 352, 353, 354, 355, 356, 392], "whose": [38, 180, 207, 293, 295, 386], "why": [343, 344], "wide": [15, 391], "widefield_bpae_b": 15, "widefield_bpae_g": 15, "widefield_bpae_r": 15, "widehat": [250, 251, 325, 343, 344], "wider": 12, "width": [23, 28, 86, 94, 95, 121, 171, 177, 185, 195, 198, 207, 232, 234, 265, 291, 294, 325], "wiki": [44, 74, 163, 164, 174, 178, 233, 306, 313], "wikimedia": [309, 341, 342, 345], "wikipedia": [44, 74, 163, 164, 174, 178, 233, 306, 309, 313, 316, 341, 342, 345], "win": 369, "window": [93, 101, 214, 369], "window_s": 101, "wise": [66, 180, 186, 195, 303, 378], "withbia": 99, "within": [14, 16, 86, 319, 378, 384, 390, 394], "without": [27, 31, 43, 47, 73, 170, 182, 191, 207, 229, 231, 237, 241, 262, 263, 267, 273, 286, 348, 349, 369, 379, 395], "work": [9, 21, 84, 99, 267, 300, 309, 311, 313, 316, 319, 320, 337, 342, 343, 344, 348, 355, 364, 396], "worker": 27, "workflow": 369, "world": [21, 309, 341, 342, 345, 349, 368], "worldview": [22, 318], "wors": 354, "would": [300, 395], "wrap": [12, 13, 32, 35, 36, 45, 49, 63, 69, 75, 78, 186, 206, 260, 266, 267, 336, 360, 361, 362, 365, 383, 393], "wrap_flatten_c": 206, "wrapper": [24, 26, 47, 50, 104, 105, 334, 376, 382, 383], "write": [147, 250, 251, 325, 326, 327, 336, 337, 343, 344, 363, 386, 394, 395], "writer": 296, "written": [113, 392], "wv": [108, 109, 147, 300, 312, 325, 327, 361, 364], "wv_list": 300, "wvdim": [108, 109, 147, 325], "ww": 217, "www": 20, "wx": 361, "x": [12, 15, 16, 18, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 83, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 232, 233, 234, 239, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 261, 266, 267, 268, 269, 270, 271, 272, 275, 278, 280, 290, 296, 297, 298, 299, 300, 303, 307, 308, 309, 311, 313, 314, 315, 316, 317, 318, 319, 321, 325, 326, 327, 331, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 351, 361, 362, 363, 364, 372, 374, 375, 378, 379, 380, 381, 384, 385, 386, 387, 389, 391, 392, 393, 395, 396], "x0": [167, 183, 319, 343, 344, 363], "x0_pred": 344, "x0_t": 344, "x1": [319, 376], "x2": [21, 102, 103, 316, 376], "x3": 21, "x4": 21, "x64": [321, 348], "x_": [113, 122, 134, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 251, 255, 273, 325, 335, 336, 341, 345, 361, 362, 364, 385, 386, 389], "x_0": [113, 150, 161, 167], "x_adj": 379, "x_aux": 343, "x_bar": 341, "x_cur": 325, "x_dagger": [183, 379], "x_est": [314, 317], "x_gd_rand": 314, "x_gd_spec": 314, "x_grai": 306, "x_gt": [113, 122, 272, 273, 300, 314, 326, 327, 335, 336, 338], "x_hat": [98, 275, 318, 325, 349, 372, 374, 385, 386, 389, 393], "x_hist": 122, "x_i": [40, 41, 117, 126, 133, 139, 181, 386, 393], "x_in": 34, "x_init": [113, 121, 122, 191, 250, 251, 253, 300, 312, 348, 364], "x_k": [113, 122, 134, 149, 150, 152, 153, 154, 155, 156, 157, 161, 255, 273, 335, 336, 345, 361, 362, 364, 385, 386, 389], "x_lin": [309, 326, 327, 335, 336, 338, 341, 342, 345], "x_model": [300, 326, 327, 335, 336, 338], "x_n": [186, 325], "x_net": [12, 31, 32, 33, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 104, 105, 259, 318, 319, 392, 393, 395], "x_noisi": 343, "x_out": 330, "x_phase": 314, "x_phase_gd_rand": 314, "x_phase_gd_spec": 314, "x_phase_pnp": 314, "x_phase_spec": 314, "x_pnp": 314, "x_prev": [113, 122, 325, 335], "x_prox": [183, 343, 379], "x_prox_scal": 343, "x_recon": 160, "x_rgb": 306, "x_rss": 319, "x_sampl": 343, "x_sampled_sc": 343, "x_shift": [195, 267, 396], "x_spec": 314, "x_stretch_factor_min": [261, 268, 269, 270, 271], "x_t": [251, 261, 268, 269, 270, 271, 344], "x_train": 18, "x_true": [161, 336, 343, 344], "x_tv": 326, "x_wv": 327, "xdg_data_hom": 281, "xhat": [113, 249, 251, 311, 325, 342, 343, 344], "xlabel": 343, "xlin": 315, "xlin2": 315, "xml": 20, "xprox": 315, "xprox2": 315, "xset": [113, 119, 140, 183, 191, 375, 379, 385, 386], "xt": 344, "xt_next": 344, "xxx": [13, 14, 17, 20, 21, 22, 24, 26, 391], "xxxxxxxxxxx": 16, "xy": 234, "y": [12, 16, 18, 27, 28, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 55, 57, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 84, 86, 88, 94, 96, 98, 102, 103, 104, 105, 107, 108, 109, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 138, 139, 140, 144, 149, 150, 151, 152, 153, 155, 157, 161, 166, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 219, 220, 221, 222, 228, 234, 239, 247, 249, 250, 251, 253, 255, 256, 257, 259, 261, 267, 268, 272, 273, 275, 296, 300, 303, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 330, 331, 335, 336, 338, 341, 342, 343, 344, 345, 348, 349, 351, 352, 355, 356, 360, 361, 362, 363, 364, 365, 372, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 387, 389, 391, 392, 395, 396], "y1": 379, "y2": [315, 379], "y_": [199, 311], "y_1": [44, 47, 144, 354], "y_2": [44, 47, 144, 354], "y_bar": 341, "y_denois": 343, "y_hat": [60, 61, 62, 259], "y_i": [40, 41, 48, 111, 112, 117, 133, 139, 144, 202, 351, 386], "y_in": 34, "y_n": 187, "y_scale": 343, "y_shift": 195, "y_stretch_factor_min": [261, 268, 269, 270, 271], "y_t": [177, 198], "yaman": 47, "yang": 96, "yawli": 21, "ye": [16, 383, 384, 386, 392, 396], "yellow": 318, "yet": 309, "yield": [147, 310, 361, 362], "ylabel": 343, "yosida": [143, 387], "you": [12, 16, 20, 22, 25, 27, 69, 73, 90, 187, 206, 217, 220, 260, 300, 303, 306, 308, 313, 315, 318, 319, 324, 325, 342, 343, 344, 345, 348, 350, 351, 352, 353, 354, 355, 356, 360, 365, 369, 370, 372, 377, 383, 384, 391, 392, 393, 395], "your": [12, 18, 25, 27, 55, 57, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 85, 93, 118, 119, 129, 140, 141, 143, 169, 173, 175, 179, 183, 188, 191, 253, 255, 257, 283, 286, 289, 291, 303, 315, 322, 323, 324, 335, 346, 347, 369, 373, 374, 377, 384, 391, 395], "yourself": [319, 348, 372, 393], "yscale": 314, "yset": [113, 119, 183, 191, 375, 379, 385, 386], "yyi": 391, "yyyi": 12, "z": [51, 52, 53, 79, 82, 84, 122, 127, 131, 132, 134, 138, 143, 149, 151, 152, 166, 173, 176, 179, 183, 191, 192, 196, 208, 234, 255, 261, 268, 269, 270, 271, 300, 303, 309, 313, 335, 363, 378, 380, 381, 386, 387], "z0": [232, 234], "z10": [232, 233, 234], "z11": [232, 233, 234], "z4": [232, 233, 234], "z5": [232, 233, 234, 306, 313], "z6": [232, 233, 234, 306, 313], "z7": [232, 233, 234], "z8": [232, 233, 234], "z9": [232, 233, 234], "z_": [113, 134, 149, 150, 151, 152, 255, 273, 325, 335, 341, 364, 386, 389], "z_0": 150, "z_k": [113, 134, 149, 150, 151, 152, 273, 335, 345, 364, 386, 389], "z_p": 325, "z_prev": 335, "zebrafish": 15, "zenodo": [207, 216], "zernik": [232, 233, 234, 306, 313], "zernike_polynomi": [233, 306, 313], "zero": [31, 43, 47, 49, 108, 112, 162, 168, 169, 176, 182, 183, 195, 196, 198, 201, 204, 205, 206, 217, 229, 231, 236, 237, 263, 280, 299, 300, 306, 311, 313, 314, 315, 316, 319, 331, 341, 343, 344, 348, 362, 378, 395], "zero_boundari": 260, "zero_grad": [258, 331, 395], "zero_grad_d_onli": 258, "zero_grad_g_onli": 258, "zeros_lik": [183, 316, 319, 325, 362, 363, 386], "zeta": [251, 343], "zhang": [118, 307, 334], "zhou": 343, "zip": [14, 17, 24, 286, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365], "zoom": [261, 268, 271, 293, 376], "zoom_factor_min": [261, 268, 269, 270, 271], "zoran": [121, 331], "zuo": [118, 334], "zygalaki": 254, "\u00f6ktem": 363}, "titles": ["API", "deepinv.datasets", "deepinv.loss", "deepinv.metric", "deepinv.models", "deepinv.optim", "deepinv.physics", "deepinv.sampling", "deepinv.training", "deepinv.transform", "deepinv.unfolded", "deepinv.utils", "Trainer", "CBSD68", "DIV2K", "FMD", "FastMRISliceDataset", "Flickr2kHR", "HDF5Dataset", "Kohler", "LidcIdriSliceDataset", "LsdirHR", "NBUDataset", "PatchDataset", "Set14HR", "SimpleFastMRISliceDataset", "Urban100HR", "generate_dataset", "PlaceholderDataset", "Rescale", "ToComplex", "Artifact2ArtifactLoss", "BaseLossScheduler", "EILoss", "FNEJacobianSpectralNorm", "InterleavedEpochLossScheduler", "InterleavedLossScheduler", "JacobianSpectralNorm", "Loss", "MCLoss", "MOEILoss", "MOILoss", "Neighbor2Neighbor", "Phase2PhaseLoss", "R2RLoss", "RandomLossScheduler", "ScoreLoss", "SplittingLoss", "StackedPhysicsLoss", "StepLossScheduler", "SupLoss", "SureGaussianLoss", "SurePGLoss", "SurePoissonLoss", "TVLoss", "DiscriminatorLoss", "DiscriminatorMetric", "GeneratorLoss", "SupAdversarialDiscriminatorLoss", "SupAdversarialGeneratorLoss", "UAIRGeneratorLoss", "UnsupAdversarialDiscriminatorLoss", "UnsupAdversarialGeneratorLoss", "ERGAS", "L1L2", "LPIPS", "LpNorm", "MAE", "MSE", "Metric", "NIQE", "NMSE", "PSNR", "QNR", "SSIM", "SpectralAngleMapper", "ArtifactRemoval", "AutoEncoder", "BM3D", "CSGMGenerator", "ConvDecoder", "DCGANDiscriminator", "DCGANGenerator", "DRUNet", "DeepImagePrior", "Denoiser", "DiffUNet", "DnCNN", "EPLLDenoiser", "ESRGANDiscriminator", "EquivariantDenoiser", "GSDRUNet", "ICNN", "MedianFilter", "PDNet_DualBlock", "PDNet_PrimalBlock", "PanNet", "PatchGANDiscriminator", "Reconstructor", "Restormer", "SCUNet", "SwinIR", "TGVDenoiser", "TVDenoiser", "TimeAgnosticNet", "TimeAveragingNet", "UNet", "VarNet", "WaveletDenoiser", "WaveletDictDenoiser", "to_complex_denoiser", "AmplitudeLoss", "AmplitudeLossDistance", "BaseOptim", "Bregman", "BregmanL2", "Bregman_ICNN", "BurgEntropy", "DPIR", "DataFidelity", "Distance", "EPLL", "FixedPoint", "IndicatorL2", "IndicatorL2Distance", "L1", "L12Prior", "L1Distance", "L1Prior", "L2", "L2Distance", "LogPoissonLikelihood", "LogPoissonLikelihoodDistance", "NegEntropy", "OptimIterator", "PatchNR", "PatchPrior", "PnP", "PoissonLikelihood", "PoissonLikelihoodDistance", "Potential", "Prior", "RED", "ScorePrior", "StackedPhysicsDataFidelity", "TVPrior", "Tikhonov", "WaveletPrior", "optim_builder", "ADMMIteration", "CPIteration", "DRSIteration", "FISTAIteration", "GDIteration", "HQSIteration", "MDIteration", "PGDIteration", "SMIteration", "fStep", "gStep", "correct_global_phase", "spectral_methods", "GaussianMixtureModel", "bicgstab", "conjugate_gradient", "gradient_descent", "least_squares", "lsqr", "Blur", "BlurFFT", "CompressedSensing", "CompressiveSpectralImaging", "Decolorize", "DecomposablePhysics", "Demosaicing", "Denoising", "Downsampling", "DynamicMRI", "GammaNoise", "GaussianNoise", "Haze", "HyperSpectralUnmixing", "Inpainting", "LinearPhysics", "LogPoissonNoise", "MRI", "MRIMixin", "MultiCoilMRI", "NoiseModel", "Pansharpen", "PhaseRetrieval", "Physics", "PoissonGaussianNoise", "PoissonNoise", "Ptychography", "PtychographyLinearOperator", "RadioInterferometry", "RandomPhaseRetrieval", "SequentialMRI", "SinglePhotonLidar", "SinglePixelCamera", "SpaceVaryingBlur", "StackedLinearPhysics", "StackedPhysics", "StructuredRandom", "StructuredRandomPhaseRetrieval", "TimeMixin", "Tomography", "UniformGaussianNoise", "UniformNoise", "adjoint_function", "bicubic_filter", "bilinear_filter", "gaussian_blur", "sinc_filter", "IRadon", "Radon", "conv2d", "conv2d_fft", "conv3d_fft", "conv_transpose2d", "conv_transpose2d_fft", "conv_transpose3d_fft", "dst1", "histogram", "histogramdd", "multiplier", "multiplier_adjoint", "product_convolution2d", "Artifact2ArtifactSplittingMaskGenerator", "BaseMaskGenerator", "BernoulliSplittingMaskGenerator", "ConfocalBlurGenerator3D", "DiffractionBlurGenerator", "DiffractionBlurGenerator3D", "EquispacedMaskGenerator", "GaussianMaskGenerator", "GaussianSplittingMaskGenerator", "GeneratorMixture", "MotionBlurGenerator", "PSFGenerator", "Phase2PhaseSplittingMaskGenerator", "PhysicsGenerator", "ProductConvolutionBlurGenerator", "RandomMaskGenerator", "SigmaGenerator", "build_probe", "generate_shifts", "stack", "DDRM", "DPS", "DiffPIR", "DiffusionSampler", "MonteCarlo", "SKRock", "ULA", "test", "train", "AdversarialOptimizer", "AdversarialTrainer", "CPABDiffeomorphism", "Homography", "Reflect", "Rotate", "Scale", "Shift", "ShiftTime", "Transform", "Affine", "Euclidean", "PanTiltRotate", "Similarity", "BaseDEQ", "BaseUnfold", "DEQ_builder", "unfolded_builder", "AverageMeter", "ProgressMeter", "deepinv.utils.TensorList", "demo_mri_model", "dirac_like", "get_data_home", "get_degradation_url", "get_freer_gpu", "get_image_url", "get_timestamp", "load_dataset", "load_degradation", "load_image", "load_url_image", "ones_like", "plot", "plot_curves", "plot_inset", "plot_ortho3D", "plot_parameters", "plot_videos", "rand_like", "randn_like", "zeros_like", "Radio interferometric imaging with deepinverse", "Advanced", "Computation times", "Imaging inverse problems with adversarial networks", "Adversarial Learning", "Computation times", "A tour of blur operators", "Image deblurring with custom deep explicit prior.", "Creating your own dataset", "Reconstructing an image using the deep image prior.", "Using huggingface dataset", "Single photon lidar operator for depth ranging.", "Saving and loading models", "3D diffraction PSF", "Random phase retrieval and reconstruction methods.", "Creating a forward operator.", "A tour of forward sensing operators", "Ptychography phase retrieval", "Remote sensing with satellite images", "Tour of MRI functionality in DeepInverse", "Training a reconstruction network.", "Image transforms for equivariance &amp; augmentations", "Basics", "Computation times", "Examples", "3D wavelet denoising", "Image deblurring with Total-Variation (TV) prior", "Image inpainting with wavelet prior", "Optimization", "Computation times", "Expected Patch Log Likelihood (EPLL) for Denoising and Inpainting", "Patch priors for limited-angle computed tomography", "Patch Priors", "Computation times", "DPIR method for PnP image deblurring.", "PnP with custom optimization algorithm (Condat-Vu Primal-Dual)", "Plug-and-Play algorithm with Mirror Descent for Poisson noise inverse problems.", "Regularization by Denoising (RED) for Super-Resolution.", "Vanilla PnP for computed tomography (CT).", "Plug-and-Play", "Computation times", "Building your custom sampling algorithm.", "Image reconstruction with a diffusion model", "Implementing DiffPIR", "Implementing DPS", "Uncertainty quantification with PnP-ULA.", "Sampling", "Computation times", "Self-supervised MRI reconstruction with Artifact2Artifact", "Image transformations for Equivariant Imaging", "Self-supervised learning with Equivariant Imaging for MRI.", "Self-supervised learning from incomplete measurements of multiple operators.", "Self-supervised denoising with the Neighbor2Neighbor loss.", "Self-supervised denoising with the Generalized R2R loss.", "Self-supervised learning with measurement splitting", "Self-supervised denoising with the SURE loss.", "Self-supervised denoising with the UNSURE loss.", "Self-Supervised Learning", "Computation times", "Computation times", "Deep Equilibrium (DEQ) algorithms for image deblurring", "Learned Iterative Soft-Thresholding Algorithm (LISTA) for compressed sensing", "Learned iterative custom prior", "Learned Primal-Dual algorithm for CT scan.", "Unfolded Chambolle-Pock for constrained image inpainting", "Vanilla Unfolded algorithm for super-resolution", "Unfolded", "Computation times", "Community", "How to Contribute", "Finding Help", "DeepInverse: a PyTorch library for imaging with deep learning", "Quickstart", "Computation times", "User Guide", "Math Notation", "Utils", "Defining New Operators", "Functional", "Introduction", "Operators &amp; Noise", "Adversarial Networks", "Artifact Removal", "Denoisers", "Introduction", "Iterative Reconstruction (PnP, RED, etc.)", "Optimization", "Diffusion and MCMC Algorithms", "Specific Networks", "Unfolded Algorithms", "Pretrained Weights", "Datasets", "Training Losses", "Metrics", "Using Multiple GPUs", "Trainer", "Transforms"], "titleterms": {"1": [319, 321], "2": [319, 321], "3": [319, 321], "3d": [313, 319, 325], "4": 319, "5": 319, "6": 319, "A": [306, 316], "No": [3, 393], "The": [300, 343, 344], "Their": 380, "acceler": 319, "adjoint_funct": 210, "admmiter": 149, "advanc": [9, 301, 324, 396], "adversari": [2, 4, 8, 303, 304, 324, 381, 392], "adversarialoptim": 258, "adversarialtrain": 259, "affin": 268, "algorithm": [307, 309, 325, 326, 327, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 360, 361, 362, 363, 365, 385, 386, 387, 389], "all": 343, "ambientgan": 303, "amplitudeloss": 111, "amplitudelossdist": 112, "an": [309, 319, 327, 343, 385], "angl": 331, "api": 0, "appli": [310, 311], "approxim": 344, "architectur": [388, 389], "artifact": [4, 382], "artifact2artifact": 348, "artifact2artifactloss": 31, "artifact2artifactsplittingmaskgener": 229, "artifactremov": 76, "augment": 321, "autoencod": 77, "averagemet": 276, "base": [2, 3, 4, 5, 6, 9, 307, 308, 320, 325, 326, 327, 334, 335, 337, 350, 351, 352, 353, 355, 356, 360, 361, 362, 364, 365], "basedeq": 272, "baselossschedul": 32, "basemaskgener": 230, "baseoptim": 113, "baseunfold": 273, "basic": [306, 322, 324], "benefit": 315, "bernoullisplittingmaskgener": 231, "bicgstab": 163, "bicubic_filt": 211, "bilinear_filt": 212, "block": 10, "blur": [168, 306, 307, 316, 326, 334], "blurfft": 169, "bm3d": 78, "bregman": [5, 114, 386], "bregman_icnn": 116, "bregmanl2": 115, "brigg": 300, "buffer": 310, "build": 341, "build_prob": 246, "burgentropi": 117, "camera": 316, "carlo": [7, 342, 387], "cbsd68": 13, "chain": [7, 387], "chambol": 364, "check": 356, "class": [2, 3, 4, 5, 6, 9, 337, 341], "classic": [4, 383], "combin": 379, "commun": 368, "comparison": 314, "complex": 383, "compress": [316, 361, 362], "compressedsens": 170, "compressivespectralimag": 171, "comput": [302, 305, 316, 323, 329, 331, 333, 338, 340, 347, 358, 359, 367, 373], "condat": 335, "condit": [303, 381], "confoc": 313, "confocalblurgenerator3d": 232, "conjugate_gradi": 164, "constrain": 364, "construct": 314, "contribut": 369, "conv2d": 217, "conv2d_fft": 218, "conv3d_fft": 219, "conv_transpose2d": 220, "conv_transpose2d_fft": 221, "conv_transpose3d_fft": 222, "convdecod": 80, "convolut": [306, 313], "correct": 314, "correct_global_phas": 160, "cpabdiffeomorph": 260, "cpiter": 150, "creat": [308, 310, 311, 315, 325, 341, 342, 345], "csgm": 303, "csgmgener": 79, "ct": [338, 363], "custom": [10, 307, 315, 335, 337, 341, 362, 363, 389], "data": [1, 5, 307, 308, 310, 312, 319, 320, 321, 325, 326, 327, 334, 335, 336, 337, 338, 343, 348, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 386, 391], "datafidel": 119, "dataload": [308, 310], "dataset": [1, 303, 307, 308, 310, 320, 326, 327, 334, 335, 337, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365, 391], "dcgandiscrimin": 81, "dcgangener": 82, "ddrm": 249, "deblur": [307, 326, 334, 360], "decolor": [172, 316], "decompos": 315, "decomposablephys": 173, "deep": [4, 10, 307, 309, 360, 371, 381, 383, 389], "deepimageprior": 84, "deepinv": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 278], "deepinvers": [300, 319, 371], "defin": [303, 307, 309, 312, 320, 335, 336, 341, 342, 344, 345, 348, 354, 360, 361, 362, 363, 364, 365, 377], "definit": [331, 337, 380], "degrad": [307, 308, 320, 326, 327, 334, 335, 337, 350, 351, 360, 361, 362, 363, 364, 365], "demo": 376, "demo_mri_model": 279, "demosa": [174, 316], "denois": [4, 85, 175, 314, 316, 321, 325, 330, 337, 342, 343, 344, 352, 353, 355, 356, 383, 392], "depend": [344, 379], "depth": 311, "deq": 360, "deq_build": 274, "descent": [314, 317, 336], "descript": 376, "diffpir": [251, 343], "diffract": [306, 313], "diffractionblurgener": 233, "diffractionblurgenerator3d": 234, "diffunet": 86, "diffus": [7, 342, 344, 387], "diffusionsampl": 252, "dip": 309, "dirac_lik": 280, "discrimin": 381, "discriminatorloss": 55, "discriminatormetr": 56, "displai": 317, "distanc": [5, 120], "distribut": [6, 380], "div2k": 14, "dncnn": 87, "downsampl": 176, "dp": [250, 344], "dpir": [118, 334], "drsiter": 151, "drunet": 83, "dst1": 223, "dual": [335, 363], "dykstra": 325, "dynam": [319, 383], "dynamicmri": 177, "eiloss": 33, "em": 331, "epll": [121, 330, 331], "eplldenois": 88, "equilibrium": [10, 360, 389], "equispacedmaskgener": 235, "equivari": [321, 349, 350, 383], "equivariantdenois": 90, "erga": 63, "esrgandiscrimin": 89, "estim": 317, "etc": 385, "euclidean": 269, "evalu": [307, 326, 327, 334, 335, 336, 337, 338], "event": 368, "exampl": [12, 16, 18, 22, 23, 25, 26, 27, 31, 33, 34, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 106, 107, 108, 109, 113, 114, 117, 118, 119, 121, 123, 125, 129, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 147, 148, 150, 153, 156, 158, 159, 160, 161, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 209, 213, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 286, 287, 289, 291, 292, 293, 294, 295, 296, 324, 342], "expect": 330, "explicit": 307, "explor": [319, 326, 327], "extens": 325, "fastmri": 319, "fastmrislicedataset": 16, "fidel": [5, 343, 363, 386], "filter": 311, "final": 317, "find": 370, "fistaiter": 152, "fixedpoint": 122, "flickr2khr": 17, "fmd": 15, "fnejacobianspectralnorm": 34, "forward": [309, 311, 312, 315, 316, 320, 331, 335, 338, 341, 342, 345, 364], "from": [309, 310, 314, 316, 317, 341, 342, 345, 351], "fstep": [158, 335], "full": [3, 393], "function": [6, 319, 376, 378], "futur": 368, "gammanois": 178, "gan": [303, 381], "gaussian_blur": 213, "gaussianmaskgener": 236, "gaussianmixturemodel": 162, "gaussiannois": 179, "gaussiansplittingmaskgener": 237, "gditer": 153, "gener": [1, 6, 303, 306, 307, 308, 309, 311, 313, 314, 315, 317, 320, 326, 327, 334, 341, 342, 343, 345, 350, 351, 352, 353, 355, 356, 360, 361, 362, 364, 365, 379, 380, 391], "generate_dataset": 27, "generate_shift": 247, "generatorloss": 57, "generatormixtur": 238, "get": 319, "get_data_hom": 281, "get_degradation_url": 282, "get_freer_gpu": 283, "get_image_url": 284, "get_timestamp": 285, "gpu": 394, "gradient": [314, 317, 361, 362], "gradient_desc": 165, "groundtruth": 300, "gsdrunet": 91, "gstep": [159, 335], "guid": 374, "haze": 180, "hdf5dataset": 18, "help": 370, "histogram": 224, "histogramdd": 225, "homographi": 261, "how": 369, "hqsiter": 154, "huggingfac": 310, "hyperspectralunmix": 181, "icnn": 92, "imag": [1, 4, 300, 303, 307, 308, 309, 314, 315, 316, 317, 318, 320, 321, 325, 326, 327, 330, 331, 334, 335, 337, 338, 341, 342, 345, 349, 350, 351, 352, 353, 355, 356, 360, 361, 362, 364, 365, 371, 381], "implement": [343, 344, 385], "import": 300, "incomplet": 351, "indicatorl2": 123, "indicatorl2dist": 124, "initi": 314, "inpaint": [182, 316, 327, 330, 364], "input": 317, "instal": 344, "interferometr": 300, "interleavedepochlossschedul": 35, "interleavedlossschedul": 36, "internet": [309, 310, 314, 316, 317, 341, 342, 345], "introduct": [379, 384, 392, 393], "invers": [303, 307, 326, 327, 334, 335, 336, 338, 343, 344], "involv": 337, "iradon": 215, "iter": [5, 325, 341, 361, 362, 363, 385, 386], "jacobianspectralnorm": 37, "knee": 350, "kohler": 19, "l1": 125, "l12prior": 126, "l1distanc": 127, "l1l2": 64, "l1prior": 128, "l2": 129, "l2distanc": 130, "langevin": 7, "learn": [2, 304, 324, 350, 351, 354, 356, 357, 361, 362, 363, 371, 383, 392], "least_squar": 166, "level": 356, "librari": [310, 371], "lidar": 311, "lidcidrislicedataset": 20, "like": 325, "likelihood": [330, 345], "limit": 331, "linear": [315, 379], "linearphys": 183, "list": 375, "lista": 361, "load": [307, 308, 309, 310, 312, 314, 316, 317, 318, 319, 320, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 344, 345, 348, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365], "load_dataset": 286, "load_degrad": 287, "load_imag": 288, "load_url_imag": 289, "log": [11, 330, 376], "logpoissonlikelihood": 131, "logpoissonlikelihooddist": 132, "logpoissonnois": 184, "loop": 331, "loss": [2, 38, 348, 352, 353, 354, 355, 356, 392], "low": [360, 365], "lpip": 65, "lpnorm": 66, "lsdirhr": 21, "lsqr": 167, "mae": 67, "markov": [7, 387], "match": 311, "math": 375, "mathemat": 375, "mcloss": 39, "mcmc": [345, 387], "mditer": 155, "measur": [300, 309, 311, 314, 317, 318, 341, 342, 345, 351, 354, 361, 362], "medianfilt": 93, "method": [314, 334, 384, 385, 387], "metric": [3, 69, 393], "microscop": 313, "mirror": 336, "mixtur": 306, "mmse": 342, "model": [4, 5, 303, 309, 311, 312, 317, 320, 326, 327, 330, 331, 334, 335, 336, 337, 338, 341, 342, 344, 345, 348, 354, 363, 364], "modul": 335, "moeiloss": 40, "moiloss": 41, "mont": [7, 342, 387], "montecarlo": 253, "motion": 306, "motionblurgener": 239, "mri": [185, 316, 319, 348, 350], "mrimixin": 186, "mse": 68, "multicoilmri": 187, "multipl": [325, 351, 394], "multipli": 226, "multiplier_adjoint": 227, "natur": 300, "nbudataset": 22, "negentropi": 133, "neighbor2neighbor": [42, 352], "network": [2, 4, 303, 318, 319, 320, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 381, 383, 388, 392], "neural": [318, 319], "new": 377, "niqe": 70, "nmse": 71, "nois": [6, 309, 331, 336, 341, 342, 343, 345, 356, 380], "noisemodel": 188, "noisi": [352, 353, 355, 356], "non": 383, "notat": 375, "ones_lik": 290, "oper": [6, 300, 306, 307, 309, 311, 312, 315, 316, 320, 325, 326, 327, 331, 334, 335, 337, 338, 341, 342, 345, 350, 351, 360, 361, 362, 363, 364, 365, 374, 377, 379, 380], "optim": [5, 307, 324, 326, 327, 328, 335, 386], "optim_build": 148, "optimiter": 134, "other": [1, 11, 376, 392], "our": 315, "overal": 314, "overlap": 317, "overview": [378, 383, 386, 391, 392], "own": 308, "packag": 300, "pan": [316, 318], "pannet": 96, "pansharpen": 189, "pantiltrot": 270, "paramet": [331, 338, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 365, 379, 386], "particular": 337, "past": 368, "patch": [324, 330, 331, 332], "patchdataset": 23, "patchgandiscrimin": 97, "patchnr": [135, 331], "patchprior": 136, "path": [307, 308, 312, 320, 325, 326, 327, 334, 335, 336, 337, 338, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365], "pattern": 300, "pdnet": 363, "pdnet_dualblock": 94, "pdnet_primalblock": 95, "pgditer": 156, "phantom": 363, "phase": [314, 317], "phase2phaseloss": 43, "phase2phasesplittingmaskgener": 241, "phaseretriev": 190, "photon": 311, "physic": [6, 191, 307, 317, 348, 379], "physicsgener": 242, "pixel": 316, "placeholderdataset": 28, "plai": [321, 324, 336, 339], "plot": [11, 291, 309, 311, 326, 327, 331, 335, 336, 338, 341, 342, 345, 361, 362, 365, 376], "plot_curv": 292, "plot_inset": 293, "plot_ortho3d": 294, "plot_paramet": 295, "plot_video": 296, "plug": [321, 324, 336, 339], "pnp": [137, 314, 334, 335, 336, 337, 338, 345, 365, 385], "pock": 364, "poisson": 336, "poissongaussiannois": 192, "poissonlikelihood": 138, "poissonlikelihooddist": 139, "poissonnois": 193, "potenti": [5, 140, 386], "precondit": 341, "predefin": [5, 385, 386, 391], "prep": 348, "prepar": [317, 354], "pretrain": 390, "primal": [335, 363], "prior": [4, 5, 141, 300, 307, 309, 324, 326, 327, 331, 332, 337, 341, 345, 362, 363, 381, 386], "probabl": 380, "probe": 317, "problem": [300, 303, 307, 319, 325, 326, 327, 334, 335, 336, 337, 338, 343, 344], "product_convolution2d": 228, "productconvolutionblurgener": 243, "progressmet": 277, "proxim": [361, 362], "psf": 313, "psfgener": 240, "psnr": 72, "ptychographi": [194, 317], "ptychographylinearoper": 195, "put": 343, "pytorch": 371, "qnr": 73, "quantif": 345, "quickstart": 372, "r2r": 353, "r2rloss": 44, "radio": 300, "radiointerferometri": 196, "radon": 216, "rand_lik": 297, "randn_lik": 298, "random": [314, 363], "randomlossschedul": 45, "randommaskgener": 244, "randomphaseretriev": 197, "rang": 311, "raw": [318, 319], "reconstruct": [307, 309, 314, 320, 331, 342, 348, 350, 351, 364, 374, 384, 385], "reconstructor": 98, "recov": 311, "red": [142, 337, 385], "refer": [3, 393], "reflect": 262, "regular": [2, 337, 343, 392], "remot": 318, "remov": [4, 382], "requir": 300, "rescal": 29, "resolut": [316, 337, 360, 365], "restorm": 99, "result": [307, 308, 309, 311, 312, 320, 325, 326, 327, 334, 335, 336, 337, 338, 341, 342, 345, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365], "retriev": [314, 317], "ri": 300, "rotat": 263, "routin": 378, "run": [309, 331, 341, 342, 345], "sampl": [7, 300, 324, 341, 342, 343, 345, 346], "sampler": [341, 342, 345], "satellit": 318, "save": [312, 364], "scale": 264, "scan": 363, "schedul": [2, 343, 344, 392], "scoreloss": 46, "scoreprior": 143, "scunet": 100, "self": [2, 324, 348, 350, 351, 352, 353, 354, 355, 356, 357, 392], "sens": [316, 318, 361], "sequentialmri": 198, "set": [307, 317, 320, 326, 327, 331, 334, 335, 338, 343, 350, 351, 352, 353, 355, 356, 364], "set14hr": 24, "setup": [307, 308, 312, 314, 317, 320, 325, 326, 327, 334, 335, 336, 337, 338, 350, 351, 352, 353, 355, 356, 360, 361, 362, 363, 364, 365], "sharpen": [316, 318], "shift": 265, "shifttim": 266, "shuffl": 310, "sigmagener": 245, "signal": [311, 314], "similar": 271, "simpl": [9, 396], "simplefastmrislicedataset": 25, "simul": [300, 318], "sinc_filt": 214, "singl": [311, 316], "singlephotonlidar": 199, "singlepixelcamera": 200, "skrock": 254, "smiter": 157, "soft": 361, "solv": [300, 307, 318, 325, 326, 327, 334, 335, 338], "space": 306, "spacevaryingblur": 201, "specif": 388, "spectral": 314, "spectral_method": 161, "spectralanglemapp": 75, "split": 354, "splittingloss": 47, "ssim": 74, "stack": 248, "stackedlinearphys": 202, "stackedphys": 203, "stackedphysicsdatafidel": 144, "stackedphysicsloss": 48, "standard": 341, "start": 319, "step": [343, 344], "steplossschedul": 49, "stream": 310, "structuredrandom": 204, "structuredrandomphaseretriev": 205, "subsampl": 351, "summari": 390, "supadversarialdiscriminatorloss": 58, "supadversarialgeneratorloss": 59, "super": [316, 337, 365], "supervis": [2, 324, 348, 350, 351, 352, 353, 354, 355, 356, 357, 392], "suploss": 50, "sure": 355, "suregaussianloss": 51, "surepgloss": 52, "surepoissonloss": 53, "swinir": 101, "symbol": 375, "tensorlist": [11, 278, 376], "term": 363, "test": [256, 320, 330, 331, 348, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 374], "tgvdenois": 102, "thi": 337, "threshold": 361, "tikhonov": 146, "time": [302, 305, 323, 329, 333, 340, 347, 358, 359, 367, 373, 396], "timeagnosticnet": 104, "timeaveragingnet": 105, "timemixin": 206, "to_complex_denois": 110, "tocomplex": 30, "togeth": 343, "toi": [311, 315], "tomographi": [207, 316, 331, 338], "total": 326, "tour": [306, 316, 319], "train": [8, 257, 303, 319, 320, 331, 348, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 374, 392], "trainabl": 363, "trainer": [12, 395], "transform": [1, 9, 267, 310, 321, 349, 391, 396], "tv": 326, "tvdenois": 103, "tvloss": 54, "tvprior": 145, "uair": 303, "uairgeneratorloss": 60, "ula": [255, 341, 345], "uncertainti": 345, "uncondit": 381, "unet": 106, "unfold": [10, 324, 361, 362, 363, 364, 365, 366, 389], "unfolded_build": 275, "uniformgaussiannois": 208, "uniformnois": 209, "unsupadversarialdiscriminatorloss": 61, "unsupadversarialgeneratorloss": 62, "unsur": 356, "up": [307, 317, 320, 326, 327, 334, 335, 338, 350, 351, 352, 353, 355, 356, 364], "urban100hr": 26, "us": [12, 16, 18, 22, 23, 25, 26, 27, 31, 33, 34, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 106, 107, 108, 109, 113, 114, 117, 118, 119, 121, 123, 125, 129, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 147, 148, 150, 153, 156, 158, 159, 160, 161, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 209, 213, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 286, 287, 289, 291, 292, 293, 294, 295, 296, 309, 310, 315, 319, 325, 343, 344, 394], "user": 374, "util": [4, 5, 11, 278, 374, 376, 383, 386], "vanilla": [338, 365], "vari": 306, "variat": 326, "varnet": 107, "verifi": 315, "video": [9, 396], "visual": [314, 317], "volum": 325, "vu": 335, "wavelet": [300, 325, 327], "waveletdenois": 108, "waveletdictdenois": 109, "waveletprior": 147, "weight": [300, 362, 365, 390], "widefield": 313, "your": [308, 341, 343, 344], "zeros_lik": 299}})